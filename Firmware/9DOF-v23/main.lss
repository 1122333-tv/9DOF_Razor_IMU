
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004a4  00800100  00002b9c  00002c30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002b9c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  008005a4  008005a4  000030d4  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000030d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002cb  00000000  00000000  000030f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002ba8  00000000  00000000  000033bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000399  00000000  00000000  00005f67  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000024f6  00000000  00000000  00006300  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000270  00000000  00000000  000087f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000032f  00000000  00000000  00008a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000014af  00000000  00000000  00008d97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__ctors_end>
       4:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
       8:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
       c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      10:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      14:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      18:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      1c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      20:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      24:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      28:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      2c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      30:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      34:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      38:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      3c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      40:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      44:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      48:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      4c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      50:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      54:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      58:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      5c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      60:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      64:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>

00000068 <wlcm_str>:
      68:	0a 0a 0d 39 44 4f 46 20 49 4d 55 20 46 69 72 6d     ...9DOF IMU Firm
      78:	77 61 72 65 20 76 32 33 20 0a 0d 3d 3d 3d 3d 3d     ware v23 ..=====
      88:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
      98:	3d 3d 3d 3d 3d 00                                   =====.

0000009e <accel>:
      9e:	0a 0d 5b 31 5d 41 63 63 65 6c 65 72 6f 6d 65 74     ..[1]Acceleromet
      ae:	65 72 3a 20 41 44 58 4c 33 34 35 20 0a 0d 00        er: ADXL345 ...

000000bd <mag>:
      bd:	5b 32 5d 4d 61 67 6e 65 74 6f 6d 65 74 65 72 3a     [2]Magnetometer:
      cd:	20 48 4d 43 35 38 38 33 20 0a 0d 00                  HMC5883 ...

000000d9 <gyro>:
      d9:	5b 33 5d 47 79 72 6f 73 63 6f 70 65 3a 20 49 54     [3]Gyroscope: IT
      e9:	47 2d 33 32 30 30 20 0a 0d 00                       G-3200 ...

000000f3 <raw_out>:
      f3:	5b 34 5d 52 61 77 20 4f 75 74 70 75 74 0a 0d 00     [4]Raw Output...

00000103 <baud_change>:
     103:	5b 35 5d 43 68 61 6e 67 65 20 42 61 75 64 20 52     [5]Change Baud R
     113:	61 74 65 3a 20 00                                   ate: .

00000119 <autorun>:
     119:	5b 43 74 72 6c 2b 7a 5d 54 6f 67 67 6c 65 20 41     [Ctrl+z]Toggle A
     129:	75 74 6f 72 75 6e 0a 0d 00                          utorun...

00000132 <help_>:
     132:	5b 3f 5d 48 65 6c 70 0a 0d 00                       [?]Help...

0000013c <__ctors_end>:
     13c:	11 24       	eor	r1, r1
     13e:	1f be       	out	0x3f, r1	; 63
     140:	cf ef       	ldi	r28, 0xFF	; 255
     142:	d8 e0       	ldi	r29, 0x08	; 8
     144:	de bf       	out	0x3e, r29	; 62
     146:	cd bf       	out	0x3d, r28	; 61

00000148 <__do_copy_data>:
     148:	15 e0       	ldi	r17, 0x05	; 5
     14a:	a0 e0       	ldi	r26, 0x00	; 0
     14c:	b1 e0       	ldi	r27, 0x01	; 1
     14e:	ec e9       	ldi	r30, 0x9C	; 156
     150:	fb e2       	ldi	r31, 0x2B	; 43
     152:	02 c0       	rjmp	.+4      	; 0x158 <.do_copy_data_start>

00000154 <.do_copy_data_loop>:
     154:	05 90       	lpm	r0, Z+
     156:	0d 92       	st	X+, r0

00000158 <.do_copy_data_start>:
     158:	a4 3a       	cpi	r26, 0xA4	; 164
     15a:	b1 07       	cpc	r27, r17
     15c:	d9 f7       	brne	.-10     	; 0x154 <.do_copy_data_loop>

0000015e <__do_clear_bss>:
     15e:	15 e0       	ldi	r17, 0x05	; 5
     160:	a4 ea       	ldi	r26, 0xA4	; 164
     162:	b5 e0       	ldi	r27, 0x05	; 5
     164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
     166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
     168:	a4 3b       	cpi	r26, 0xB4	; 180
     16a:	b1 07       	cpc	r27, r17
     16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>
     16e:	0e 94 ac 12 	call	0x2558	; 0x2558 <main>
     172:	0c 94 cc 15 	jmp	0x2b98	; 0x2b98 <_exit>

00000176 <__bad_interrupt>:
     176:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000017a <i2cSetBitrate>:
	// enable TWI (two-wire interface)
	sbi(TWCR, TWEN);	// Enable TWI
}

void i2cSetBitrate(unsigned short bitrateKHz)
{
     17a:	bc 01       	movw	r22, r24
	unsigned char bitrate_div;
	// set i2c bitrate
	// SCL freq = F_CPU/(16+2*TWBR))
	cbi(TWSR, TWPS0);
     17c:	80 91 b9 00 	lds	r24, 0x00B9
     180:	8e 7f       	andi	r24, 0xFE	; 254
     182:	80 93 b9 00 	sts	0x00B9, r24
	cbi(TWSR, TWPS1);
     186:	80 91 b9 00 	lds	r24, 0x00B9
     18a:	8d 7f       	andi	r24, 0xFD	; 253
     18c:	80 93 b9 00 	sts	0x00B9, r24
	
	//calculate bitrate division	
	bitrate_div = ((F_CPU/4000l)/bitrateKHz);
     190:	80 ed       	ldi	r24, 0xD0	; 208
     192:	97 e0       	ldi	r25, 0x07	; 7
     194:	0e 94 c2 12 	call	0x2584	; 0x2584 <__udivmodhi4>
	if(bitrate_div >= 16)
     198:	60 31       	cpi	r22, 0x10	; 16
     19a:	30 f0       	brcs	.+12     	; 0x1a8 <i2cSetBitrate+0x2e>
		bitrate_div = (bitrate_div-16)/2;
     19c:	86 2f       	mov	r24, r22
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	40 97       	sbiw	r24, 0x10	; 16
     1a2:	95 95       	asr	r25
     1a4:	87 95       	ror	r24
     1a6:	68 2f       	mov	r22, r24
	outb(TWBR, bitrate_div);
     1a8:	60 93 b8 00 	sts	0x00B8, r22
}
     1ac:	08 95       	ret

000001ae <i2cInit>:
 *********************/

void i2cInit(void)
{
	// set i2c bit rate to 40KHz
	i2cSetBitrate(40);
     1ae:	88 e2       	ldi	r24, 0x28	; 40
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	0e 94 bd 00 	call	0x17a	; 0x17a <i2cSetBitrate>
	// enable TWI (two-wire interface)
	sbi(TWCR, TWEN);	// Enable TWI
     1b6:	ec eb       	ldi	r30, 0xBC	; 188
     1b8:	f0 e0       	ldi	r31, 0x00	; 0
     1ba:	80 81       	ld	r24, Z
     1bc:	84 60       	ori	r24, 0x04	; 4
     1be:	80 83       	st	Z, r24
}
     1c0:	08 95       	ret

000001c2 <i2cSendStart>:
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     1c2:	3c 9a       	sbi	0x07, 4	; 7
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     1c4:	84 ea       	ldi	r24, 0xA4	; 164
     1c6:	80 93 bc 00 	sts	0x00BC, r24
}
     1ca:	08 95       	ret

000001cc <i2cSendStop>:

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     1cc:	84 e9       	ldi	r24, 0x94	; 148
     1ce:	80 93 bc 00 	sts	0x00BC, r24
}
     1d2:	08 95       	ret

000001d4 <i2cWaitForComplete>:

void i2cWaitForComplete(void)
{
     1d4:	20 e0       	ldi	r18, 0x00	; 0
     1d6:	30 e0       	ldi	r19, 0x00	; 0
     1d8:	02 c0       	rjmp	.+4      	; 0x1de <i2cWaitForComplete+0xa>
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
     1da:	2f 5f       	subi	r18, 0xFF	; 255
     1dc:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     1de:	80 91 bc 00 	lds	r24, 0x00BC
     1e2:	87 fd       	sbrc	r24, 7
     1e4:	03 c0       	rjmp	.+6      	; 0x1ec <i2cWaitForComplete+0x18>
     1e6:	2a 35       	cpi	r18, 0x5A	; 90
     1e8:	31 05       	cpc	r19, r1
     1ea:	b9 f7       	brne	.-18     	; 0x1da <i2cWaitForComplete+0x6>
     1ec:	08 95       	ret

000001ee <i2cReceiveByte>:
}

void i2cReceiveByte(unsigned char ackFlag)
{
	// begin receive over i2c
	if( ackFlag )
     1ee:	88 23       	and	r24, r24
     1f0:	29 f0       	breq	.+10     	; 0x1fc <i2cReceiveByte+0xe>
	{
		// ackFlag = TRUE: ACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
     1f2:	80 91 bc 00 	lds	r24, 0x00BC
     1f6:	8f 70       	andi	r24, 0x0F	; 15
     1f8:	80 6c       	ori	r24, 0xC0	; 192
     1fa:	04 c0       	rjmp	.+8      	; 0x204 <i2cReceiveByte+0x16>
	}
	else
	{
		// ackFlag = FALSE: NACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
     1fc:	80 91 bc 00 	lds	r24, 0x00BC
     200:	8f 70       	andi	r24, 0x0F	; 15
     202:	80 68       	ori	r24, 0x80	; 128
     204:	80 93 bc 00 	sts	0x00BC, r24
     208:	08 95       	ret

0000020a <i2cGetReceivedByte>:
}

unsigned char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
     20a:	80 91 bb 00 	lds	r24, 0x00BB
}
     20e:	08 95       	ret

00000210 <i2cGetStatus>:

unsigned char i2cGetStatus(void)
{
	// retieve current i2c status from i2c TWSR
	return( inb(TWSR) );
     210:	80 91 b9 00 	lds	r24, 0x00B9
}
     214:	08 95       	ret

00000216 <delay_ms>:

void delay_ms(uint16_t x)
{
     216:	0b c0       	rjmp	.+22     	; 0x22e <delay_ms+0x18>
  uint8_t y, z;
  for ( ; x > 0 ; x--){
     218:	20 e0       	ldi	r18, 0x00	; 0
	...
    for ( y = 0 ; y < 90 ; y++){
     226:	2f 5f       	subi	r18, 0xFF	; 255
     228:	2a 35       	cpi	r18, 0x5A	; 90
     22a:	b9 f7       	brne	.-18     	; 0x21a <delay_ms+0x4>
}

void delay_ms(uint16_t x)
{
  uint8_t y, z;
  for ( ; x > 0 ; x--){
     22c:	01 97       	sbiw	r24, 0x01	; 1
     22e:	00 97       	sbiw	r24, 0x00	; 0
     230:	99 f7       	brne	.-26     	; 0x218 <delay_ms+0x2>
      for ( z = 0 ; z < 6 ; z++){
        asm volatile ("nop");
      }
    }
  }
     232:	08 95       	ret

00000234 <i2cSendByte>:
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
}

void i2cSendByte(unsigned char data)
{
     234:	1f 93       	push	r17
     236:	18 2f       	mov	r17, r24
	delay_ms(1);
     238:	81 e0       	ldi	r24, 0x01	; 1
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	0e 94 0b 01 	call	0x216	; 0x216 <delay_ms>
	//printf("sending 0x%x\n", data);
	WRITE_sda();
     240:	3c 9a       	sbi	0x07, 4	; 7
	// save data to the TWDR
	TWDR = data;
     242:	10 93 bb 00 	sts	0x00BB, r17
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
     246:	84 e8       	ldi	r24, 0x84	; 132
     248:	80 93 bc 00 	sts	0x00BC, r24
}
     24c:	1f 91       	pop	r17
     24e:	08 95       	ret

00000250 <accelerometer_init>:
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     250:	3c 9a       	sbi	0x07, 4	; 7
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     252:	84 ea       	ldi	r24, 0xA4	; 164
     254:	80 93 bc 00 	sts	0x00BC, r24
     258:	20 e0       	ldi	r18, 0x00	; 0
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	02 c0       	rjmp	.+4      	; 0x262 <accelerometer_init+0x12>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
     25e:	2f 5f       	subi	r18, 0xFF	; 255
     260:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     262:	80 91 bc 00 	lds	r24, 0x00BC
     266:	87 fd       	sbrc	r24, 7
     268:	03 c0       	rjmp	.+6      	; 0x270 <accelerometer_init+0x20>
     26a:	2a 35       	cpi	r18, 0x5A	; 90
     26c:	31 05       	cpc	r19, r1
     26e:	b9 f7       	brne	.-18     	; 0x25e <accelerometer_init+0xe>
{

	//initialize
	i2cSendStart();
	i2cWaitForComplete();
	i2cSendByte(0xA6);    //write to ADXL
     270:	86 ea       	ldi	r24, 0xA6	; 166
     272:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
     276:	20 e0       	ldi	r18, 0x00	; 0
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	02 c0       	rjmp	.+4      	; 0x280 <accelerometer_init+0x30>
		i++;
     27c:	2f 5f       	subi	r18, 0xFF	; 255
     27e:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     280:	80 91 bc 00 	lds	r24, 0x00BC
     284:	87 fd       	sbrc	r24, 7
     286:	03 c0       	rjmp	.+6      	; 0x28e <accelerometer_init+0x3e>
     288:	2a 35       	cpi	r18, 0x5A	; 90
     28a:	31 05       	cpc	r19, r1
     28c:	b9 f7       	brne	.-18     	; 0x27c <accelerometer_init+0x2c>
	i2cWaitForComplete();
	i2cSendByte(0x2D);    //power register
     28e:	8d e2       	ldi	r24, 0x2D	; 45
     290:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
     294:	20 e0       	ldi	r18, 0x00	; 0
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	02 c0       	rjmp	.+4      	; 0x29e <accelerometer_init+0x4e>
		i++;
     29a:	2f 5f       	subi	r18, 0xFF	; 255
     29c:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     29e:	80 91 bc 00 	lds	r24, 0x00BC
     2a2:	87 fd       	sbrc	r24, 7
     2a4:	03 c0       	rjmp	.+6      	; 0x2ac <accelerometer_init+0x5c>
     2a6:	2a 35       	cpi	r18, 0x5A	; 90
     2a8:	31 05       	cpc	r19, r1
     2aa:	b9 f7       	brne	.-18     	; 0x29a <accelerometer_init+0x4a>
	i2cWaitForComplete();
	i2cSendByte(0x08);    //measurement mode
     2ac:	88 e0       	ldi	r24, 0x08	; 8
     2ae:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
     2b2:	20 e0       	ldi	r18, 0x00	; 0
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	02 c0       	rjmp	.+4      	; 0x2bc <accelerometer_init+0x6c>
		i++;
     2b8:	2f 5f       	subi	r18, 0xFF	; 255
     2ba:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     2bc:	80 91 bc 00 	lds	r24, 0x00BC
     2c0:	87 fd       	sbrc	r24, 7
     2c2:	03 c0       	rjmp	.+6      	; 0x2ca <accelerometer_init+0x7a>
     2c4:	2a 35       	cpi	r18, 0x5A	; 90
     2c6:	31 05       	cpc	r19, r1
     2c8:	b9 f7       	brne	.-18     	; 0x2b8 <accelerometer_init+0x68>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     2ca:	84 e9       	ldi	r24, 0x94	; 148
     2cc:	80 93 bc 00 	sts	0x00BC, r24
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     2d0:	3c 9a       	sbi	0x07, 4	; 7
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     2d2:	84 ea       	ldi	r24, 0xA4	; 164
     2d4:	80 93 bc 00 	sts	0x00BC, r24
     2d8:	20 e0       	ldi	r18, 0x00	; 0
     2da:	30 e0       	ldi	r19, 0x00	; 0
     2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <accelerometer_init+0x92>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
     2de:	2f 5f       	subi	r18, 0xFF	; 255
     2e0:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     2e2:	80 91 bc 00 	lds	r24, 0x00BC
     2e6:	87 fd       	sbrc	r24, 7
     2e8:	03 c0       	rjmp	.+6      	; 0x2f0 <accelerometer_init+0xa0>
     2ea:	2a 35       	cpi	r18, 0x5A	; 90
     2ec:	31 05       	cpc	r19, r1
     2ee:	b9 f7       	brne	.-18     	; 0x2de <accelerometer_init+0x8e>
	i2cWaitForComplete();
	i2cSendStop();
	
	i2cSendStart();
	i2cWaitForComplete();
	i2cSendByte(0xA6);    //write to ADXL
     2f0:	86 ea       	ldi	r24, 0xA6	; 166
     2f2:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
     2f6:	20 e0       	ldi	r18, 0x00	; 0
     2f8:	30 e0       	ldi	r19, 0x00	; 0
     2fa:	02 c0       	rjmp	.+4      	; 0x300 <accelerometer_init+0xb0>
		i++;
     2fc:	2f 5f       	subi	r18, 0xFF	; 255
     2fe:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     300:	80 91 bc 00 	lds	r24, 0x00BC
     304:	87 fd       	sbrc	r24, 7
     306:	03 c0       	rjmp	.+6      	; 0x30e <accelerometer_init+0xbe>
     308:	2a 35       	cpi	r18, 0x5A	; 90
     30a:	31 05       	cpc	r19, r1
     30c:	b9 f7       	brne	.-18     	; 0x2fc <accelerometer_init+0xac>
	i2cWaitForComplete();
	i2cSendByte(0x31);    //data format
     30e:	81 e3       	ldi	r24, 0x31	; 49
     310:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
     314:	20 e0       	ldi	r18, 0x00	; 0
     316:	30 e0       	ldi	r19, 0x00	; 0
     318:	02 c0       	rjmp	.+4      	; 0x31e <accelerometer_init+0xce>
		i++;
     31a:	2f 5f       	subi	r18, 0xFF	; 255
     31c:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     31e:	80 91 bc 00 	lds	r24, 0x00BC
     322:	87 fd       	sbrc	r24, 7
     324:	03 c0       	rjmp	.+6      	; 0x32c <accelerometer_init+0xdc>
     326:	2a 35       	cpi	r18, 0x5A	; 90
     328:	31 05       	cpc	r19, r1
     32a:	b9 f7       	brne	.-18     	; 0x31a <accelerometer_init+0xca>
	i2cWaitForComplete();
	i2cSendByte(0x08);    //full resolution
     32c:	88 e0       	ldi	r24, 0x08	; 8
     32e:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
     332:	20 e0       	ldi	r18, 0x00	; 0
     334:	30 e0       	ldi	r19, 0x00	; 0
     336:	02 c0       	rjmp	.+4      	; 0x33c <accelerometer_init+0xec>
		i++;
     338:	2f 5f       	subi	r18, 0xFF	; 255
     33a:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     33c:	80 91 bc 00 	lds	r24, 0x00BC
     340:	87 fd       	sbrc	r24, 7
     342:	03 c0       	rjmp	.+6      	; 0x34a <accelerometer_init+0xfa>
     344:	2a 35       	cpi	r18, 0x5A	; 90
     346:	31 05       	cpc	r19, r1
     348:	b9 f7       	brne	.-18     	; 0x338 <accelerometer_init+0xe8>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     34a:	84 e9       	ldi	r24, 0x94	; 148
     34c:	80 93 bc 00 	sts	0x00BC, r24
	i2cWaitForComplete();
	i2cSendStop();

}
     350:	08 95       	ret

00000352 <gyro_init>:
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     352:	3c 9a       	sbi	0x07, 4	; 7
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     354:	84 ea       	ldi	r24, 0xA4	; 164
     356:	80 93 bc 00 	sts	0x00BC, r24
     35a:	20 e0       	ldi	r18, 0x00	; 0
     35c:	30 e0       	ldi	r19, 0x00	; 0
     35e:	02 c0       	rjmp	.+4      	; 0x364 <gyro_init+0x12>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
     360:	2f 5f       	subi	r18, 0xFF	; 255
     362:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     364:	80 91 bc 00 	lds	r24, 0x00BC
     368:	87 fd       	sbrc	r24, 7
     36a:	03 c0       	rjmp	.+6      	; 0x372 <gyro_init+0x20>
     36c:	2a 35       	cpi	r18, 0x5A	; 90
     36e:	31 05       	cpc	r19, r1
     370:	b9 f7       	brne	.-18     	; 0x360 <gyro_init+0xe>

void gyro_init(void)
{
	i2cSendStart();
	i2cWaitForComplete();
	i2cSendByte(ITG3200_W);	// write 0xB4
     372:	80 ed       	ldi	r24, 0xD0	; 208
     374:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
     378:	20 e0       	ldi	r18, 0x00	; 0
     37a:	30 e0       	ldi	r19, 0x00	; 0
     37c:	02 c0       	rjmp	.+4      	; 0x382 <gyro_init+0x30>
		i++;
     37e:	2f 5f       	subi	r18, 0xFF	; 255
     380:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     382:	80 91 bc 00 	lds	r24, 0x00BC
     386:	87 fd       	sbrc	r24, 7
     388:	03 c0       	rjmp	.+6      	; 0x390 <gyro_init+0x3e>
     38a:	2a 35       	cpi	r18, 0x5A	; 90
     38c:	31 05       	cpc	r19, r1
     38e:	b9 f7       	brne	.-18     	; 0x37e <gyro_init+0x2c>
	i2cWaitForComplete();
	i2cSendByte(0x3E);	// write register address
     390:	8e e3       	ldi	r24, 0x3E	; 62
     392:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
     396:	20 e0       	ldi	r18, 0x00	; 0
     398:	30 e0       	ldi	r19, 0x00	; 0
     39a:	02 c0       	rjmp	.+4      	; 0x3a0 <gyro_init+0x4e>
		i++;
     39c:	2f 5f       	subi	r18, 0xFF	; 255
     39e:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     3a0:	80 91 bc 00 	lds	r24, 0x00BC
     3a4:	87 fd       	sbrc	r24, 7
     3a6:	03 c0       	rjmp	.+6      	; 0x3ae <gyro_init+0x5c>
     3a8:	2a 35       	cpi	r18, 0x5A	; 90
     3aa:	31 05       	cpc	r19, r1
     3ac:	b9 f7       	brne	.-18     	; 0x39c <gyro_init+0x4a>
	i2cWaitForComplete();
	i2cSendByte(0x80);
     3ae:	80 e8       	ldi	r24, 0x80	; 128
     3b0:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
     3b4:	20 e0       	ldi	r18, 0x00	; 0
     3b6:	30 e0       	ldi	r19, 0x00	; 0
     3b8:	02 c0       	rjmp	.+4      	; 0x3be <gyro_init+0x6c>
		i++;
     3ba:	2f 5f       	subi	r18, 0xFF	; 255
     3bc:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     3be:	80 91 bc 00 	lds	r24, 0x00BC
     3c2:	87 fd       	sbrc	r24, 7
     3c4:	03 c0       	rjmp	.+6      	; 0x3cc <gyro_init+0x7a>
     3c6:	2a 35       	cpi	r18, 0x5A	; 90
     3c8:	31 05       	cpc	r19, r1
     3ca:	b9 f7       	brne	.-18     	; 0x3ba <gyro_init+0x68>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     3cc:	84 e9       	ldi	r24, 0x94	; 148
     3ce:	80 93 bc 00 	sts	0x00BC, r24
	i2cWaitForComplete();
	i2cSendStop();
	
	delay_ms(10);
     3d2:	8a e0       	ldi	r24, 0x0A	; 10
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	0e 94 0b 01 	call	0x216	; 0x216 <delay_ms>
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     3da:	3c 9a       	sbi	0x07, 4	; 7
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     3dc:	84 ea       	ldi	r24, 0xA4	; 164
     3de:	80 93 bc 00 	sts	0x00BC, r24
     3e2:	20 e0       	ldi	r18, 0x00	; 0
     3e4:	30 e0       	ldi	r19, 0x00	; 0
     3e6:	02 c0       	rjmp	.+4      	; 0x3ec <gyro_init+0x9a>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
     3e8:	2f 5f       	subi	r18, 0xFF	; 255
     3ea:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     3ec:	80 91 bc 00 	lds	r24, 0x00BC
     3f0:	87 fd       	sbrc	r24, 7
     3f2:	03 c0       	rjmp	.+6      	; 0x3fa <gyro_init+0xa8>
     3f4:	2a 35       	cpi	r18, 0x5A	; 90
     3f6:	31 05       	cpc	r19, r1
     3f8:	b9 f7       	brne	.-18     	; 0x3e8 <gyro_init+0x96>
	
	i2cSendStart();
	i2cWaitForComplete();
	i2cSendByte(ITG3200_W);	// write 0xB4
     3fa:	80 ed       	ldi	r24, 0xD0	; 208
     3fc:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
     400:	20 e0       	ldi	r18, 0x00	; 0
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	02 c0       	rjmp	.+4      	; 0x40a <gyro_init+0xb8>
		i++;
     406:	2f 5f       	subi	r18, 0xFF	; 255
     408:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     40a:	80 91 bc 00 	lds	r24, 0x00BC
     40e:	87 fd       	sbrc	r24, 7
     410:	03 c0       	rjmp	.+6      	; 0x418 <gyro_init+0xc6>
     412:	2a 35       	cpi	r18, 0x5A	; 90
     414:	31 05       	cpc	r19, r1
     416:	b9 f7       	brne	.-18     	; 0x406 <gyro_init+0xb4>
	i2cWaitForComplete();
	i2cSendByte(0x16);	// write register address
     418:	86 e1       	ldi	r24, 0x16	; 22
     41a:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
     41e:	20 e0       	ldi	r18, 0x00	; 0
     420:	30 e0       	ldi	r19, 0x00	; 0
     422:	02 c0       	rjmp	.+4      	; 0x428 <gyro_init+0xd6>
		i++;
     424:	2f 5f       	subi	r18, 0xFF	; 255
     426:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     428:	80 91 bc 00 	lds	r24, 0x00BC
     42c:	87 fd       	sbrc	r24, 7
     42e:	03 c0       	rjmp	.+6      	; 0x436 <gyro_init+0xe4>
     430:	2a 35       	cpi	r18, 0x5A	; 90
     432:	31 05       	cpc	r19, r1
     434:	b9 f7       	brne	.-18     	; 0x424 <gyro_init+0xd2>
	i2cWaitForComplete();
	i2cSendByte(0x18);  // DLPF_CFG = 0, FS_SEL = 3
     436:	88 e1       	ldi	r24, 0x18	; 24
     438:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
     43c:	20 e0       	ldi	r18, 0x00	; 0
     43e:	30 e0       	ldi	r19, 0x00	; 0
     440:	02 c0       	rjmp	.+4      	; 0x446 <gyro_init+0xf4>
		i++;
     442:	2f 5f       	subi	r18, 0xFF	; 255
     444:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     446:	80 91 bc 00 	lds	r24, 0x00BC
     44a:	87 fd       	sbrc	r24, 7
     44c:	03 c0       	rjmp	.+6      	; 0x454 <gyro_init+0x102>
     44e:	2a 35       	cpi	r18, 0x5A	; 90
     450:	31 05       	cpc	r19, r1
     452:	b9 f7       	brne	.-18     	; 0x442 <gyro_init+0xf0>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     454:	84 e9       	ldi	r24, 0x94	; 148
     456:	80 93 bc 00 	sts	0x00BC, r24
	i2cWaitForComplete();
	i2cSendStop();	
	
	delay_ms(10);
     45a:	8a e0       	ldi	r24, 0x0A	; 10
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	0e 94 0b 01 	call	0x216	; 0x216 <delay_ms>
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     462:	3c 9a       	sbi	0x07, 4	; 7
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     464:	84 ea       	ldi	r24, 0xA4	; 164
     466:	80 93 bc 00 	sts	0x00BC, r24
     46a:	20 e0       	ldi	r18, 0x00	; 0
     46c:	30 e0       	ldi	r19, 0x00	; 0
     46e:	02 c0       	rjmp	.+4      	; 0x474 <gyro_init+0x122>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
     470:	2f 5f       	subi	r18, 0xFF	; 255
     472:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     474:	80 91 bc 00 	lds	r24, 0x00BC
     478:	87 fd       	sbrc	r24, 7
     47a:	03 c0       	rjmp	.+6      	; 0x482 <gyro_init+0x130>
     47c:	2a 35       	cpi	r18, 0x5A	; 90
     47e:	31 05       	cpc	r19, r1
     480:	b9 f7       	brne	.-18     	; 0x470 <gyro_init+0x11e>
	
	i2cSendStart();
	i2cWaitForComplete();
	i2cSendByte(ITG3200_W);	// write 0xB4
     482:	80 ed       	ldi	r24, 0xD0	; 208
     484:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
     488:	20 e0       	ldi	r18, 0x00	; 0
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	02 c0       	rjmp	.+4      	; 0x492 <gyro_init+0x140>
		i++;
     48e:	2f 5f       	subi	r18, 0xFF	; 255
     490:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     492:	80 91 bc 00 	lds	r24, 0x00BC
     496:	87 fd       	sbrc	r24, 7
     498:	03 c0       	rjmp	.+6      	; 0x4a0 <gyro_init+0x14e>
     49a:	2a 35       	cpi	r18, 0x5A	; 90
     49c:	31 05       	cpc	r19, r1
     49e:	b9 f7       	brne	.-18     	; 0x48e <gyro_init+0x13c>
	i2cWaitForComplete();
	i2cSendByte(0x3E);	// write register address
     4a0:	8e e3       	ldi	r24, 0x3E	; 62
     4a2:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
     4a6:	20 e0       	ldi	r18, 0x00	; 0
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <gyro_init+0x15e>
		i++;
     4ac:	2f 5f       	subi	r18, 0xFF	; 255
     4ae:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     4b0:	80 91 bc 00 	lds	r24, 0x00BC
     4b4:	87 fd       	sbrc	r24, 7
     4b6:	03 c0       	rjmp	.+6      	; 0x4be <gyro_init+0x16c>
     4b8:	2a 35       	cpi	r18, 0x5A	; 90
     4ba:	31 05       	cpc	r19, r1
     4bc:	b9 f7       	brne	.-18     	; 0x4ac <gyro_init+0x15a>
	i2cWaitForComplete();
	i2cSendByte(0x00);
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
     4c4:	20 e0       	ldi	r18, 0x00	; 0
     4c6:	30 e0       	ldi	r19, 0x00	; 0
     4c8:	02 c0       	rjmp	.+4      	; 0x4ce <gyro_init+0x17c>
		i++;
     4ca:	2f 5f       	subi	r18, 0xFF	; 255
     4cc:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     4ce:	80 91 bc 00 	lds	r24, 0x00BC
     4d2:	87 fd       	sbrc	r24, 7
     4d4:	03 c0       	rjmp	.+6      	; 0x4dc <gyro_init+0x18a>
     4d6:	2a 35       	cpi	r18, 0x5A	; 90
     4d8:	31 05       	cpc	r19, r1
     4da:	b9 f7       	brne	.-18     	; 0x4ca <gyro_init+0x178>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     4dc:	84 e9       	ldi	r24, 0x94	; 148
     4de:	80 93 bc 00 	sts	0x00BC, r24
	i2cWaitForComplete();
	i2cSendStop();
}
     4e2:	08 95       	ret

000004e4 <magnetometer_init>:
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     4e4:	3c 9a       	sbi	0x07, 4	; 7
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     4e6:	84 ea       	ldi	r24, 0xA4	; 164
     4e8:	80 93 bc 00 	sts	0x00BC, r24
     4ec:	20 e0       	ldi	r18, 0x00	; 0
     4ee:	30 e0       	ldi	r19, 0x00	; 0
     4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <magnetometer_init+0x12>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
     4f2:	2f 5f       	subi	r18, 0xFF	; 255
     4f4:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     4f6:	80 91 bc 00 	lds	r24, 0x00BC
     4fa:	87 fd       	sbrc	r24, 7
     4fc:	03 c0       	rjmp	.+6      	; 0x504 <magnetometer_init+0x20>
     4fe:	2a 35       	cpi	r18, 0x5A	; 90
     500:	31 05       	cpc	r19, r1
     502:	b9 f7       	brne	.-18     	; 0x4f2 <magnetometer_init+0xe>

void magnetometer_init(void)
{
	i2cSendStart();
	i2cWaitForComplete();
	i2cSendByte(0x3C);    //write to HMC
     504:	8c e3       	ldi	r24, 0x3C	; 60
     506:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
     50a:	20 e0       	ldi	r18, 0x00	; 0
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	02 c0       	rjmp	.+4      	; 0x514 <magnetometer_init+0x30>
		i++;
     510:	2f 5f       	subi	r18, 0xFF	; 255
     512:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     514:	80 91 bc 00 	lds	r24, 0x00BC
     518:	87 fd       	sbrc	r24, 7
     51a:	03 c0       	rjmp	.+6      	; 0x522 <magnetometer_init+0x3e>
     51c:	2a 35       	cpi	r18, 0x5A	; 90
     51e:	31 05       	cpc	r19, r1
     520:	b9 f7       	brne	.-18     	; 0x510 <magnetometer_init+0x2c>
	i2cWaitForComplete();
	i2cSendByte(0x00);    //mode register
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
     528:	20 e0       	ldi	r18, 0x00	; 0
     52a:	30 e0       	ldi	r19, 0x00	; 0
     52c:	02 c0       	rjmp	.+4      	; 0x532 <magnetometer_init+0x4e>
		i++;
     52e:	2f 5f       	subi	r18, 0xFF	; 255
     530:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     532:	80 91 bc 00 	lds	r24, 0x00BC
     536:	87 fd       	sbrc	r24, 7
     538:	03 c0       	rjmp	.+6      	; 0x540 <magnetometer_init+0x5c>
     53a:	2a 35       	cpi	r18, 0x5A	; 90
     53c:	31 05       	cpc	r19, r1
     53e:	b9 f7       	brne	.-18     	; 0x52e <magnetometer_init+0x4a>
	i2cWaitForComplete();
	i2cSendByte(0x70);    //8 average, 15Hz, normal measurement
     540:	80 e7       	ldi	r24, 0x70	; 112
     542:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
     546:	20 e0       	ldi	r18, 0x00	; 0
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	02 c0       	rjmp	.+4      	; 0x550 <magnetometer_init+0x6c>
		i++;
     54c:	2f 5f       	subi	r18, 0xFF	; 255
     54e:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     550:	80 91 bc 00 	lds	r24, 0x00BC
     554:	87 fd       	sbrc	r24, 7
     556:	03 c0       	rjmp	.+6      	; 0x55e <magnetometer_init+0x7a>
     558:	2a 35       	cpi	r18, 0x5A	; 90
     55a:	31 05       	cpc	r19, r1
     55c:	b9 f7       	brne	.-18     	; 0x54c <magnetometer_init+0x68>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     55e:	84 e9       	ldi	r24, 0x94	; 148
     560:	80 93 bc 00 	sts	0x00BC, r24
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     564:	3c 9a       	sbi	0x07, 4	; 7
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     566:	84 ea       	ldi	r24, 0xA4	; 164
     568:	80 93 bc 00 	sts	0x00BC, r24
     56c:	20 e0       	ldi	r18, 0x00	; 0
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	02 c0       	rjmp	.+4      	; 0x576 <magnetometer_init+0x92>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
     572:	2f 5f       	subi	r18, 0xFF	; 255
     574:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     576:	80 91 bc 00 	lds	r24, 0x00BC
     57a:	87 fd       	sbrc	r24, 7
     57c:	03 c0       	rjmp	.+6      	; 0x584 <magnetometer_init+0xa0>
     57e:	2a 35       	cpi	r18, 0x5A	; 90
     580:	31 05       	cpc	r19, r1
     582:	b9 f7       	brne	.-18     	; 0x572 <magnetometer_init+0x8e>
	i2cWaitForComplete();
	i2cSendStop();
	
	i2cSendStart();
	i2cWaitForComplete();
	i2cSendByte(0x3C);    //write to HMC
     584:	8c e3       	ldi	r24, 0x3C	; 60
     586:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
     58a:	20 e0       	ldi	r18, 0x00	; 0
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	02 c0       	rjmp	.+4      	; 0x594 <magnetometer_init+0xb0>
		i++;
     590:	2f 5f       	subi	r18, 0xFF	; 255
     592:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     594:	80 91 bc 00 	lds	r24, 0x00BC
     598:	87 fd       	sbrc	r24, 7
     59a:	03 c0       	rjmp	.+6      	; 0x5a2 <magnetometer_init+0xbe>
     59c:	2a 35       	cpi	r18, 0x5A	; 90
     59e:	31 05       	cpc	r19, r1
     5a0:	b9 f7       	brne	.-18     	; 0x590 <magnetometer_init+0xac>
	i2cWaitForComplete();
	i2cSendByte(0x01);    //mode register
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
     5a8:	20 e0       	ldi	r18, 0x00	; 0
     5aa:	30 e0       	ldi	r19, 0x00	; 0
     5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <magnetometer_init+0xce>
		i++;
     5ae:	2f 5f       	subi	r18, 0xFF	; 255
     5b0:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     5b2:	80 91 bc 00 	lds	r24, 0x00BC
     5b6:	87 fd       	sbrc	r24, 7
     5b8:	03 c0       	rjmp	.+6      	; 0x5c0 <magnetometer_init+0xdc>
     5ba:	2a 35       	cpi	r18, 0x5A	; 90
     5bc:	31 05       	cpc	r19, r1
     5be:	b9 f7       	brne	.-18     	; 0x5ae <magnetometer_init+0xca>
	i2cWaitForComplete();
	i2cSendByte(0xA0);    //gain = 5
     5c0:	80 ea       	ldi	r24, 0xA0	; 160
     5c2:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
     5c6:	20 e0       	ldi	r18, 0x00	; 0
     5c8:	30 e0       	ldi	r19, 0x00	; 0
     5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <magnetometer_init+0xec>
		i++;
     5cc:	2f 5f       	subi	r18, 0xFF	; 255
     5ce:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     5d0:	80 91 bc 00 	lds	r24, 0x00BC
     5d4:	87 fd       	sbrc	r24, 7
     5d6:	03 c0       	rjmp	.+6      	; 0x5de <magnetometer_init+0xfa>
     5d8:	2a 35       	cpi	r18, 0x5A	; 90
     5da:	31 05       	cpc	r19, r1
     5dc:	b9 f7       	brne	.-18     	; 0x5cc <magnetometer_init+0xe8>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     5de:	84 e9       	ldi	r24, 0x94	; 148
     5e0:	80 93 bc 00 	sts	0x00BC, r24
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     5e4:	3c 9a       	sbi	0x07, 4	; 7
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     5e6:	84 ea       	ldi	r24, 0xA4	; 164
     5e8:	80 93 bc 00 	sts	0x00BC, r24
     5ec:	20 e0       	ldi	r18, 0x00	; 0
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <magnetometer_init+0x112>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
     5f2:	2f 5f       	subi	r18, 0xFF	; 255
     5f4:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     5f6:	80 91 bc 00 	lds	r24, 0x00BC
     5fa:	87 fd       	sbrc	r24, 7
     5fc:	03 c0       	rjmp	.+6      	; 0x604 <magnetometer_init+0x120>
     5fe:	2a 35       	cpi	r18, 0x5A	; 90
     600:	31 05       	cpc	r19, r1
     602:	b9 f7       	brne	.-18     	; 0x5f2 <magnetometer_init+0x10e>
	i2cWaitForComplete();
	i2cSendStop();
	
	i2cSendStart();
	i2cWaitForComplete();
	i2cSendByte(0x3C);    //write to HMC
     604:	8c e3       	ldi	r24, 0x3C	; 60
     606:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
     60a:	20 e0       	ldi	r18, 0x00	; 0
     60c:	30 e0       	ldi	r19, 0x00	; 0
     60e:	02 c0       	rjmp	.+4      	; 0x614 <magnetometer_init+0x130>
		i++;
     610:	2f 5f       	subi	r18, 0xFF	; 255
     612:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     614:	80 91 bc 00 	lds	r24, 0x00BC
     618:	87 fd       	sbrc	r24, 7
     61a:	03 c0       	rjmp	.+6      	; 0x622 <magnetometer_init+0x13e>
     61c:	2a 35       	cpi	r18, 0x5A	; 90
     61e:	31 05       	cpc	r19, r1
     620:	b9 f7       	brne	.-18     	; 0x610 <magnetometer_init+0x12c>
	i2cWaitForComplete();
	i2cSendByte(0x02);    //mode register
     622:	82 e0       	ldi	r24, 0x02	; 2
     624:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
     628:	20 e0       	ldi	r18, 0x00	; 0
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	02 c0       	rjmp	.+4      	; 0x632 <magnetometer_init+0x14e>
		i++;
     62e:	2f 5f       	subi	r18, 0xFF	; 255
     630:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     632:	80 91 bc 00 	lds	r24, 0x00BC
     636:	87 fd       	sbrc	r24, 7
     638:	03 c0       	rjmp	.+6      	; 0x640 <magnetometer_init+0x15c>
     63a:	2a 35       	cpi	r18, 0x5A	; 90
     63c:	31 05       	cpc	r19, r1
     63e:	b9 f7       	brne	.-18     	; 0x62e <magnetometer_init+0x14a>
	i2cWaitForComplete();
	i2cSendByte(0x00);    //continuous measurement mode
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
     646:	20 e0       	ldi	r18, 0x00	; 0
     648:	30 e0       	ldi	r19, 0x00	; 0
     64a:	02 c0       	rjmp	.+4      	; 0x650 <magnetometer_init+0x16c>
		i++;
     64c:	2f 5f       	subi	r18, 0xFF	; 255
     64e:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     650:	80 91 bc 00 	lds	r24, 0x00BC
     654:	87 fd       	sbrc	r24, 7
     656:	03 c0       	rjmp	.+6      	; 0x65e <magnetometer_init+0x17a>
     658:	2a 35       	cpi	r18, 0x5A	; 90
     65a:	31 05       	cpc	r19, r1
     65c:	b9 f7       	brne	.-18     	; 0x64c <magnetometer_init+0x168>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     65e:	84 e9       	ldi	r24, 0x94	; 148
     660:	80 93 bc 00 	sts	0x00BC, r24
	i2cWaitForComplete();
	i2cSendStop();
}
     664:	08 95       	ret

00000666 <magnetometer>:
	printf("y=%4d, ", y_mag);
	printf("z=%d\n\r", z_mag);
}

void magnetometer(void)
{
     666:	1f 93       	push	r17
		outputs need to be kept in this function. To read the magnetometer 
		values, call the function magnetometer(), then global vars 
		x_mag, y_mag, z_mag.
	*/
	
	magnetometer_init();
     668:	0e 94 72 02 	call	0x4e4	; 0x4e4 <magnetometer_init>
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     66c:	3c 9a       	sbi	0x07, 4	; 7
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     66e:	84 ea       	ldi	r24, 0xA4	; 164
     670:	80 93 bc 00 	sts	0x00BC, r24
     674:	20 e0       	ldi	r18, 0x00	; 0
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	02 c0       	rjmp	.+4      	; 0x67e <magnetometer+0x18>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
     67a:	2f 5f       	subi	r18, 0xFF	; 255
     67c:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     67e:	80 91 bc 00 	lds	r24, 0x00BC
     682:	87 fd       	sbrc	r24, 7
     684:	03 c0       	rjmp	.+6      	; 0x68c <magnetometer+0x26>
     686:	2a 35       	cpi	r18, 0x5A	; 90
     688:	31 05       	cpc	r19, r1
     68a:	b9 f7       	brne	.-18     	; 0x67a <magnetometer+0x14>
	
	//must read all six registers plus one to move the pointer back to 0x03
	
	i2cSendStart();
	i2cWaitForComplete();
	i2cSendByte(0x3D);    //write to HMC
     68c:	8d e3       	ldi	r24, 0x3D	; 61
     68e:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
     692:	20 e0       	ldi	r18, 0x00	; 0
     694:	30 e0       	ldi	r19, 0x00	; 0
     696:	02 c0       	rjmp	.+4      	; 0x69c <magnetometer+0x36>
		i++;
     698:	2f 5f       	subi	r18, 0xFF	; 255
     69a:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     69c:	80 91 bc 00 	lds	r24, 0x00BC
     6a0:	87 fd       	sbrc	r24, 7
     6a2:	03 c0       	rjmp	.+6      	; 0x6aa <magnetometer+0x44>
     6a4:	2a 35       	cpi	r18, 0x5A	; 90
     6a6:	31 05       	cpc	r19, r1
     6a8:	b9 f7       	brne	.-18     	; 0x698 <magnetometer+0x32>
	i2cWaitForComplete();
	i2cReceiveByte(TRUE);
     6aa:	8f ef       	ldi	r24, 0xFF	; 255
     6ac:	0e 94 f7 00 	call	0x1ee	; 0x1ee <i2cReceiveByte>
     6b0:	20 e0       	ldi	r18, 0x00	; 0
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	02 c0       	rjmp	.+4      	; 0x6ba <magnetometer+0x54>
		i++;
     6b6:	2f 5f       	subi	r18, 0xFF	; 255
     6b8:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     6ba:	80 91 bc 00 	lds	r24, 0x00BC
     6be:	87 fd       	sbrc	r24, 7
     6c0:	03 c0       	rjmp	.+6      	; 0x6c8 <magnetometer+0x62>
     6c2:	2a 35       	cpi	r18, 0x5A	; 90
     6c4:	31 05       	cpc	r19, r1
     6c6:	b9 f7       	brne	.-18     	; 0x6b6 <magnetometer+0x50>
}

unsigned char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
     6c8:	10 91 bb 00 	lds	r17, 0x00BB
     6cc:	20 e0       	ldi	r18, 0x00	; 0
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	02 c0       	rjmp	.+4      	; 0x6d6 <magnetometer+0x70>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
     6d2:	2f 5f       	subi	r18, 0xFF	; 255
     6d4:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     6d6:	80 91 bc 00 	lds	r24, 0x00BC
     6da:	87 fd       	sbrc	r24, 7
     6dc:	03 c0       	rjmp	.+6      	; 0x6e4 <magnetometer+0x7e>
     6de:	2a 35       	cpi	r18, 0x5A	; 90
     6e0:	31 05       	cpc	r19, r1
     6e2:	b9 f7       	brne	.-18     	; 0x6d2 <magnetometer+0x6c>
	i2cWaitForComplete();
	xh = i2cGetReceivedByte();	//x high byte
	i2cWaitForComplete();
	
	i2cReceiveByte(TRUE);
     6e4:	8f ef       	ldi	r24, 0xFF	; 255
     6e6:	0e 94 f7 00 	call	0x1ee	; 0x1ee <i2cReceiveByte>
     6ea:	20 e0       	ldi	r18, 0x00	; 0
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	02 c0       	rjmp	.+4      	; 0x6f4 <magnetometer+0x8e>
		i++;
     6f0:	2f 5f       	subi	r18, 0xFF	; 255
     6f2:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     6f4:	80 91 bc 00 	lds	r24, 0x00BC
     6f8:	87 fd       	sbrc	r24, 7
     6fa:	03 c0       	rjmp	.+6      	; 0x702 <magnetometer+0x9c>
     6fc:	2a 35       	cpi	r18, 0x5A	; 90
     6fe:	31 05       	cpc	r19, r1
     700:	b9 f7       	brne	.-18     	; 0x6f0 <magnetometer+0x8a>
}

unsigned char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
     702:	20 91 bb 00 	lds	r18, 0x00BB
     706:	40 e0       	ldi	r20, 0x00	; 0
     708:	50 e0       	ldi	r21, 0x00	; 0
     70a:	02 c0       	rjmp	.+4      	; 0x710 <magnetometer+0xaa>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
     70c:	4f 5f       	subi	r20, 0xFF	; 255
     70e:	5f 4f       	sbci	r21, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     710:	80 91 bc 00 	lds	r24, 0x00BC
     714:	87 fd       	sbrc	r24, 7
     716:	03 c0       	rjmp	.+6      	; 0x71e <magnetometer+0xb8>
     718:	4a 35       	cpi	r20, 0x5A	; 90
     71a:	51 05       	cpc	r21, r1
     71c:	b9 f7       	brne	.-18     	; 0x70c <magnetometer+0xa6>
	i2cWaitForComplete();
	xl = i2cGetReceivedByte();	//x low byte
	i2cWaitForComplete();
	x_mag = xl|(xh << 8);
     71e:	91 2f       	mov	r25, r17
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	82 2b       	or	r24, r18
     726:	93 2b       	or	r25, r19
     728:	90 93 ad 05 	sts	0x05AD, r25
     72c:	80 93 ac 05 	sts	0x05AC, r24
	
	i2cReceiveByte(TRUE);
     730:	8f ef       	ldi	r24, 0xFF	; 255
     732:	0e 94 f7 00 	call	0x1ee	; 0x1ee <i2cReceiveByte>
     736:	20 e0       	ldi	r18, 0x00	; 0
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	02 c0       	rjmp	.+4      	; 0x740 <magnetometer+0xda>
		i++;
     73c:	2f 5f       	subi	r18, 0xFF	; 255
     73e:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     740:	80 91 bc 00 	lds	r24, 0x00BC
     744:	87 fd       	sbrc	r24, 7
     746:	03 c0       	rjmp	.+6      	; 0x74e <magnetometer+0xe8>
     748:	2a 35       	cpi	r18, 0x5A	; 90
     74a:	31 05       	cpc	r19, r1
     74c:	b9 f7       	brne	.-18     	; 0x73c <magnetometer+0xd6>
}

unsigned char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
     74e:	10 91 bb 00 	lds	r17, 0x00BB
     752:	20 e0       	ldi	r18, 0x00	; 0
     754:	30 e0       	ldi	r19, 0x00	; 0
     756:	02 c0       	rjmp	.+4      	; 0x75c <magnetometer+0xf6>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
     758:	2f 5f       	subi	r18, 0xFF	; 255
     75a:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     75c:	80 91 bc 00 	lds	r24, 0x00BC
     760:	87 fd       	sbrc	r24, 7
     762:	03 c0       	rjmp	.+6      	; 0x76a <magnetometer+0x104>
     764:	2a 35       	cpi	r18, 0x5A	; 90
     766:	31 05       	cpc	r19, r1
     768:	b9 f7       	brne	.-18     	; 0x758 <magnetometer+0xf2>
	i2cWaitForComplete();
	zh = i2cGetReceivedByte();	
	i2cWaitForComplete();      //z high byte
	
	i2cReceiveByte(TRUE);
     76a:	8f ef       	ldi	r24, 0xFF	; 255
     76c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <i2cReceiveByte>
     770:	20 e0       	ldi	r18, 0x00	; 0
     772:	30 e0       	ldi	r19, 0x00	; 0
     774:	02 c0       	rjmp	.+4      	; 0x77a <magnetometer+0x114>
		i++;
     776:	2f 5f       	subi	r18, 0xFF	; 255
     778:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     77a:	80 91 bc 00 	lds	r24, 0x00BC
     77e:	87 fd       	sbrc	r24, 7
     780:	03 c0       	rjmp	.+6      	; 0x788 <magnetometer+0x122>
     782:	2a 35       	cpi	r18, 0x5A	; 90
     784:	31 05       	cpc	r19, r1
     786:	b9 f7       	brne	.-18     	; 0x776 <magnetometer+0x110>
}

unsigned char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
     788:	20 91 bb 00 	lds	r18, 0x00BB
     78c:	40 e0       	ldi	r20, 0x00	; 0
     78e:	50 e0       	ldi	r21, 0x00	; 0
     790:	02 c0       	rjmp	.+4      	; 0x796 <magnetometer+0x130>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
     792:	4f 5f       	subi	r20, 0xFF	; 255
     794:	5f 4f       	sbci	r21, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     796:	80 91 bc 00 	lds	r24, 0x00BC
     79a:	87 fd       	sbrc	r24, 7
     79c:	03 c0       	rjmp	.+6      	; 0x7a4 <magnetometer+0x13e>
     79e:	4a 35       	cpi	r20, 0x5A	; 90
     7a0:	51 05       	cpc	r21, r1
     7a2:	b9 f7       	brne	.-18     	; 0x792 <magnetometer+0x12c>
	i2cWaitForComplete();
	zl = i2cGetReceivedByte();	//z low byte
	i2cWaitForComplete();
	z_mag = zl|(zh << 8);
     7a4:	91 2f       	mov	r25, r17
     7a6:	80 e0       	ldi	r24, 0x00	; 0
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	82 2b       	or	r24, r18
     7ac:	93 2b       	or	r25, r19
     7ae:	90 93 a9 05 	sts	0x05A9, r25
     7b2:	80 93 a8 05 	sts	0x05A8, r24
	
	i2cReceiveByte(TRUE);
     7b6:	8f ef       	ldi	r24, 0xFF	; 255
     7b8:	0e 94 f7 00 	call	0x1ee	; 0x1ee <i2cReceiveByte>
     7bc:	20 e0       	ldi	r18, 0x00	; 0
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <magnetometer+0x160>
		i++;
     7c2:	2f 5f       	subi	r18, 0xFF	; 255
     7c4:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     7c6:	80 91 bc 00 	lds	r24, 0x00BC
     7ca:	87 fd       	sbrc	r24, 7
     7cc:	03 c0       	rjmp	.+6      	; 0x7d4 <magnetometer+0x16e>
     7ce:	2a 35       	cpi	r18, 0x5A	; 90
     7d0:	31 05       	cpc	r19, r1
     7d2:	b9 f7       	brne	.-18     	; 0x7c2 <magnetometer+0x15c>
}

unsigned char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
     7d4:	10 91 bb 00 	lds	r17, 0x00BB
     7d8:	20 e0       	ldi	r18, 0x00	; 0
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <magnetometer+0x17c>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
     7de:	2f 5f       	subi	r18, 0xFF	; 255
     7e0:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     7e2:	80 91 bc 00 	lds	r24, 0x00BC
     7e6:	87 fd       	sbrc	r24, 7
     7e8:	03 c0       	rjmp	.+6      	; 0x7f0 <magnetometer+0x18a>
     7ea:	2a 35       	cpi	r18, 0x5A	; 90
     7ec:	31 05       	cpc	r19, r1
     7ee:	b9 f7       	brne	.-18     	; 0x7de <magnetometer+0x178>
	i2cWaitForComplete();
	yh = i2cGetReceivedByte();	//y high byte
	i2cWaitForComplete();
	
	i2cReceiveByte(TRUE);
     7f0:	8f ef       	ldi	r24, 0xFF	; 255
     7f2:	0e 94 f7 00 	call	0x1ee	; 0x1ee <i2cReceiveByte>
     7f6:	20 e0       	ldi	r18, 0x00	; 0
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	02 c0       	rjmp	.+4      	; 0x800 <magnetometer+0x19a>
		i++;
     7fc:	2f 5f       	subi	r18, 0xFF	; 255
     7fe:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     800:	80 91 bc 00 	lds	r24, 0x00BC
     804:	87 fd       	sbrc	r24, 7
     806:	03 c0       	rjmp	.+6      	; 0x80e <magnetometer+0x1a8>
     808:	2a 35       	cpi	r18, 0x5A	; 90
     80a:	31 05       	cpc	r19, r1
     80c:	b9 f7       	brne	.-18     	; 0x7fc <magnetometer+0x196>
}

unsigned char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
     80e:	20 91 bb 00 	lds	r18, 0x00BB
     812:	40 e0       	ldi	r20, 0x00	; 0
     814:	50 e0       	ldi	r21, 0x00	; 0
     816:	02 c0       	rjmp	.+4      	; 0x81c <magnetometer+0x1b6>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
     818:	4f 5f       	subi	r20, 0xFF	; 255
     81a:	5f 4f       	sbci	r21, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     81c:	80 91 bc 00 	lds	r24, 0x00BC
     820:	87 fd       	sbrc	r24, 7
     822:	03 c0       	rjmp	.+6      	; 0x82a <magnetometer+0x1c4>
     824:	4a 35       	cpi	r20, 0x5A	; 90
     826:	51 05       	cpc	r21, r1
     828:	b9 f7       	brne	.-18     	; 0x818 <magnetometer+0x1b2>
	i2cWaitForComplete();
	yl = i2cGetReceivedByte();	//y low byte
	i2cWaitForComplete();
	y_mag = yl|(yh << 8);
     82a:	91 2f       	mov	r25, r17
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	30 e0       	ldi	r19, 0x00	; 0
     830:	82 2b       	or	r24, r18
     832:	93 2b       	or	r25, r19
     834:	90 93 ab 05 	sts	0x05AB, r25
     838:	80 93 aa 05 	sts	0x05AA, r24
	
	i2cSendByte(0x3D);         //must reach 0x09 to go back to 0x03
     83c:	8d e3       	ldi	r24, 0x3D	; 61
     83e:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
     842:	20 e0       	ldi	r18, 0x00	; 0
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	02 c0       	rjmp	.+4      	; 0x84c <magnetometer+0x1e6>
		i++;
     848:	2f 5f       	subi	r18, 0xFF	; 255
     84a:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     84c:	80 91 bc 00 	lds	r24, 0x00BC
     850:	87 fd       	sbrc	r24, 7
     852:	03 c0       	rjmp	.+6      	; 0x85a <magnetometer+0x1f4>
     854:	2a 35       	cpi	r18, 0x5A	; 90
     856:	31 05       	cpc	r19, r1
     858:	b9 f7       	brne	.-18     	; 0x848 <magnetometer+0x1e2>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     85a:	84 e9       	ldi	r24, 0x94	; 148
     85c:	80 93 bc 00 	sts	0x00BC, r24
	i2cWaitForComplete();
	
	i2cSendStop();	
}
     860:	1f 91       	pop	r17
     862:	08 95       	ret

00000864 <x_gyro>:

	delay_ms(20);
}

uint16_t x_gyro(void)
{
     864:	1f 93       	push	r17
	uint16_t  xh, xl, data;
	
	cbi(TWCR, TWEN);	// Disable TWI
     866:	80 91 bc 00 	lds	r24, 0x00BC
     86a:	8b 7f       	andi	r24, 0xFB	; 251
     86c:	80 93 bc 00 	sts	0x00BC, r24
	sbi(TWCR, TWEN);	// Enable TWI
     870:	80 91 bc 00 	lds	r24, 0x00BC
     874:	84 60       	ori	r24, 0x04	; 4
     876:	80 93 bc 00 	sts	0x00BC, r24
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     87a:	3c 9a       	sbi	0x07, 4	; 7
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     87c:	84 ea       	ldi	r24, 0xA4	; 164
     87e:	80 93 bc 00 	sts	0x00BC, r24
     882:	20 e0       	ldi	r18, 0x00	; 0
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	02 c0       	rjmp	.+4      	; 0x88c <x_gyro+0x28>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
     888:	2f 5f       	subi	r18, 0xFF	; 255
     88a:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     88c:	80 91 bc 00 	lds	r24, 0x00BC
     890:	87 fd       	sbrc	r24, 7
     892:	03 c0       	rjmp	.+6      	; 0x89a <x_gyro+0x36>
     894:	2a 35       	cpi	r18, 0x5A	; 90
     896:	31 05       	cpc	r19, r1
     898:	b9 f7       	brne	.-18     	; 0x888 <x_gyro+0x24>
	
	i2cSendStart();
	i2cWaitForComplete();
	i2cSendByte(ITG3200_W);	// write 
     89a:	80 ed       	ldi	r24, 0xD0	; 208
     89c:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
     8a0:	20 e0       	ldi	r18, 0x00	; 0
     8a2:	30 e0       	ldi	r19, 0x00	; 0
     8a4:	02 c0       	rjmp	.+4      	; 0x8aa <x_gyro+0x46>
		i++;
     8a6:	2f 5f       	subi	r18, 0xFF	; 255
     8a8:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     8aa:	80 91 bc 00 	lds	r24, 0x00BC
     8ae:	87 fd       	sbrc	r24, 7
     8b0:	03 c0       	rjmp	.+6      	; 0x8b8 <x_gyro+0x54>
     8b2:	2a 35       	cpi	r18, 0x5A	; 90
     8b4:	31 05       	cpc	r19, r1
     8b6:	b9 f7       	brne	.-18     	; 0x8a6 <x_gyro+0x42>
	i2cWaitForComplete();
	i2cSendByte(0x1D);	   // x high address
     8b8:	8d e1       	ldi	r24, 0x1D	; 29
     8ba:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
     8be:	20 e0       	ldi	r18, 0x00	; 0
     8c0:	30 e0       	ldi	r19, 0x00	; 0
     8c2:	02 c0       	rjmp	.+4      	; 0x8c8 <x_gyro+0x64>
		i++;
     8c4:	2f 5f       	subi	r18, 0xFF	; 255
     8c6:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     8c8:	80 91 bc 00 	lds	r24, 0x00BC
     8cc:	87 fd       	sbrc	r24, 7
     8ce:	03 c0       	rjmp	.+6      	; 0x8d6 <x_gyro+0x72>
     8d0:	2a 35       	cpi	r18, 0x5A	; 90
     8d2:	31 05       	cpc	r19, r1
     8d4:	b9 f7       	brne	.-18     	; 0x8c4 <x_gyro+0x60>
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     8d6:	3c 9a       	sbi	0x07, 4	; 7
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     8d8:	84 ea       	ldi	r24, 0xA4	; 164
     8da:	80 93 bc 00 	sts	0x00BC, r24
	i2cWaitForComplete();
	i2cSendStart();
	
	i2cSendByte(ITG3200_R);	// read
     8de:	81 ed       	ldi	r24, 0xD1	; 209
     8e0:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
     8e4:	20 e0       	ldi	r18, 0x00	; 0
     8e6:	30 e0       	ldi	r19, 0x00	; 0
     8e8:	02 c0       	rjmp	.+4      	; 0x8ee <x_gyro+0x8a>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
     8ea:	2f 5f       	subi	r18, 0xFF	; 255
     8ec:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     8ee:	80 91 bc 00 	lds	r24, 0x00BC
     8f2:	87 fd       	sbrc	r24, 7
     8f4:	03 c0       	rjmp	.+6      	; 0x8fc <x_gyro+0x98>
     8f6:	2a 35       	cpi	r18, 0x5A	; 90
     8f8:	31 05       	cpc	r19, r1
     8fa:	b9 f7       	brne	.-18     	; 0x8ea <x_gyro+0x86>
	i2cWaitForComplete();
	i2cReceiveByte(FALSE);
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	0e 94 f7 00 	call	0x1ee	; 0x1ee <i2cReceiveByte>
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	02 c0       	rjmp	.+4      	; 0x90c <__stack+0xd>
		i++;
     908:	2f 5f       	subi	r18, 0xFF	; 255
     90a:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     90c:	80 91 bc 00 	lds	r24, 0x00BC
     910:	87 fd       	sbrc	r24, 7
     912:	03 c0       	rjmp	.+6      	; 0x91a <__stack+0x1b>
     914:	2a 35       	cpi	r18, 0x5A	; 90
     916:	31 05       	cpc	r19, r1
     918:	b9 f7       	brne	.-18     	; 0x908 <__stack+0x9>
}

unsigned char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
     91a:	10 91 bb 00 	lds	r17, 0x00BB
     91e:	20 e0       	ldi	r18, 0x00	; 0
     920:	30 e0       	ldi	r19, 0x00	; 0
     922:	02 c0       	rjmp	.+4      	; 0x928 <__stack+0x29>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
     924:	2f 5f       	subi	r18, 0xFF	; 255
     926:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     928:	80 91 bc 00 	lds	r24, 0x00BC
     92c:	87 fd       	sbrc	r24, 7
     92e:	03 c0       	rjmp	.+6      	; 0x936 <__stack+0x37>
     930:	2a 35       	cpi	r18, 0x5A	; 90
     932:	31 05       	cpc	r19, r1
     934:	b9 f7       	brne	.-18     	; 0x924 <__stack+0x25>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     936:	84 e9       	ldi	r24, 0x94	; 148
     938:	80 93 bc 00 	sts	0x00BC, r24
	
	xh = i2cGetReceivedByte();	// Get MSB result
	i2cWaitForComplete();
	i2cSendStop();
	
	cbi(TWCR, TWEN);	// Disable TWI
     93c:	80 91 bc 00 	lds	r24, 0x00BC
     940:	8b 7f       	andi	r24, 0xFB	; 251
     942:	80 93 bc 00 	sts	0x00BC, r24
	sbi(TWCR, TWEN);	// Enable TWI
     946:	80 91 bc 00 	lds	r24, 0x00BC
     94a:	84 60       	ori	r24, 0x04	; 4
     94c:	80 93 bc 00 	sts	0x00BC, r24
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     950:	3c 9a       	sbi	0x07, 4	; 7
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     952:	84 ea       	ldi	r24, 0xA4	; 164
     954:	80 93 bc 00 	sts	0x00BC, r24
     958:	20 e0       	ldi	r18, 0x00	; 0
     95a:	30 e0       	ldi	r19, 0x00	; 0
     95c:	02 c0       	rjmp	.+4      	; 0x962 <__stack+0x63>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
     95e:	2f 5f       	subi	r18, 0xFF	; 255
     960:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     962:	80 91 bc 00 	lds	r24, 0x00BC
     966:	87 fd       	sbrc	r24, 7
     968:	03 c0       	rjmp	.+6      	; 0x970 <__stack+0x71>
     96a:	2a 35       	cpi	r18, 0x5A	; 90
     96c:	31 05       	cpc	r19, r1
     96e:	b9 f7       	brne	.-18     	; 0x95e <__stack+0x5f>
	
	i2cSendStart();
	i2cWaitForComplete();
	i2cSendByte(ITG3200_W);	// write
     970:	80 ed       	ldi	r24, 0xD0	; 208
     972:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
     976:	20 e0       	ldi	r18, 0x00	; 0
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	02 c0       	rjmp	.+4      	; 0x980 <__stack+0x81>
		i++;
     97c:	2f 5f       	subi	r18, 0xFF	; 255
     97e:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     980:	80 91 bc 00 	lds	r24, 0x00BC
     984:	87 fd       	sbrc	r24, 7
     986:	03 c0       	rjmp	.+6      	; 0x98e <__stack+0x8f>
     988:	2a 35       	cpi	r18, 0x5A	; 90
     98a:	31 05       	cpc	r19, r1
     98c:	b9 f7       	brne	.-18     	; 0x97c <__stack+0x7d>
	i2cWaitForComplete();
	i2cSendByte(0x1E);	    // x low address
     98e:	8e e1       	ldi	r24, 0x1E	; 30
     990:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
     994:	20 e0       	ldi	r18, 0x00	; 0
     996:	30 e0       	ldi	r19, 0x00	; 0
     998:	02 c0       	rjmp	.+4      	; 0x99e <__stack+0x9f>
		i++;
     99a:	2f 5f       	subi	r18, 0xFF	; 255
     99c:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     99e:	80 91 bc 00 	lds	r24, 0x00BC
     9a2:	87 fd       	sbrc	r24, 7
     9a4:	03 c0       	rjmp	.+6      	; 0x9ac <__stack+0xad>
     9a6:	2a 35       	cpi	r18, 0x5A	; 90
     9a8:	31 05       	cpc	r19, r1
     9aa:	b9 f7       	brne	.-18     	; 0x99a <__stack+0x9b>
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     9ac:	3c 9a       	sbi	0x07, 4	; 7
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     9ae:	84 ea       	ldi	r24, 0xA4	; 164
     9b0:	80 93 bc 00 	sts	0x00BC, r24
	i2cWaitForComplete();
	i2cSendStart();
	
	i2cSendByte(ITG3200_R);	// read
     9b4:	81 ed       	ldi	r24, 0xD1	; 209
     9b6:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
     9ba:	20 e0       	ldi	r18, 0x00	; 0
     9bc:	30 e0       	ldi	r19, 0x00	; 0
     9be:	02 c0       	rjmp	.+4      	; 0x9c4 <__stack+0xc5>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
     9c0:	2f 5f       	subi	r18, 0xFF	; 255
     9c2:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     9c4:	80 91 bc 00 	lds	r24, 0x00BC
     9c8:	87 fd       	sbrc	r24, 7
     9ca:	03 c0       	rjmp	.+6      	; 0x9d2 <__stack+0xd3>
     9cc:	2a 35       	cpi	r18, 0x5A	; 90
     9ce:	31 05       	cpc	r19, r1
     9d0:	b9 f7       	brne	.-18     	; 0x9c0 <__stack+0xc1>
	i2cWaitForComplete();
	i2cReceiveByte(FALSE);
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	0e 94 f7 00 	call	0x1ee	; 0x1ee <i2cReceiveByte>
     9d8:	20 e0       	ldi	r18, 0x00	; 0
     9da:	30 e0       	ldi	r19, 0x00	; 0
     9dc:	02 c0       	rjmp	.+4      	; 0x9e2 <__stack+0xe3>
		i++;
     9de:	2f 5f       	subi	r18, 0xFF	; 255
     9e0:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     9e2:	80 91 bc 00 	lds	r24, 0x00BC
     9e6:	87 fd       	sbrc	r24, 7
     9e8:	03 c0       	rjmp	.+6      	; 0x9f0 <__stack+0xf1>
     9ea:	2a 35       	cpi	r18, 0x5A	; 90
     9ec:	31 05       	cpc	r19, r1
     9ee:	b9 f7       	brne	.-18     	; 0x9de <__stack+0xdf>
}

unsigned char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
     9f0:	20 91 bb 00 	lds	r18, 0x00BB
     9f4:	40 e0       	ldi	r20, 0x00	; 0
     9f6:	50 e0       	ldi	r21, 0x00	; 0
     9f8:	02 c0       	rjmp	.+4      	; 0x9fe <__stack+0xff>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
     9fa:	4f 5f       	subi	r20, 0xFF	; 255
     9fc:	5f 4f       	sbci	r21, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     9fe:	80 91 bc 00 	lds	r24, 0x00BC
     a02:	87 fd       	sbrc	r24, 7
     a04:	03 c0       	rjmp	.+6      	; 0xa0c <__stack+0x10d>
     a06:	4a 35       	cpi	r20, 0x5A	; 90
     a08:	51 05       	cpc	r21, r1
     a0a:	b9 f7       	brne	.-18     	; 0x9fa <__stack+0xfb>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     a0c:	84 e9       	ldi	r24, 0x94	; 148
     a0e:	80 93 bc 00 	sts	0x00BC, r24
	i2cWaitForComplete();
	i2cSendStop();
	
	data = xl|(xh << 8);
	
	cbi(TWCR, TWEN);	// Disable TWI
     a12:	80 91 bc 00 	lds	r24, 0x00BC
     a16:	8b 7f       	andi	r24, 0xFB	; 251
     a18:	80 93 bc 00 	sts	0x00BC, r24
	sbi(TWCR, TWEN);	// Enable TWI
     a1c:	80 91 bc 00 	lds	r24, 0x00BC
     a20:	84 60       	ori	r24, 0x04	; 4
     a22:	80 93 bc 00 	sts	0x00BC, r24
     a26:	91 2f       	mov	r25, r17
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	28 2b       	or	r18, r24
     a2e:	39 2b       	or	r19, r25
	
	return data;
}
     a30:	c9 01       	movw	r24, r18
     a32:	1f 91       	pop	r17
     a34:	08 95       	ret

00000a36 <y_gyro>:

uint16_t y_gyro(void)
{
     a36:	1f 93       	push	r17
	uint16_t  xh, xl, data;
	
	cbi(TWCR, TWEN);	// Disable TWI
     a38:	80 91 bc 00 	lds	r24, 0x00BC
     a3c:	8b 7f       	andi	r24, 0xFB	; 251
     a3e:	80 93 bc 00 	sts	0x00BC, r24
	sbi(TWCR, TWEN);	// Enable TWI
     a42:	80 91 bc 00 	lds	r24, 0x00BC
     a46:	84 60       	ori	r24, 0x04	; 4
     a48:	80 93 bc 00 	sts	0x00BC, r24
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     a4c:	3c 9a       	sbi	0x07, 4	; 7
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     a4e:	84 ea       	ldi	r24, 0xA4	; 164
     a50:	80 93 bc 00 	sts	0x00BC, r24
     a54:	20 e0       	ldi	r18, 0x00	; 0
     a56:	30 e0       	ldi	r19, 0x00	; 0
     a58:	02 c0       	rjmp	.+4      	; 0xa5e <y_gyro+0x28>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
     a5a:	2f 5f       	subi	r18, 0xFF	; 255
     a5c:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     a5e:	80 91 bc 00 	lds	r24, 0x00BC
     a62:	87 fd       	sbrc	r24, 7
     a64:	03 c0       	rjmp	.+6      	; 0xa6c <y_gyro+0x36>
     a66:	2a 35       	cpi	r18, 0x5A	; 90
     a68:	31 05       	cpc	r19, r1
     a6a:	b9 f7       	brne	.-18     	; 0xa5a <y_gyro+0x24>
	
	i2cSendStart();
	i2cWaitForComplete();
	i2cSendByte(ITG3200_W);	// write
     a6c:	80 ed       	ldi	r24, 0xD0	; 208
     a6e:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
     a72:	20 e0       	ldi	r18, 0x00	; 0
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	02 c0       	rjmp	.+4      	; 0xa7c <y_gyro+0x46>
		i++;
     a78:	2f 5f       	subi	r18, 0xFF	; 255
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     a7c:	80 91 bc 00 	lds	r24, 0x00BC
     a80:	87 fd       	sbrc	r24, 7
     a82:	03 c0       	rjmp	.+6      	; 0xa8a <y_gyro+0x54>
     a84:	2a 35       	cpi	r18, 0x5A	; 90
     a86:	31 05       	cpc	r19, r1
     a88:	b9 f7       	brne	.-18     	; 0xa78 <y_gyro+0x42>
	i2cWaitForComplete();
	i2cSendByte(0x1F);	// y high address
     a8a:	8f e1       	ldi	r24, 0x1F	; 31
     a8c:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
     a90:	20 e0       	ldi	r18, 0x00	; 0
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	02 c0       	rjmp	.+4      	; 0xa9a <y_gyro+0x64>
		i++;
     a96:	2f 5f       	subi	r18, 0xFF	; 255
     a98:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     a9a:	80 91 bc 00 	lds	r24, 0x00BC
     a9e:	87 fd       	sbrc	r24, 7
     aa0:	03 c0       	rjmp	.+6      	; 0xaa8 <y_gyro+0x72>
     aa2:	2a 35       	cpi	r18, 0x5A	; 90
     aa4:	31 05       	cpc	r19, r1
     aa6:	b9 f7       	brne	.-18     	; 0xa96 <y_gyro+0x60>
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     aa8:	3c 9a       	sbi	0x07, 4	; 7
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     aaa:	84 ea       	ldi	r24, 0xA4	; 164
     aac:	80 93 bc 00 	sts	0x00BC, r24
	i2cWaitForComplete();
	i2cSendStart();
	
	i2cSendByte(ITG3200_R);	 // read
     ab0:	81 ed       	ldi	r24, 0xD1	; 209
     ab2:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
     ab6:	20 e0       	ldi	r18, 0x00	; 0
     ab8:	30 e0       	ldi	r19, 0x00	; 0
     aba:	02 c0       	rjmp	.+4      	; 0xac0 <y_gyro+0x8a>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
     abc:	2f 5f       	subi	r18, 0xFF	; 255
     abe:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     ac0:	80 91 bc 00 	lds	r24, 0x00BC
     ac4:	87 fd       	sbrc	r24, 7
     ac6:	03 c0       	rjmp	.+6      	; 0xace <y_gyro+0x98>
     ac8:	2a 35       	cpi	r18, 0x5A	; 90
     aca:	31 05       	cpc	r19, r1
     acc:	b9 f7       	brne	.-18     	; 0xabc <y_gyro+0x86>
	i2cWaitForComplete();
	i2cReceiveByte(FALSE);
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	0e 94 f7 00 	call	0x1ee	; 0x1ee <i2cReceiveByte>
     ad4:	20 e0       	ldi	r18, 0x00	; 0
     ad6:	30 e0       	ldi	r19, 0x00	; 0
     ad8:	02 c0       	rjmp	.+4      	; 0xade <y_gyro+0xa8>
		i++;
     ada:	2f 5f       	subi	r18, 0xFF	; 255
     adc:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     ade:	80 91 bc 00 	lds	r24, 0x00BC
     ae2:	87 fd       	sbrc	r24, 7
     ae4:	03 c0       	rjmp	.+6      	; 0xaec <y_gyro+0xb6>
     ae6:	2a 35       	cpi	r18, 0x5A	; 90
     ae8:	31 05       	cpc	r19, r1
     aea:	b9 f7       	brne	.-18     	; 0xada <y_gyro+0xa4>
}

unsigned char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
     aec:	10 91 bb 00 	lds	r17, 0x00BB
     af0:	20 e0       	ldi	r18, 0x00	; 0
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	02 c0       	rjmp	.+4      	; 0xafa <y_gyro+0xc4>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
     af6:	2f 5f       	subi	r18, 0xFF	; 255
     af8:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     afa:	80 91 bc 00 	lds	r24, 0x00BC
     afe:	87 fd       	sbrc	r24, 7
     b00:	03 c0       	rjmp	.+6      	; 0xb08 <y_gyro+0xd2>
     b02:	2a 35       	cpi	r18, 0x5A	; 90
     b04:	31 05       	cpc	r19, r1
     b06:	b9 f7       	brne	.-18     	; 0xaf6 <y_gyro+0xc0>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     b08:	84 e9       	ldi	r24, 0x94	; 148
     b0a:	80 93 bc 00 	sts	0x00BC, r24
	
	xh = i2cGetReceivedByte();	// Get MSB result
	i2cWaitForComplete();
	i2cSendStop();
	
	cbi(TWCR, TWEN);	// Disable TWI
     b0e:	80 91 bc 00 	lds	r24, 0x00BC
     b12:	8b 7f       	andi	r24, 0xFB	; 251
     b14:	80 93 bc 00 	sts	0x00BC, r24
	sbi(TWCR, TWEN);	// Enable TWI
     b18:	80 91 bc 00 	lds	r24, 0x00BC
     b1c:	84 60       	ori	r24, 0x04	; 4
     b1e:	80 93 bc 00 	sts	0x00BC, r24
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     b22:	3c 9a       	sbi	0x07, 4	; 7
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     b24:	84 ea       	ldi	r24, 0xA4	; 164
     b26:	80 93 bc 00 	sts	0x00BC, r24
     b2a:	20 e0       	ldi	r18, 0x00	; 0
     b2c:	30 e0       	ldi	r19, 0x00	; 0
     b2e:	02 c0       	rjmp	.+4      	; 0xb34 <y_gyro+0xfe>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
     b30:	2f 5f       	subi	r18, 0xFF	; 255
     b32:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     b34:	80 91 bc 00 	lds	r24, 0x00BC
     b38:	87 fd       	sbrc	r24, 7
     b3a:	03 c0       	rjmp	.+6      	; 0xb42 <y_gyro+0x10c>
     b3c:	2a 35       	cpi	r18, 0x5A	; 90
     b3e:	31 05       	cpc	r19, r1
     b40:	b9 f7       	brne	.-18     	; 0xb30 <y_gyro+0xfa>
	
	i2cSendStart();
	i2cWaitForComplete();
	i2cSendByte(ITG3200_W);	// write
     b42:	80 ed       	ldi	r24, 0xD0	; 208
     b44:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
     b48:	20 e0       	ldi	r18, 0x00	; 0
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	02 c0       	rjmp	.+4      	; 0xb52 <y_gyro+0x11c>
		i++;
     b4e:	2f 5f       	subi	r18, 0xFF	; 255
     b50:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     b52:	80 91 bc 00 	lds	r24, 0x00BC
     b56:	87 fd       	sbrc	r24, 7
     b58:	03 c0       	rjmp	.+6      	; 0xb60 <y_gyro+0x12a>
     b5a:	2a 35       	cpi	r18, 0x5A	; 90
     b5c:	31 05       	cpc	r19, r1
     b5e:	b9 f7       	brne	.-18     	; 0xb4e <y_gyro+0x118>
	i2cWaitForComplete();
	i2cSendByte(0x20);	// y low address
     b60:	80 e2       	ldi	r24, 0x20	; 32
     b62:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
     b66:	20 e0       	ldi	r18, 0x00	; 0
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	02 c0       	rjmp	.+4      	; 0xb70 <y_gyro+0x13a>
		i++;
     b6c:	2f 5f       	subi	r18, 0xFF	; 255
     b6e:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     b70:	80 91 bc 00 	lds	r24, 0x00BC
     b74:	87 fd       	sbrc	r24, 7
     b76:	03 c0       	rjmp	.+6      	; 0xb7e <y_gyro+0x148>
     b78:	2a 35       	cpi	r18, 0x5A	; 90
     b7a:	31 05       	cpc	r19, r1
     b7c:	b9 f7       	brne	.-18     	; 0xb6c <y_gyro+0x136>
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     b7e:	3c 9a       	sbi	0x07, 4	; 7
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     b80:	84 ea       	ldi	r24, 0xA4	; 164
     b82:	80 93 bc 00 	sts	0x00BC, r24
	i2cWaitForComplete();
	i2cSendStart();
	
	i2cSendByte(ITG3200_R);	// read
     b86:	81 ed       	ldi	r24, 0xD1	; 209
     b88:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
     b8c:	20 e0       	ldi	r18, 0x00	; 0
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	02 c0       	rjmp	.+4      	; 0xb96 <y_gyro+0x160>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
     b92:	2f 5f       	subi	r18, 0xFF	; 255
     b94:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     b96:	80 91 bc 00 	lds	r24, 0x00BC
     b9a:	87 fd       	sbrc	r24, 7
     b9c:	03 c0       	rjmp	.+6      	; 0xba4 <y_gyro+0x16e>
     b9e:	2a 35       	cpi	r18, 0x5A	; 90
     ba0:	31 05       	cpc	r19, r1
     ba2:	b9 f7       	brne	.-18     	; 0xb92 <y_gyro+0x15c>
	i2cWaitForComplete();
	i2cReceiveByte(FALSE);
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	0e 94 f7 00 	call	0x1ee	; 0x1ee <i2cReceiveByte>
     baa:	20 e0       	ldi	r18, 0x00	; 0
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	02 c0       	rjmp	.+4      	; 0xbb4 <y_gyro+0x17e>
		i++;
     bb0:	2f 5f       	subi	r18, 0xFF	; 255
     bb2:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     bb4:	80 91 bc 00 	lds	r24, 0x00BC
     bb8:	87 fd       	sbrc	r24, 7
     bba:	03 c0       	rjmp	.+6      	; 0xbc2 <y_gyro+0x18c>
     bbc:	2a 35       	cpi	r18, 0x5A	; 90
     bbe:	31 05       	cpc	r19, r1
     bc0:	b9 f7       	brne	.-18     	; 0xbb0 <y_gyro+0x17a>
}

unsigned char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
     bc2:	20 91 bb 00 	lds	r18, 0x00BB
     bc6:	40 e0       	ldi	r20, 0x00	; 0
     bc8:	50 e0       	ldi	r21, 0x00	; 0
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <y_gyro+0x19a>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
     bcc:	4f 5f       	subi	r20, 0xFF	; 255
     bce:	5f 4f       	sbci	r21, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     bd0:	80 91 bc 00 	lds	r24, 0x00BC
     bd4:	87 fd       	sbrc	r24, 7
     bd6:	03 c0       	rjmp	.+6      	; 0xbde <y_gyro+0x1a8>
     bd8:	4a 35       	cpi	r20, 0x5A	; 90
     bda:	51 05       	cpc	r21, r1
     bdc:	b9 f7       	brne	.-18     	; 0xbcc <y_gyro+0x196>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     bde:	84 e9       	ldi	r24, 0x94	; 148
     be0:	80 93 bc 00 	sts	0x00BC, r24
	i2cWaitForComplete();
	i2cSendStop();
	
	data = xl|(xh << 8);
	
	cbi(TWCR, TWEN);	// Disable TWI
     be4:	80 91 bc 00 	lds	r24, 0x00BC
     be8:	8b 7f       	andi	r24, 0xFB	; 251
     bea:	80 93 bc 00 	sts	0x00BC, r24
	sbi(TWCR, TWEN);	// Enable TWI
     bee:	80 91 bc 00 	lds	r24, 0x00BC
     bf2:	84 60       	ori	r24, 0x04	; 4
     bf4:	80 93 bc 00 	sts	0x00BC, r24
     bf8:	91 2f       	mov	r25, r17
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	28 2b       	or	r18, r24
     c00:	39 2b       	or	r19, r25
	
	return data;
}
     c02:	c9 01       	movw	r24, r18
     c04:	1f 91       	pop	r17
     c06:	08 95       	ret

00000c08 <z_gyro>:

uint16_t z_gyro(void)
{
     c08:	1f 93       	push	r17
	uint16_t  xh, xl, data;
	
	cbi(TWCR, TWEN);	// Disable TWI
     c0a:	80 91 bc 00 	lds	r24, 0x00BC
     c0e:	8b 7f       	andi	r24, 0xFB	; 251
     c10:	80 93 bc 00 	sts	0x00BC, r24
	sbi(TWCR, TWEN);	// Enable TWI
     c14:	80 91 bc 00 	lds	r24, 0x00BC
     c18:	84 60       	ori	r24, 0x04	; 4
     c1a:	80 93 bc 00 	sts	0x00BC, r24
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     c1e:	3c 9a       	sbi	0x07, 4	; 7
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     c20:	84 ea       	ldi	r24, 0xA4	; 164
     c22:	80 93 bc 00 	sts	0x00BC, r24
     c26:	20 e0       	ldi	r18, 0x00	; 0
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	02 c0       	rjmp	.+4      	; 0xc30 <z_gyro+0x28>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
     c2c:	2f 5f       	subi	r18, 0xFF	; 255
     c2e:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     c30:	80 91 bc 00 	lds	r24, 0x00BC
     c34:	87 fd       	sbrc	r24, 7
     c36:	03 c0       	rjmp	.+6      	; 0xc3e <z_gyro+0x36>
     c38:	2a 35       	cpi	r18, 0x5A	; 90
     c3a:	31 05       	cpc	r19, r1
     c3c:	b9 f7       	brne	.-18     	; 0xc2c <z_gyro+0x24>
	
	i2cSendStart();
	i2cWaitForComplete();
	i2cSendByte(ITG3200_W);	// write
     c3e:	80 ed       	ldi	r24, 0xD0	; 208
     c40:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
     c44:	20 e0       	ldi	r18, 0x00	; 0
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	02 c0       	rjmp	.+4      	; 0xc4e <z_gyro+0x46>
		i++;
     c4a:	2f 5f       	subi	r18, 0xFF	; 255
     c4c:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     c4e:	80 91 bc 00 	lds	r24, 0x00BC
     c52:	87 fd       	sbrc	r24, 7
     c54:	03 c0       	rjmp	.+6      	; 0xc5c <z_gyro+0x54>
     c56:	2a 35       	cpi	r18, 0x5A	; 90
     c58:	31 05       	cpc	r19, r1
     c5a:	b9 f7       	brne	.-18     	; 0xc4a <z_gyro+0x42>
	i2cWaitForComplete();
	i2cSendByte(0x21);	// z high address
     c5c:	81 e2       	ldi	r24, 0x21	; 33
     c5e:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
     c62:	20 e0       	ldi	r18, 0x00	; 0
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	02 c0       	rjmp	.+4      	; 0xc6c <z_gyro+0x64>
		i++;
     c68:	2f 5f       	subi	r18, 0xFF	; 255
     c6a:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     c6c:	80 91 bc 00 	lds	r24, 0x00BC
     c70:	87 fd       	sbrc	r24, 7
     c72:	03 c0       	rjmp	.+6      	; 0xc7a <z_gyro+0x72>
     c74:	2a 35       	cpi	r18, 0x5A	; 90
     c76:	31 05       	cpc	r19, r1
     c78:	b9 f7       	brne	.-18     	; 0xc68 <z_gyro+0x60>
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     c7a:	3c 9a       	sbi	0x07, 4	; 7
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     c7c:	84 ea       	ldi	r24, 0xA4	; 164
     c7e:	80 93 bc 00 	sts	0x00BC, r24
	i2cWaitForComplete();
	i2cSendStart();
	
	i2cSendByte(ITG3200_R);	// read
     c82:	81 ed       	ldi	r24, 0xD1	; 209
     c84:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
     c88:	20 e0       	ldi	r18, 0x00	; 0
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	02 c0       	rjmp	.+4      	; 0xc92 <z_gyro+0x8a>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
     c8e:	2f 5f       	subi	r18, 0xFF	; 255
     c90:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     c92:	80 91 bc 00 	lds	r24, 0x00BC
     c96:	87 fd       	sbrc	r24, 7
     c98:	03 c0       	rjmp	.+6      	; 0xca0 <z_gyro+0x98>
     c9a:	2a 35       	cpi	r18, 0x5A	; 90
     c9c:	31 05       	cpc	r19, r1
     c9e:	b9 f7       	brne	.-18     	; 0xc8e <z_gyro+0x86>
	i2cWaitForComplete();
	i2cReceiveByte(FALSE);
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	0e 94 f7 00 	call	0x1ee	; 0x1ee <i2cReceiveByte>
     ca6:	20 e0       	ldi	r18, 0x00	; 0
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	02 c0       	rjmp	.+4      	; 0xcb0 <z_gyro+0xa8>
		i++;
     cac:	2f 5f       	subi	r18, 0xFF	; 255
     cae:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     cb0:	80 91 bc 00 	lds	r24, 0x00BC
     cb4:	87 fd       	sbrc	r24, 7
     cb6:	03 c0       	rjmp	.+6      	; 0xcbe <z_gyro+0xb6>
     cb8:	2a 35       	cpi	r18, 0x5A	; 90
     cba:	31 05       	cpc	r19, r1
     cbc:	b9 f7       	brne	.-18     	; 0xcac <z_gyro+0xa4>
}

unsigned char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
     cbe:	10 91 bb 00 	lds	r17, 0x00BB
     cc2:	20 e0       	ldi	r18, 0x00	; 0
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	02 c0       	rjmp	.+4      	; 0xccc <z_gyro+0xc4>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
     cc8:	2f 5f       	subi	r18, 0xFF	; 255
     cca:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     ccc:	80 91 bc 00 	lds	r24, 0x00BC
     cd0:	87 fd       	sbrc	r24, 7
     cd2:	03 c0       	rjmp	.+6      	; 0xcda <z_gyro+0xd2>
     cd4:	2a 35       	cpi	r18, 0x5A	; 90
     cd6:	31 05       	cpc	r19, r1
     cd8:	b9 f7       	brne	.-18     	; 0xcc8 <z_gyro+0xc0>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     cda:	84 e9       	ldi	r24, 0x94	; 148
     cdc:	80 93 bc 00 	sts	0x00BC, r24
	
	xh = i2cGetReceivedByte();	// Get MSB result
	i2cWaitForComplete();
	i2cSendStop();
	
	cbi(TWCR, TWEN);	// Disable TWI
     ce0:	80 91 bc 00 	lds	r24, 0x00BC
     ce4:	8b 7f       	andi	r24, 0xFB	; 251
     ce6:	80 93 bc 00 	sts	0x00BC, r24
	sbi(TWCR, TWEN);	// Enable TWI
     cea:	80 91 bc 00 	lds	r24, 0x00BC
     cee:	84 60       	ori	r24, 0x04	; 4
     cf0:	80 93 bc 00 	sts	0x00BC, r24
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     cf4:	3c 9a       	sbi	0x07, 4	; 7
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     cf6:	84 ea       	ldi	r24, 0xA4	; 164
     cf8:	80 93 bc 00 	sts	0x00BC, r24
     cfc:	20 e0       	ldi	r18, 0x00	; 0
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	02 c0       	rjmp	.+4      	; 0xd06 <z_gyro+0xfe>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
     d02:	2f 5f       	subi	r18, 0xFF	; 255
     d04:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     d06:	80 91 bc 00 	lds	r24, 0x00BC
     d0a:	87 fd       	sbrc	r24, 7
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <z_gyro+0x10c>
     d0e:	2a 35       	cpi	r18, 0x5A	; 90
     d10:	31 05       	cpc	r19, r1
     d12:	b9 f7       	brne	.-18     	; 0xd02 <z_gyro+0xfa>
	
	i2cSendStart();
	i2cWaitForComplete();
	i2cSendByte(ITG3200_W);	// write
     d14:	80 ed       	ldi	r24, 0xD0	; 208
     d16:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
     d1a:	20 e0       	ldi	r18, 0x00	; 0
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	02 c0       	rjmp	.+4      	; 0xd24 <z_gyro+0x11c>
		i++;
     d20:	2f 5f       	subi	r18, 0xFF	; 255
     d22:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     d24:	80 91 bc 00 	lds	r24, 0x00BC
     d28:	87 fd       	sbrc	r24, 7
     d2a:	03 c0       	rjmp	.+6      	; 0xd32 <z_gyro+0x12a>
     d2c:	2a 35       	cpi	r18, 0x5A	; 90
     d2e:	31 05       	cpc	r19, r1
     d30:	b9 f7       	brne	.-18     	; 0xd20 <z_gyro+0x118>
	i2cWaitForComplete();
	i2cSendByte(0x22);	// z low address
     d32:	82 e2       	ldi	r24, 0x22	; 34
     d34:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
     d38:	20 e0       	ldi	r18, 0x00	; 0
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	02 c0       	rjmp	.+4      	; 0xd42 <z_gyro+0x13a>
		i++;
     d3e:	2f 5f       	subi	r18, 0xFF	; 255
     d40:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     d42:	80 91 bc 00 	lds	r24, 0x00BC
     d46:	87 fd       	sbrc	r24, 7
     d48:	03 c0       	rjmp	.+6      	; 0xd50 <z_gyro+0x148>
     d4a:	2a 35       	cpi	r18, 0x5A	; 90
     d4c:	31 05       	cpc	r19, r1
     d4e:	b9 f7       	brne	.-18     	; 0xd3e <z_gyro+0x136>
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     d50:	3c 9a       	sbi	0x07, 4	; 7
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     d52:	84 ea       	ldi	r24, 0xA4	; 164
     d54:	80 93 bc 00 	sts	0x00BC, r24
	i2cWaitForComplete();
	i2cSendStart();
	
	i2cSendByte(ITG3200_R);	// read
     d58:	81 ed       	ldi	r24, 0xD1	; 209
     d5a:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
     d5e:	20 e0       	ldi	r18, 0x00	; 0
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <z_gyro+0x160>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
     d64:	2f 5f       	subi	r18, 0xFF	; 255
     d66:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     d68:	80 91 bc 00 	lds	r24, 0x00BC
     d6c:	87 fd       	sbrc	r24, 7
     d6e:	03 c0       	rjmp	.+6      	; 0xd76 <z_gyro+0x16e>
     d70:	2a 35       	cpi	r18, 0x5A	; 90
     d72:	31 05       	cpc	r19, r1
     d74:	b9 f7       	brne	.-18     	; 0xd64 <z_gyro+0x15c>
	i2cWaitForComplete();
	i2cReceiveByte(FALSE);
     d76:	80 e0       	ldi	r24, 0x00	; 0
     d78:	0e 94 f7 00 	call	0x1ee	; 0x1ee <i2cReceiveByte>
     d7c:	20 e0       	ldi	r18, 0x00	; 0
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	02 c0       	rjmp	.+4      	; 0xd86 <z_gyro+0x17e>
		i++;
     d82:	2f 5f       	subi	r18, 0xFF	; 255
     d84:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     d86:	80 91 bc 00 	lds	r24, 0x00BC
     d8a:	87 fd       	sbrc	r24, 7
     d8c:	03 c0       	rjmp	.+6      	; 0xd94 <z_gyro+0x18c>
     d8e:	2a 35       	cpi	r18, 0x5A	; 90
     d90:	31 05       	cpc	r19, r1
     d92:	b9 f7       	brne	.-18     	; 0xd82 <z_gyro+0x17a>
}

unsigned char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
     d94:	20 91 bb 00 	lds	r18, 0x00BB
     d98:	40 e0       	ldi	r20, 0x00	; 0
     d9a:	50 e0       	ldi	r21, 0x00	; 0
     d9c:	02 c0       	rjmp	.+4      	; 0xda2 <z_gyro+0x19a>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
     d9e:	4f 5f       	subi	r20, 0xFF	; 255
     da0:	5f 4f       	sbci	r21, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     da2:	80 91 bc 00 	lds	r24, 0x00BC
     da6:	87 fd       	sbrc	r24, 7
     da8:	03 c0       	rjmp	.+6      	; 0xdb0 <z_gyro+0x1a8>
     daa:	4a 35       	cpi	r20, 0x5A	; 90
     dac:	51 05       	cpc	r21, r1
     dae:	b9 f7       	brne	.-18     	; 0xd9e <z_gyro+0x196>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     db0:	84 e9       	ldi	r24, 0x94	; 148
     db2:	80 93 bc 00 	sts	0x00BC, r24
	i2cWaitForComplete();
	i2cSendStop();
	
	data = xl|(xh << 8);
	
	cbi(TWCR, TWEN);	// Disable TWI
     db6:	80 91 bc 00 	lds	r24, 0x00BC
     dba:	8b 7f       	andi	r24, 0xFB	; 251
     dbc:	80 93 bc 00 	sts	0x00BC, r24
	sbi(TWCR, TWEN);	// Enable TWI
     dc0:	80 91 bc 00 	lds	r24, 0x00BC
     dc4:	84 60       	ori	r24, 0x04	; 4
     dc6:	80 93 bc 00 	sts	0x00BC, r24
     dca:	91 2f       	mov	r25, r17
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	28 2b       	or	r18, r24
     dd2:	39 2b       	or	r19, r25
	
	return data;
}
     dd4:	c9 01       	movw	r24, r18
     dd6:	1f 91       	pop	r17
     dd8:	08 95       	ret

00000dda <x_accel>:

uint16_t x_accel(void)
{
     dda:	0f 93       	push	r16
     ddc:	1f 93       	push	r17
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     dde:	3c 9a       	sbi	0x07, 4	; 7
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     de0:	84 ea       	ldi	r24, 0xA4	; 164
     de2:	80 93 bc 00 	sts	0x00BC, r24
     de6:	20 e0       	ldi	r18, 0x00	; 0
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	02 c0       	rjmp	.+4      	; 0xdf0 <x_accel+0x16>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
     dec:	2f 5f       	subi	r18, 0xFF	; 255
     dee:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     df0:	80 91 bc 00 	lds	r24, 0x00BC
     df4:	87 fd       	sbrc	r24, 7
     df6:	03 c0       	rjmp	.+6      	; 0xdfe <x_accel+0x24>
     df8:	2a 35       	cpi	r18, 0x5A	; 90
     dfa:	31 05       	cpc	r19, r1
     dfc:	b9 f7       	brne	.-18     	; 0xdec <x_accel+0x12>
	uint16_t xo;

	//0x32 data registers
	i2cSendStart();
	i2cWaitForComplete();
	i2cSendByte(0xA6);    //write to ADXL
     dfe:	86 ea       	ldi	r24, 0xA6	; 166
     e00:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
     e04:	20 e0       	ldi	r18, 0x00	; 0
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <x_accel+0x34>
		i++;
     e0a:	2f 5f       	subi	r18, 0xFF	; 255
     e0c:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     e0e:	80 91 bc 00 	lds	r24, 0x00BC
     e12:	87 fd       	sbrc	r24, 7
     e14:	03 c0       	rjmp	.+6      	; 0xe1c <x_accel+0x42>
     e16:	2a 35       	cpi	r18, 0x5A	; 90
     e18:	31 05       	cpc	r19, r1
     e1a:	b9 f7       	brne	.-18     	; 0xe0a <x_accel+0x30>
	i2cWaitForComplete();
	i2cSendByte(0x32);    //X0 data register
     e1c:	82 e3       	ldi	r24, 0x32	; 50
     e1e:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
     e22:	20 e0       	ldi	r18, 0x00	; 0
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <x_accel+0x52>
		i++;
     e28:	2f 5f       	subi	r18, 0xFF	; 255
     e2a:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     e2c:	80 91 bc 00 	lds	r24, 0x00BC
     e30:	87 fd       	sbrc	r24, 7
     e32:	03 c0       	rjmp	.+6      	; 0xe3a <x_accel+0x60>
     e34:	2a 35       	cpi	r18, 0x5A	; 90
     e36:	31 05       	cpc	r19, r1
     e38:	b9 f7       	brne	.-18     	; 0xe28 <x_accel+0x4e>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     e3a:	84 e9       	ldi	r24, 0x94	; 148
     e3c:	80 93 bc 00 	sts	0x00BC, r24
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     e40:	3c 9a       	sbi	0x07, 4	; 7
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     e42:	84 ea       	ldi	r24, 0xA4	; 164
     e44:	80 93 bc 00 	sts	0x00BC, r24
     e48:	20 e0       	ldi	r18, 0x00	; 0
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <x_accel+0x78>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
     e4e:	2f 5f       	subi	r18, 0xFF	; 255
     e50:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     e52:	80 91 bc 00 	lds	r24, 0x00BC
     e56:	87 fd       	sbrc	r24, 7
     e58:	03 c0       	rjmp	.+6      	; 0xe60 <x_accel+0x86>
     e5a:	2a 35       	cpi	r18, 0x5A	; 90
     e5c:	31 05       	cpc	r19, r1
     e5e:	b9 f7       	brne	.-18     	; 0xe4e <x_accel+0x74>
	
	i2cSendStop();		 //repeat start
	i2cSendStart();

	i2cWaitForComplete();
	i2cSendByte(0xA7);    //read from ADXL
     e60:	87 ea       	ldi	r24, 0xA7	; 167
     e62:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
     e66:	20 e0       	ldi	r18, 0x00	; 0
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <x_accel+0x96>
		i++;
     e6c:	2f 5f       	subi	r18, 0xFF	; 255
     e6e:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     e70:	80 91 bc 00 	lds	r24, 0x00BC
     e74:	87 fd       	sbrc	r24, 7
     e76:	03 c0       	rjmp	.+6      	; 0xe7e <x_accel+0xa4>
     e78:	2a 35       	cpi	r18, 0x5A	; 90
     e7a:	31 05       	cpc	r19, r1
     e7c:	b9 f7       	brne	.-18     	; 0xe6c <x_accel+0x92>
	i2cWaitForComplete();
	i2cReceiveByte(TRUE);
     e7e:	8f ef       	ldi	r24, 0xFF	; 255
     e80:	0e 94 f7 00 	call	0x1ee	; 0x1ee <i2cReceiveByte>
     e84:	20 e0       	ldi	r18, 0x00	; 0
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	02 c0       	rjmp	.+4      	; 0xe8e <x_accel+0xb4>
		i++;
     e8a:	2f 5f       	subi	r18, 0xFF	; 255
     e8c:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     e8e:	80 91 bc 00 	lds	r24, 0x00BC
     e92:	87 fd       	sbrc	r24, 7
     e94:	03 c0       	rjmp	.+6      	; 0xe9c <x_accel+0xc2>
     e96:	2a 35       	cpi	r18, 0x5A	; 90
     e98:	31 05       	cpc	r19, r1
     e9a:	b9 f7       	brne	.-18     	; 0xe8a <x_accel+0xb0>
}

unsigned char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
     e9c:	00 91 bb 00 	lds	r16, 0x00BB
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <x_accel+0xd0>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
     ea6:	2f 5f       	subi	r18, 0xFF	; 255
     ea8:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     eaa:	80 91 bc 00 	lds	r24, 0x00BC
     eae:	87 fd       	sbrc	r24, 7
     eb0:	03 c0       	rjmp	.+6      	; 0xeb8 <x_accel+0xde>
     eb2:	2a 35       	cpi	r18, 0x5A	; 90
     eb4:	31 05       	cpc	r19, r1
     eb6:	b9 f7       	brne	.-18     	; 0xea6 <x_accel+0xcc>
	i2cWaitForComplete();
	xl = i2cGetReceivedByte();	//x low byte
	i2cWaitForComplete();
	i2cReceiveByte(FALSE);
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	0e 94 f7 00 	call	0x1ee	; 0x1ee <i2cReceiveByte>
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <x_accel+0xee>
		i++;
     ec4:	2f 5f       	subi	r18, 0xFF	; 255
     ec6:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     ec8:	80 91 bc 00 	lds	r24, 0x00BC
     ecc:	87 fd       	sbrc	r24, 7
     ece:	03 c0       	rjmp	.+6      	; 0xed6 <x_accel+0xfc>
     ed0:	2a 35       	cpi	r18, 0x5A	; 90
     ed2:	31 05       	cpc	r19, r1
     ed4:	b9 f7       	brne	.-18     	; 0xec4 <x_accel+0xea>
}

unsigned char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
     ed6:	80 91 bb 00 	lds	r24, 0x00BB
     eda:	20 e0       	ldi	r18, 0x00	; 0
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <x_accel+0x10a>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
     ee0:	2f 5f       	subi	r18, 0xFF	; 255
     ee2:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     ee4:	80 91 bc 00 	lds	r24, 0x00BC
     ee8:	87 fd       	sbrc	r24, 7
     eea:	03 c0       	rjmp	.+6      	; 0xef2 <x_accel+0x118>
     eec:	2a 35       	cpi	r18, 0x5A	; 90
     eee:	31 05       	cpc	r19, r1
     ef0:	b9 f7       	brne	.-18     	; 0xee0 <x_accel+0x106>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     ef2:	84 e9       	ldi	r24, 0x94	; 148
     ef4:	80 93 bc 00 	sts	0x00BC, r24
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     ef8:	3c 9a       	sbi	0x07, 4	; 7
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     efa:	84 ea       	ldi	r24, 0xA4	; 164
     efc:	80 93 bc 00 	sts	0x00BC, r24
     f00:	20 e0       	ldi	r18, 0x00	; 0
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <x_accel+0x130>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
     f06:	2f 5f       	subi	r18, 0xFF	; 255
     f08:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     f0a:	80 91 bc 00 	lds	r24, 0x00BC
     f0e:	87 fd       	sbrc	r24, 7
     f10:	03 c0       	rjmp	.+6      	; 0xf18 <x_accel+0x13e>
     f12:	2a 35       	cpi	r18, 0x5A	; 90
     f14:	31 05       	cpc	r19, r1
     f16:	b9 f7       	brne	.-18     	; 0xf06 <x_accel+0x12c>
	i2cSendStop();	
	
	//0x33 data registers
	i2cSendStart();
	i2cWaitForComplete();
	i2cSendByte(0xA6);    //write to ADXL
     f18:	86 ea       	ldi	r24, 0xA6	; 166
     f1a:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
     f1e:	20 e0       	ldi	r18, 0x00	; 0
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <x_accel+0x14e>
		i++;
     f24:	2f 5f       	subi	r18, 0xFF	; 255
     f26:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     f28:	80 91 bc 00 	lds	r24, 0x00BC
     f2c:	87 fd       	sbrc	r24, 7
     f2e:	03 c0       	rjmp	.+6      	; 0xf36 <x_accel+0x15c>
     f30:	2a 35       	cpi	r18, 0x5A	; 90
     f32:	31 05       	cpc	r19, r1
     f34:	b9 f7       	brne	.-18     	; 0xf24 <x_accel+0x14a>
	i2cWaitForComplete();
	i2cSendByte(0x33);    //X1 data register
     f36:	83 e3       	ldi	r24, 0x33	; 51
     f38:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
     f3c:	20 e0       	ldi	r18, 0x00	; 0
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <x_accel+0x16c>
		i++;
     f42:	2f 5f       	subi	r18, 0xFF	; 255
     f44:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     f46:	80 91 bc 00 	lds	r24, 0x00BC
     f4a:	87 fd       	sbrc	r24, 7
     f4c:	03 c0       	rjmp	.+6      	; 0xf54 <x_accel+0x17a>
     f4e:	2a 35       	cpi	r18, 0x5A	; 90
     f50:	31 05       	cpc	r19, r1
     f52:	b9 f7       	brne	.-18     	; 0xf42 <x_accel+0x168>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     f54:	84 e9       	ldi	r24, 0x94	; 148
     f56:	80 93 bc 00 	sts	0x00BC, r24
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     f5a:	3c 9a       	sbi	0x07, 4	; 7
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     f5c:	84 ea       	ldi	r24, 0xA4	; 164
     f5e:	80 93 bc 00 	sts	0x00BC, r24
     f62:	20 e0       	ldi	r18, 0x00	; 0
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	02 c0       	rjmp	.+4      	; 0xf6c <x_accel+0x192>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
     f68:	2f 5f       	subi	r18, 0xFF	; 255
     f6a:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     f6c:	80 91 bc 00 	lds	r24, 0x00BC
     f70:	87 fd       	sbrc	r24, 7
     f72:	03 c0       	rjmp	.+6      	; 0xf7a <x_accel+0x1a0>
     f74:	2a 35       	cpi	r18, 0x5A	; 90
     f76:	31 05       	cpc	r19, r1
     f78:	b9 f7       	brne	.-18     	; 0xf68 <x_accel+0x18e>
	
	i2cSendStop();		 //repeat start
	i2cSendStart();

	i2cWaitForComplete();
	i2cSendByte(0xA7);    //read from ADXL
     f7a:	87 ea       	ldi	r24, 0xA7	; 167
     f7c:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <x_accel+0x1b0>
		i++;
     f86:	2f 5f       	subi	r18, 0xFF	; 255
     f88:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     f8a:	80 91 bc 00 	lds	r24, 0x00BC
     f8e:	87 fd       	sbrc	r24, 7
     f90:	03 c0       	rjmp	.+6      	; 0xf98 <x_accel+0x1be>
     f92:	2a 35       	cpi	r18, 0x5A	; 90
     f94:	31 05       	cpc	r19, r1
     f96:	b9 f7       	brne	.-18     	; 0xf86 <x_accel+0x1ac>
	i2cWaitForComplete();
	i2cReceiveByte(TRUE);
     f98:	8f ef       	ldi	r24, 0xFF	; 255
     f9a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <i2cReceiveByte>
     f9e:	20 e0       	ldi	r18, 0x00	; 0
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <x_accel+0x1ce>
		i++;
     fa4:	2f 5f       	subi	r18, 0xFF	; 255
     fa6:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     fa8:	80 91 bc 00 	lds	r24, 0x00BC
     fac:	87 fd       	sbrc	r24, 7
     fae:	03 c0       	rjmp	.+6      	; 0xfb6 <x_accel+0x1dc>
     fb0:	2a 35       	cpi	r18, 0x5A	; 90
     fb2:	31 05       	cpc	r19, r1
     fb4:	b9 f7       	brne	.-18     	; 0xfa4 <x_accel+0x1ca>
}

unsigned char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
     fb6:	10 91 bb 00 	lds	r17, 0x00BB
     fba:	20 e0       	ldi	r18, 0x00	; 0
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <x_accel+0x1ea>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
     fc0:	2f 5f       	subi	r18, 0xFF	; 255
     fc2:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     fc4:	80 91 bc 00 	lds	r24, 0x00BC
     fc8:	87 fd       	sbrc	r24, 7
     fca:	03 c0       	rjmp	.+6      	; 0xfd2 <x_accel+0x1f8>
     fcc:	2a 35       	cpi	r18, 0x5A	; 90
     fce:	31 05       	cpc	r19, r1
     fd0:	b9 f7       	brne	.-18     	; 0xfc0 <x_accel+0x1e6>
	i2cWaitForComplete();
	xh = i2cGetReceivedByte();	//x high byte
	i2cWaitForComplete();
	i2cReceiveByte(FALSE);
     fd2:	80 e0       	ldi	r24, 0x00	; 0
     fd4:	0e 94 f7 00 	call	0x1ee	; 0x1ee <i2cReceiveByte>
     fd8:	20 e0       	ldi	r18, 0x00	; 0
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <x_accel+0x208>
		i++;
     fde:	2f 5f       	subi	r18, 0xFF	; 255
     fe0:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     fe2:	80 91 bc 00 	lds	r24, 0x00BC
     fe6:	87 fd       	sbrc	r24, 7
     fe8:	03 c0       	rjmp	.+6      	; 0xff0 <x_accel+0x216>
     fea:	2a 35       	cpi	r18, 0x5A	; 90
     fec:	31 05       	cpc	r19, r1
     fee:	b9 f7       	brne	.-18     	; 0xfde <x_accel+0x204>
}

unsigned char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
     ff0:	80 91 bb 00 	lds	r24, 0x00BB
     ff4:	20 e0       	ldi	r18, 0x00	; 0
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <x_accel+0x224>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
     ffa:	2f 5f       	subi	r18, 0xFF	; 255
     ffc:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     ffe:	80 91 bc 00 	lds	r24, 0x00BC
    1002:	87 fd       	sbrc	r24, 7
    1004:	03 c0       	rjmp	.+6      	; 0x100c <x_accel+0x232>
    1006:	2a 35       	cpi	r18, 0x5A	; 90
    1008:	31 05       	cpc	r19, r1
    100a:	b9 f7       	brne	.-18     	; 0xffa <x_accel+0x220>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    100c:	84 e9       	ldi	r24, 0x94	; 148
    100e:	80 93 bc 00 	sts	0x00BC, r24
    1012:	91 2f       	mov	r25, r17
    1014:	80 e0       	ldi	r24, 0x00	; 0
    1016:	20 2f       	mov	r18, r16
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	28 2b       	or	r18, r24
    101c:	39 2b       	or	r19, r25
	dummy = i2cGetReceivedByte();	//must do a multiple byte read?
	i2cWaitForComplete();
	i2cSendStop();
	xo = xl|(xh << 8);
	return xo;
}
    101e:	c9 01       	movw	r24, r18
    1020:	1f 91       	pop	r17
    1022:	0f 91       	pop	r16
    1024:	08 95       	ret

00001026 <y_accel>:

uint16_t y_accel(void)
{		
    1026:	0f 93       	push	r16
    1028:	1f 93       	push	r17
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
    102a:	3c 9a       	sbi	0x07, 4	; 7
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    102c:	84 ea       	ldi	r24, 0xA4	; 164
    102e:	80 93 bc 00 	sts	0x00BC, r24
    1032:	20 e0       	ldi	r18, 0x00	; 0
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	02 c0       	rjmp	.+4      	; 0x103c <y_accel+0x16>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
    1038:	2f 5f       	subi	r18, 0xFF	; 255
    103a:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    103c:	80 91 bc 00 	lds	r24, 0x00BC
    1040:	87 fd       	sbrc	r24, 7
    1042:	03 c0       	rjmp	.+6      	; 0x104a <y_accel+0x24>
    1044:	2a 35       	cpi	r18, 0x5A	; 90
    1046:	31 05       	cpc	r19, r1
    1048:	b9 f7       	brne	.-18     	; 0x1038 <y_accel+0x12>
	uint16_t yo;
	
	//0x34 data registers
	i2cSendStart();
	i2cWaitForComplete();
	i2cSendByte(0xA6);    //write to ADXL
    104a:	86 ea       	ldi	r24, 0xA6	; 166
    104c:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
    1050:	20 e0       	ldi	r18, 0x00	; 0
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	02 c0       	rjmp	.+4      	; 0x105a <y_accel+0x34>
		i++;
    1056:	2f 5f       	subi	r18, 0xFF	; 255
    1058:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    105a:	80 91 bc 00 	lds	r24, 0x00BC
    105e:	87 fd       	sbrc	r24, 7
    1060:	03 c0       	rjmp	.+6      	; 0x1068 <y_accel+0x42>
    1062:	2a 35       	cpi	r18, 0x5A	; 90
    1064:	31 05       	cpc	r19, r1
    1066:	b9 f7       	brne	.-18     	; 0x1056 <y_accel+0x30>
	i2cWaitForComplete();
	i2cSendByte(0x34);    //Y0 data register
    1068:	84 e3       	ldi	r24, 0x34	; 52
    106a:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
    106e:	20 e0       	ldi	r18, 0x00	; 0
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <y_accel+0x52>
		i++;
    1074:	2f 5f       	subi	r18, 0xFF	; 255
    1076:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    1078:	80 91 bc 00 	lds	r24, 0x00BC
    107c:	87 fd       	sbrc	r24, 7
    107e:	03 c0       	rjmp	.+6      	; 0x1086 <y_accel+0x60>
    1080:	2a 35       	cpi	r18, 0x5A	; 90
    1082:	31 05       	cpc	r19, r1
    1084:	b9 f7       	brne	.-18     	; 0x1074 <y_accel+0x4e>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    1086:	84 e9       	ldi	r24, 0x94	; 148
    1088:	80 93 bc 00 	sts	0x00BC, r24
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
    108c:	3c 9a       	sbi	0x07, 4	; 7
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    108e:	84 ea       	ldi	r24, 0xA4	; 164
    1090:	80 93 bc 00 	sts	0x00BC, r24
    1094:	20 e0       	ldi	r18, 0x00	; 0
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	02 c0       	rjmp	.+4      	; 0x109e <y_accel+0x78>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
    109a:	2f 5f       	subi	r18, 0xFF	; 255
    109c:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    109e:	80 91 bc 00 	lds	r24, 0x00BC
    10a2:	87 fd       	sbrc	r24, 7
    10a4:	03 c0       	rjmp	.+6      	; 0x10ac <y_accel+0x86>
    10a6:	2a 35       	cpi	r18, 0x5A	; 90
    10a8:	31 05       	cpc	r19, r1
    10aa:	b9 f7       	brne	.-18     	; 0x109a <y_accel+0x74>
	
	i2cSendStop();		 //repeat start
	i2cSendStart();

	i2cWaitForComplete();
	i2cSendByte(0xA7);    //read from ADXL
    10ac:	87 ea       	ldi	r24, 0xA7	; 167
    10ae:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <y_accel+0x96>
		i++;
    10b8:	2f 5f       	subi	r18, 0xFF	; 255
    10ba:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    10bc:	80 91 bc 00 	lds	r24, 0x00BC
    10c0:	87 fd       	sbrc	r24, 7
    10c2:	03 c0       	rjmp	.+6      	; 0x10ca <y_accel+0xa4>
    10c4:	2a 35       	cpi	r18, 0x5A	; 90
    10c6:	31 05       	cpc	r19, r1
    10c8:	b9 f7       	brne	.-18     	; 0x10b8 <y_accel+0x92>
	i2cWaitForComplete();
	i2cReceiveByte(TRUE);
    10ca:	8f ef       	ldi	r24, 0xFF	; 255
    10cc:	0e 94 f7 00 	call	0x1ee	; 0x1ee <i2cReceiveByte>
    10d0:	20 e0       	ldi	r18, 0x00	; 0
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <y_accel+0xb4>
		i++;
    10d6:	2f 5f       	subi	r18, 0xFF	; 255
    10d8:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    10da:	80 91 bc 00 	lds	r24, 0x00BC
    10de:	87 fd       	sbrc	r24, 7
    10e0:	03 c0       	rjmp	.+6      	; 0x10e8 <y_accel+0xc2>
    10e2:	2a 35       	cpi	r18, 0x5A	; 90
    10e4:	31 05       	cpc	r19, r1
    10e6:	b9 f7       	brne	.-18     	; 0x10d6 <y_accel+0xb0>
}

unsigned char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
    10e8:	00 91 bb 00 	lds	r16, 0x00BB
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <y_accel+0xd0>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
    10f2:	2f 5f       	subi	r18, 0xFF	; 255
    10f4:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    10f6:	80 91 bc 00 	lds	r24, 0x00BC
    10fa:	87 fd       	sbrc	r24, 7
    10fc:	03 c0       	rjmp	.+6      	; 0x1104 <y_accel+0xde>
    10fe:	2a 35       	cpi	r18, 0x5A	; 90
    1100:	31 05       	cpc	r19, r1
    1102:	b9 f7       	brne	.-18     	; 0x10f2 <y_accel+0xcc>
	i2cWaitForComplete();
	yl = i2cGetReceivedByte();	//x low byte
	i2cWaitForComplete();
	i2cReceiveByte(FALSE);
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	0e 94 f7 00 	call	0x1ee	; 0x1ee <i2cReceiveByte>
    110a:	20 e0       	ldi	r18, 0x00	; 0
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <y_accel+0xee>
		i++;
    1110:	2f 5f       	subi	r18, 0xFF	; 255
    1112:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    1114:	80 91 bc 00 	lds	r24, 0x00BC
    1118:	87 fd       	sbrc	r24, 7
    111a:	03 c0       	rjmp	.+6      	; 0x1122 <y_accel+0xfc>
    111c:	2a 35       	cpi	r18, 0x5A	; 90
    111e:	31 05       	cpc	r19, r1
    1120:	b9 f7       	brne	.-18     	; 0x1110 <y_accel+0xea>
}

unsigned char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
    1122:	80 91 bb 00 	lds	r24, 0x00BB
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <y_accel+0x10a>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
    112c:	2f 5f       	subi	r18, 0xFF	; 255
    112e:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    1130:	80 91 bc 00 	lds	r24, 0x00BC
    1134:	87 fd       	sbrc	r24, 7
    1136:	03 c0       	rjmp	.+6      	; 0x113e <y_accel+0x118>
    1138:	2a 35       	cpi	r18, 0x5A	; 90
    113a:	31 05       	cpc	r19, r1
    113c:	b9 f7       	brne	.-18     	; 0x112c <y_accel+0x106>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    113e:	84 e9       	ldi	r24, 0x94	; 148
    1140:	80 93 bc 00 	sts	0x00BC, r24
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
    1144:	3c 9a       	sbi	0x07, 4	; 7
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    1146:	84 ea       	ldi	r24, 0xA4	; 164
    1148:	80 93 bc 00 	sts	0x00BC, r24
    114c:	20 e0       	ldi	r18, 0x00	; 0
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <y_accel+0x130>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
    1152:	2f 5f       	subi	r18, 0xFF	; 255
    1154:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    1156:	80 91 bc 00 	lds	r24, 0x00BC
    115a:	87 fd       	sbrc	r24, 7
    115c:	03 c0       	rjmp	.+6      	; 0x1164 <y_accel+0x13e>
    115e:	2a 35       	cpi	r18, 0x5A	; 90
    1160:	31 05       	cpc	r19, r1
    1162:	b9 f7       	brne	.-18     	; 0x1152 <y_accel+0x12c>
	i2cSendStop();	
	
	//0x35 data registers
	i2cSendStart();
	i2cWaitForComplete();
	i2cSendByte(0xA6);    //write to ADXL
    1164:	86 ea       	ldi	r24, 0xA6	; 166
    1166:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
    116a:	20 e0       	ldi	r18, 0x00	; 0
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <y_accel+0x14e>
		i++;
    1170:	2f 5f       	subi	r18, 0xFF	; 255
    1172:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    1174:	80 91 bc 00 	lds	r24, 0x00BC
    1178:	87 fd       	sbrc	r24, 7
    117a:	03 c0       	rjmp	.+6      	; 0x1182 <y_accel+0x15c>
    117c:	2a 35       	cpi	r18, 0x5A	; 90
    117e:	31 05       	cpc	r19, r1
    1180:	b9 f7       	brne	.-18     	; 0x1170 <y_accel+0x14a>
	i2cWaitForComplete();
	i2cSendByte(0x35);    //Y1 data register
    1182:	85 e3       	ldi	r24, 0x35	; 53
    1184:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
    1188:	20 e0       	ldi	r18, 0x00	; 0
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <y_accel+0x16c>
		i++;
    118e:	2f 5f       	subi	r18, 0xFF	; 255
    1190:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    1192:	80 91 bc 00 	lds	r24, 0x00BC
    1196:	87 fd       	sbrc	r24, 7
    1198:	03 c0       	rjmp	.+6      	; 0x11a0 <y_accel+0x17a>
    119a:	2a 35       	cpi	r18, 0x5A	; 90
    119c:	31 05       	cpc	r19, r1
    119e:	b9 f7       	brne	.-18     	; 0x118e <y_accel+0x168>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    11a0:	84 e9       	ldi	r24, 0x94	; 148
    11a2:	80 93 bc 00 	sts	0x00BC, r24
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
    11a6:	3c 9a       	sbi	0x07, 4	; 7
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    11a8:	84 ea       	ldi	r24, 0xA4	; 164
    11aa:	80 93 bc 00 	sts	0x00BC, r24
    11ae:	20 e0       	ldi	r18, 0x00	; 0
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <y_accel+0x192>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
    11b4:	2f 5f       	subi	r18, 0xFF	; 255
    11b6:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    11b8:	80 91 bc 00 	lds	r24, 0x00BC
    11bc:	87 fd       	sbrc	r24, 7
    11be:	03 c0       	rjmp	.+6      	; 0x11c6 <y_accel+0x1a0>
    11c0:	2a 35       	cpi	r18, 0x5A	; 90
    11c2:	31 05       	cpc	r19, r1
    11c4:	b9 f7       	brne	.-18     	; 0x11b4 <y_accel+0x18e>
	
	i2cSendStop();		 //repeat start
	i2cSendStart();

	i2cWaitForComplete();
	i2cSendByte(0xA7);    //read from ADXL
    11c6:	87 ea       	ldi	r24, 0xA7	; 167
    11c8:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
    11cc:	20 e0       	ldi	r18, 0x00	; 0
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <y_accel+0x1b0>
		i++;
    11d2:	2f 5f       	subi	r18, 0xFF	; 255
    11d4:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    11d6:	80 91 bc 00 	lds	r24, 0x00BC
    11da:	87 fd       	sbrc	r24, 7
    11dc:	03 c0       	rjmp	.+6      	; 0x11e4 <y_accel+0x1be>
    11de:	2a 35       	cpi	r18, 0x5A	; 90
    11e0:	31 05       	cpc	r19, r1
    11e2:	b9 f7       	brne	.-18     	; 0x11d2 <y_accel+0x1ac>
	i2cWaitForComplete();
	i2cReceiveByte(TRUE);
    11e4:	8f ef       	ldi	r24, 0xFF	; 255
    11e6:	0e 94 f7 00 	call	0x1ee	; 0x1ee <i2cReceiveByte>
    11ea:	20 e0       	ldi	r18, 0x00	; 0
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <y_accel+0x1ce>
		i++;
    11f0:	2f 5f       	subi	r18, 0xFF	; 255
    11f2:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    11f4:	80 91 bc 00 	lds	r24, 0x00BC
    11f8:	87 fd       	sbrc	r24, 7
    11fa:	03 c0       	rjmp	.+6      	; 0x1202 <y_accel+0x1dc>
    11fc:	2a 35       	cpi	r18, 0x5A	; 90
    11fe:	31 05       	cpc	r19, r1
    1200:	b9 f7       	brne	.-18     	; 0x11f0 <y_accel+0x1ca>
}

unsigned char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
    1202:	10 91 bb 00 	lds	r17, 0x00BB
    1206:	20 e0       	ldi	r18, 0x00	; 0
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <y_accel+0x1ea>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
    120c:	2f 5f       	subi	r18, 0xFF	; 255
    120e:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    1210:	80 91 bc 00 	lds	r24, 0x00BC
    1214:	87 fd       	sbrc	r24, 7
    1216:	03 c0       	rjmp	.+6      	; 0x121e <y_accel+0x1f8>
    1218:	2a 35       	cpi	r18, 0x5A	; 90
    121a:	31 05       	cpc	r19, r1
    121c:	b9 f7       	brne	.-18     	; 0x120c <y_accel+0x1e6>
	i2cWaitForComplete();
	yh = i2cGetReceivedByte();	//y high byte
	i2cWaitForComplete();
	i2cReceiveByte(FALSE);
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	0e 94 f7 00 	call	0x1ee	; 0x1ee <i2cReceiveByte>
    1224:	20 e0       	ldi	r18, 0x00	; 0
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	02 c0       	rjmp	.+4      	; 0x122e <y_accel+0x208>
		i++;
    122a:	2f 5f       	subi	r18, 0xFF	; 255
    122c:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    122e:	80 91 bc 00 	lds	r24, 0x00BC
    1232:	87 fd       	sbrc	r24, 7
    1234:	03 c0       	rjmp	.+6      	; 0x123c <y_accel+0x216>
    1236:	2a 35       	cpi	r18, 0x5A	; 90
    1238:	31 05       	cpc	r19, r1
    123a:	b9 f7       	brne	.-18     	; 0x122a <y_accel+0x204>
}

unsigned char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
    123c:	80 91 bb 00 	lds	r24, 0x00BB
    1240:	20 e0       	ldi	r18, 0x00	; 0
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	02 c0       	rjmp	.+4      	; 0x124a <y_accel+0x224>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
    1246:	2f 5f       	subi	r18, 0xFF	; 255
    1248:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    124a:	80 91 bc 00 	lds	r24, 0x00BC
    124e:	87 fd       	sbrc	r24, 7
    1250:	03 c0       	rjmp	.+6      	; 0x1258 <y_accel+0x232>
    1252:	2a 35       	cpi	r18, 0x5A	; 90
    1254:	31 05       	cpc	r19, r1
    1256:	b9 f7       	brne	.-18     	; 0x1246 <y_accel+0x220>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    1258:	84 e9       	ldi	r24, 0x94	; 148
    125a:	80 93 bc 00 	sts	0x00BC, r24
    125e:	91 2f       	mov	r25, r17
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	20 2f       	mov	r18, r16
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	28 2b       	or	r18, r24
    1268:	39 2b       	or	r19, r25
	dummy = i2cGetReceivedByte();	//must do a multiple byte read?
	i2cWaitForComplete();
	i2cSendStop();
	yo = yl|(yh << 8);
	return yo;
}
    126a:	c9 01       	movw	r24, r18
    126c:	1f 91       	pop	r17
    126e:	0f 91       	pop	r16
    1270:	08 95       	ret

00001272 <z_accel>:

uint16_t z_accel(void)
{	
    1272:	0f 93       	push	r16
    1274:	1f 93       	push	r17
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
    1276:	3c 9a       	sbi	0x07, 4	; 7
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    1278:	84 ea       	ldi	r24, 0xA4	; 164
    127a:	80 93 bc 00 	sts	0x00BC, r24
    127e:	20 e0       	ldi	r18, 0x00	; 0
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <z_accel+0x16>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
    1284:	2f 5f       	subi	r18, 0xFF	; 255
    1286:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    1288:	80 91 bc 00 	lds	r24, 0x00BC
    128c:	87 fd       	sbrc	r24, 7
    128e:	03 c0       	rjmp	.+6      	; 0x1296 <z_accel+0x24>
    1290:	2a 35       	cpi	r18, 0x5A	; 90
    1292:	31 05       	cpc	r19, r1
    1294:	b9 f7       	brne	.-18     	; 0x1284 <z_accel+0x12>
	uint16_t zo;
	
	//0x36 data registers
	i2cSendStart();
	i2cWaitForComplete();
	i2cSendByte(0xA6);    //write to ADXL
    1296:	86 ea       	ldi	r24, 0xA6	; 166
    1298:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
    129c:	20 e0       	ldi	r18, 0x00	; 0
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <z_accel+0x34>
		i++;
    12a2:	2f 5f       	subi	r18, 0xFF	; 255
    12a4:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    12a6:	80 91 bc 00 	lds	r24, 0x00BC
    12aa:	87 fd       	sbrc	r24, 7
    12ac:	03 c0       	rjmp	.+6      	; 0x12b4 <z_accel+0x42>
    12ae:	2a 35       	cpi	r18, 0x5A	; 90
    12b0:	31 05       	cpc	r19, r1
    12b2:	b9 f7       	brne	.-18     	; 0x12a2 <z_accel+0x30>
	i2cWaitForComplete();
	i2cSendByte(0x36);    //Z0 data register
    12b4:	86 e3       	ldi	r24, 0x36	; 54
    12b6:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <z_accel+0x52>
		i++;
    12c0:	2f 5f       	subi	r18, 0xFF	; 255
    12c2:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    12c4:	80 91 bc 00 	lds	r24, 0x00BC
    12c8:	87 fd       	sbrc	r24, 7
    12ca:	03 c0       	rjmp	.+6      	; 0x12d2 <z_accel+0x60>
    12cc:	2a 35       	cpi	r18, 0x5A	; 90
    12ce:	31 05       	cpc	r19, r1
    12d0:	b9 f7       	brne	.-18     	; 0x12c0 <z_accel+0x4e>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    12d2:	84 e9       	ldi	r24, 0x94	; 148
    12d4:	80 93 bc 00 	sts	0x00BC, r24
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
    12d8:	3c 9a       	sbi	0x07, 4	; 7
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    12da:	84 ea       	ldi	r24, 0xA4	; 164
    12dc:	80 93 bc 00 	sts	0x00BC, r24
    12e0:	20 e0       	ldi	r18, 0x00	; 0
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <z_accel+0x78>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
    12e6:	2f 5f       	subi	r18, 0xFF	; 255
    12e8:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    12ea:	80 91 bc 00 	lds	r24, 0x00BC
    12ee:	87 fd       	sbrc	r24, 7
    12f0:	03 c0       	rjmp	.+6      	; 0x12f8 <z_accel+0x86>
    12f2:	2a 35       	cpi	r18, 0x5A	; 90
    12f4:	31 05       	cpc	r19, r1
    12f6:	b9 f7       	brne	.-18     	; 0x12e6 <z_accel+0x74>
	
	i2cSendStop();		 //repeat start
	i2cSendStart();

	i2cWaitForComplete();
	i2cSendByte(0xA7);    //read from ADXL
    12f8:	87 ea       	ldi	r24, 0xA7	; 167
    12fa:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
    12fe:	20 e0       	ldi	r18, 0x00	; 0
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <z_accel+0x96>
		i++;
    1304:	2f 5f       	subi	r18, 0xFF	; 255
    1306:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    1308:	80 91 bc 00 	lds	r24, 0x00BC
    130c:	87 fd       	sbrc	r24, 7
    130e:	03 c0       	rjmp	.+6      	; 0x1316 <z_accel+0xa4>
    1310:	2a 35       	cpi	r18, 0x5A	; 90
    1312:	31 05       	cpc	r19, r1
    1314:	b9 f7       	brne	.-18     	; 0x1304 <z_accel+0x92>
	i2cWaitForComplete();
	i2cReceiveByte(TRUE);
    1316:	8f ef       	ldi	r24, 0xFF	; 255
    1318:	0e 94 f7 00 	call	0x1ee	; 0x1ee <i2cReceiveByte>
    131c:	20 e0       	ldi	r18, 0x00	; 0
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <z_accel+0xb4>
		i++;
    1322:	2f 5f       	subi	r18, 0xFF	; 255
    1324:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    1326:	80 91 bc 00 	lds	r24, 0x00BC
    132a:	87 fd       	sbrc	r24, 7
    132c:	03 c0       	rjmp	.+6      	; 0x1334 <z_accel+0xc2>
    132e:	2a 35       	cpi	r18, 0x5A	; 90
    1330:	31 05       	cpc	r19, r1
    1332:	b9 f7       	brne	.-18     	; 0x1322 <z_accel+0xb0>
}

unsigned char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
    1334:	00 91 bb 00 	lds	r16, 0x00BB
    1338:	20 e0       	ldi	r18, 0x00	; 0
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <z_accel+0xd0>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
    133e:	2f 5f       	subi	r18, 0xFF	; 255
    1340:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    1342:	80 91 bc 00 	lds	r24, 0x00BC
    1346:	87 fd       	sbrc	r24, 7
    1348:	03 c0       	rjmp	.+6      	; 0x1350 <z_accel+0xde>
    134a:	2a 35       	cpi	r18, 0x5A	; 90
    134c:	31 05       	cpc	r19, r1
    134e:	b9 f7       	brne	.-18     	; 0x133e <z_accel+0xcc>
	i2cWaitForComplete();
	zl = i2cGetReceivedByte();	//z low byte
	i2cWaitForComplete();
	i2cReceiveByte(FALSE);
    1350:	80 e0       	ldi	r24, 0x00	; 0
    1352:	0e 94 f7 00 	call	0x1ee	; 0x1ee <i2cReceiveByte>
    1356:	20 e0       	ldi	r18, 0x00	; 0
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	02 c0       	rjmp	.+4      	; 0x1360 <z_accel+0xee>
		i++;
    135c:	2f 5f       	subi	r18, 0xFF	; 255
    135e:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    1360:	80 91 bc 00 	lds	r24, 0x00BC
    1364:	87 fd       	sbrc	r24, 7
    1366:	03 c0       	rjmp	.+6      	; 0x136e <z_accel+0xfc>
    1368:	2a 35       	cpi	r18, 0x5A	; 90
    136a:	31 05       	cpc	r19, r1
    136c:	b9 f7       	brne	.-18     	; 0x135c <z_accel+0xea>
}

unsigned char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
    136e:	80 91 bb 00 	lds	r24, 0x00BB
    1372:	20 e0       	ldi	r18, 0x00	; 0
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	02 c0       	rjmp	.+4      	; 0x137c <z_accel+0x10a>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
    1378:	2f 5f       	subi	r18, 0xFF	; 255
    137a:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    137c:	80 91 bc 00 	lds	r24, 0x00BC
    1380:	87 fd       	sbrc	r24, 7
    1382:	03 c0       	rjmp	.+6      	; 0x138a <z_accel+0x118>
    1384:	2a 35       	cpi	r18, 0x5A	; 90
    1386:	31 05       	cpc	r19, r1
    1388:	b9 f7       	brne	.-18     	; 0x1378 <z_accel+0x106>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    138a:	84 e9       	ldi	r24, 0x94	; 148
    138c:	80 93 bc 00 	sts	0x00BC, r24
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
    1390:	3c 9a       	sbi	0x07, 4	; 7
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    1392:	84 ea       	ldi	r24, 0xA4	; 164
    1394:	80 93 bc 00 	sts	0x00BC, r24
    1398:	20 e0       	ldi	r18, 0x00	; 0
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <z_accel+0x130>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
    139e:	2f 5f       	subi	r18, 0xFF	; 255
    13a0:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    13a2:	80 91 bc 00 	lds	r24, 0x00BC
    13a6:	87 fd       	sbrc	r24, 7
    13a8:	03 c0       	rjmp	.+6      	; 0x13b0 <z_accel+0x13e>
    13aa:	2a 35       	cpi	r18, 0x5A	; 90
    13ac:	31 05       	cpc	r19, r1
    13ae:	b9 f7       	brne	.-18     	; 0x139e <z_accel+0x12c>
	i2cSendStop();	
	
	//0x37 data registers
	i2cSendStart();
	i2cWaitForComplete();
	i2cSendByte(0xA6);    //write to ADXL
    13b0:	86 ea       	ldi	r24, 0xA6	; 166
    13b2:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <z_accel+0x14e>
		i++;
    13bc:	2f 5f       	subi	r18, 0xFF	; 255
    13be:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    13c0:	80 91 bc 00 	lds	r24, 0x00BC
    13c4:	87 fd       	sbrc	r24, 7
    13c6:	03 c0       	rjmp	.+6      	; 0x13ce <z_accel+0x15c>
    13c8:	2a 35       	cpi	r18, 0x5A	; 90
    13ca:	31 05       	cpc	r19, r1
    13cc:	b9 f7       	brne	.-18     	; 0x13bc <z_accel+0x14a>
	i2cWaitForComplete();
	i2cSendByte(0x37);    //Z1 data register
    13ce:	87 e3       	ldi	r24, 0x37	; 55
    13d0:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
    13d4:	20 e0       	ldi	r18, 0x00	; 0
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <z_accel+0x16c>
		i++;
    13da:	2f 5f       	subi	r18, 0xFF	; 255
    13dc:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    13de:	80 91 bc 00 	lds	r24, 0x00BC
    13e2:	87 fd       	sbrc	r24, 7
    13e4:	03 c0       	rjmp	.+6      	; 0x13ec <z_accel+0x17a>
    13e6:	2a 35       	cpi	r18, 0x5A	; 90
    13e8:	31 05       	cpc	r19, r1
    13ea:	b9 f7       	brne	.-18     	; 0x13da <z_accel+0x168>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    13ec:	84 e9       	ldi	r24, 0x94	; 148
    13ee:	80 93 bc 00 	sts	0x00BC, r24
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
    13f2:	3c 9a       	sbi	0x07, 4	; 7
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    13f4:	84 ea       	ldi	r24, 0xA4	; 164
    13f6:	80 93 bc 00 	sts	0x00BC, r24
    13fa:	20 e0       	ldi	r18, 0x00	; 0
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <z_accel+0x192>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
    1400:	2f 5f       	subi	r18, 0xFF	; 255
    1402:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    1404:	80 91 bc 00 	lds	r24, 0x00BC
    1408:	87 fd       	sbrc	r24, 7
    140a:	03 c0       	rjmp	.+6      	; 0x1412 <z_accel+0x1a0>
    140c:	2a 35       	cpi	r18, 0x5A	; 90
    140e:	31 05       	cpc	r19, r1
    1410:	b9 f7       	brne	.-18     	; 0x1400 <z_accel+0x18e>
	
	i2cSendStop();		 //repeat start
	i2cSendStart();

	i2cWaitForComplete();
	i2cSendByte(0xA7);    //read from ADXL
    1412:	87 ea       	ldi	r24, 0xA7	; 167
    1414:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
    1418:	20 e0       	ldi	r18, 0x00	; 0
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <z_accel+0x1b0>
		i++;
    141e:	2f 5f       	subi	r18, 0xFF	; 255
    1420:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    1422:	80 91 bc 00 	lds	r24, 0x00BC
    1426:	87 fd       	sbrc	r24, 7
    1428:	03 c0       	rjmp	.+6      	; 0x1430 <z_accel+0x1be>
    142a:	2a 35       	cpi	r18, 0x5A	; 90
    142c:	31 05       	cpc	r19, r1
    142e:	b9 f7       	brne	.-18     	; 0x141e <z_accel+0x1ac>
	i2cWaitForComplete();
	i2cReceiveByte(TRUE);
    1430:	8f ef       	ldi	r24, 0xFF	; 255
    1432:	0e 94 f7 00 	call	0x1ee	; 0x1ee <i2cReceiveByte>
    1436:	20 e0       	ldi	r18, 0x00	; 0
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <z_accel+0x1ce>
		i++;
    143c:	2f 5f       	subi	r18, 0xFF	; 255
    143e:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    1440:	80 91 bc 00 	lds	r24, 0x00BC
    1444:	87 fd       	sbrc	r24, 7
    1446:	03 c0       	rjmp	.+6      	; 0x144e <z_accel+0x1dc>
    1448:	2a 35       	cpi	r18, 0x5A	; 90
    144a:	31 05       	cpc	r19, r1
    144c:	b9 f7       	brne	.-18     	; 0x143c <z_accel+0x1ca>
}

unsigned char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
    144e:	10 91 bb 00 	lds	r17, 0x00BB
    1452:	20 e0       	ldi	r18, 0x00	; 0
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	02 c0       	rjmp	.+4      	; 0x145c <z_accel+0x1ea>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
    1458:	2f 5f       	subi	r18, 0xFF	; 255
    145a:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    145c:	80 91 bc 00 	lds	r24, 0x00BC
    1460:	87 fd       	sbrc	r24, 7
    1462:	03 c0       	rjmp	.+6      	; 0x146a <z_accel+0x1f8>
    1464:	2a 35       	cpi	r18, 0x5A	; 90
    1466:	31 05       	cpc	r19, r1
    1468:	b9 f7       	brne	.-18     	; 0x1458 <z_accel+0x1e6>
	i2cWaitForComplete();
	zh = i2cGetReceivedByte();	//z high byte
	i2cWaitForComplete();
	i2cReceiveByte(FALSE);
    146a:	80 e0       	ldi	r24, 0x00	; 0
    146c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <i2cReceiveByte>
    1470:	20 e0       	ldi	r18, 0x00	; 0
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	02 c0       	rjmp	.+4      	; 0x147a <z_accel+0x208>
		i++;
    1476:	2f 5f       	subi	r18, 0xFF	; 255
    1478:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    147a:	80 91 bc 00 	lds	r24, 0x00BC
    147e:	87 fd       	sbrc	r24, 7
    1480:	03 c0       	rjmp	.+6      	; 0x1488 <z_accel+0x216>
    1482:	2a 35       	cpi	r18, 0x5A	; 90
    1484:	31 05       	cpc	r19, r1
    1486:	b9 f7       	brne	.-18     	; 0x1476 <z_accel+0x204>
}

unsigned char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
    1488:	80 91 bb 00 	lds	r24, 0x00BB
    148c:	20 e0       	ldi	r18, 0x00	; 0
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <z_accel+0x224>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
    1492:	2f 5f       	subi	r18, 0xFF	; 255
    1494:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    1496:	80 91 bc 00 	lds	r24, 0x00BC
    149a:	87 fd       	sbrc	r24, 7
    149c:	03 c0       	rjmp	.+6      	; 0x14a4 <z_accel+0x232>
    149e:	2a 35       	cpi	r18, 0x5A	; 90
    14a0:	31 05       	cpc	r19, r1
    14a2:	b9 f7       	brne	.-18     	; 0x1492 <z_accel+0x220>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    14a4:	84 e9       	ldi	r24, 0x94	; 148
    14a6:	80 93 bc 00 	sts	0x00BC, r24
    14aa:	91 2f       	mov	r25, r17
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	20 2f       	mov	r18, r16
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	28 2b       	or	r18, r24
    14b4:	39 2b       	or	r19, r25
	dummy = i2cGetReceivedByte();	//must do a multiple byte read?
	i2cWaitForComplete();
	i2cSendStop();
	zo = zl|(zh << 8);	
	return zo;
}
    14b6:	c9 01       	movw	r24, r18
    14b8:	1f 91       	pop	r17
    14ba:	0f 91       	pop	r16
    14bc:	08 95       	ret

000014be <UART_Init>:
unsigned int UART_Init(unsigned int ubrr)
{
	int ubrr_new;
	// set baud rate
	ubrr_new = ubrr; 
	UBRR0H = ubrr_new>>8;
    14be:	49 2f       	mov	r20, r25
    14c0:	55 27       	eor	r21, r21
    14c2:	47 fd       	sbrc	r20, 7
    14c4:	5a 95       	dec	r21
    14c6:	40 93 c5 00 	sts	0x00C5, r20
	UBRR0L = ubrr_new;
    14ca:	80 93 c4 00 	sts	0x00C4, r24
	
	// Enable receiver and transmitter 
	UCSR0A = (1<<U2X0); //double the speed
    14ce:	22 e0       	ldi	r18, 0x02	; 2
    14d0:	20 93 c0 00 	sts	0x00C0, r18
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    14d4:	28 e1       	ldi	r18, 0x18	; 24
    14d6:	20 93 c1 00 	sts	0x00C1, r18
	
	// Set frame format: 8 bit, no parity, 1 stop bit,   
	UCSR0C = (1<<UCSZ00)|(1<<UCSZ01);
    14da:	26 e0       	ldi	r18, 0x06	; 6
    14dc:	20 93 c2 00 	sts	0x00C2, r18
	
	stdout = &mystdout; //Required for printf init
    14e0:	26 e9       	ldi	r18, 0x96	; 150
    14e2:	35 e0       	ldi	r19, 0x05	; 5
    14e4:	30 93 b1 05 	sts	0x05B1, r19
    14e8:	20 93 b0 05 	sts	0x05B0, r18
	return(ubrr);
}
    14ec:	08 95       	ret

000014ee <check_baud>:
//		Data=read_from_EEPROM(0);
unsigned char read_from_EEPROM(unsigned int Address)
{
	//Interrupts are globally disabled!
	
	while(EECR & (1<<EEPE));	//Wait for last Write to complete
    14ee:	f9 99       	sbic	0x1f, 1	; 31
    14f0:	fe cf       	rjmp	.-4      	; 0x14ee <check_baud>
	EEAR = Address;				//Assign the Address Register with "Address"
    14f2:	82 e0       	ldi	r24, 0x02	; 2
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	92 bd       	out	0x22, r25	; 34
    14f8:	81 bd       	out	0x21, r24	; 33
	EECR |= (1<<EERE); 			//Start Read by writing to EER
    14fa:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR;				//EEPROM Data is returned
    14fc:	80 b5       	in	r24, 0x20	; 32
	config_menu();
}

void check_baud(void)
{
	if(read_from_EEPROM(2) == 99) //check to see if the baud rate has been changed by user
    14fe:	83 36       	cpi	r24, 0x63	; 99
    1500:	09 f0       	breq	.+2      	; 0x1504 <check_baud+0x16>
    1502:	83 c0       	rjmp	.+262    	; 0x160a <check_baud+0x11c>
//		Data=read_from_EEPROM(0);
unsigned char read_from_EEPROM(unsigned int Address)
{
	//Interrupts are globally disabled!
	
	while(EECR & (1<<EEPE));	//Wait for last Write to complete
    1504:	f9 99       	sbic	0x1f, 1	; 31
    1506:	fe cf       	rjmp	.-4      	; 0x1504 <check_baud+0x16>
	EEAR = Address;				//Assign the Address Register with "Address"
    1508:	83 e0       	ldi	r24, 0x03	; 3
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	92 bd       	out	0x22, r25	; 34
    150e:	81 bd       	out	0x21, r24	; 33
	EECR |= (1<<EERE); 			//Start Read by writing to EER
    1510:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR;				//EEPROM Data is returned
    1512:	80 b5       	in	r24, 0x20	; 32
void check_baud(void)
{
	if(read_from_EEPROM(2) == 99) //check to see if the baud rate has been changed by user
	{
		//read baud rate selection
		if(read_from_EEPROM(3) == 4)
    1514:	84 30       	cpi	r24, 0x04	; 4
    1516:	81 f4       	brne	.+32     	; 0x1538 <check_baud+0x4a>
		{
			baud = 4800; 
    1518:	80 ec       	ldi	r24, 0xC0	; 192
    151a:	92 e1       	ldi	r25, 0x12	; 18
    151c:	a0 e0       	ldi	r26, 0x00	; 0
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	80 93 a4 05 	sts	0x05A4, r24
    1524:	90 93 a5 05 	sts	0x05A5, r25
    1528:	a0 93 a6 05 	sts	0x05A6, r26
    152c:	b0 93 a7 05 	sts	0x05A7, r27
			UART_Init(207);
    1530:	8f ec       	ldi	r24, 0xCF	; 207
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	0e 94 5f 0a 	call	0x14be	; 0x14be <UART_Init>
//		Data=read_from_EEPROM(0);
unsigned char read_from_EEPROM(unsigned int Address)
{
	//Interrupts are globally disabled!
	
	while(EECR & (1<<EEPE));	//Wait for last Write to complete
    1538:	f9 99       	sbic	0x1f, 1	; 31
    153a:	fe cf       	rjmp	.-4      	; 0x1538 <check_baud+0x4a>
	EEAR = Address;				//Assign the Address Register with "Address"
    153c:	84 e0       	ldi	r24, 0x04	; 4
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	92 bd       	out	0x22, r25	; 34
    1542:	81 bd       	out	0x21, r24	; 33
	EECR |= (1<<EERE); 			//Start Read by writing to EER
    1544:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR;				//EEPROM Data is returned
    1546:	80 b5       	in	r24, 0x20	; 32
		if(read_from_EEPROM(3) == 4)
		{
			baud = 4800; 
			UART_Init(207);
		}
		if(read_from_EEPROM(4) == 9)
    1548:	89 30       	cpi	r24, 0x09	; 9
    154a:	81 f4       	brne	.+32     	; 0x156c <check_baud+0x7e>
		{
			baud = 9600; 
    154c:	80 e8       	ldi	r24, 0x80	; 128
    154e:	95 e2       	ldi	r25, 0x25	; 37
    1550:	a0 e0       	ldi	r26, 0x00	; 0
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	80 93 a4 05 	sts	0x05A4, r24
    1558:	90 93 a5 05 	sts	0x05A5, r25
    155c:	a0 93 a6 05 	sts	0x05A6, r26
    1560:	b0 93 a7 05 	sts	0x05A7, r27
			UART_Init(103);
    1564:	87 e6       	ldi	r24, 0x67	; 103
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	0e 94 5f 0a 	call	0x14be	; 0x14be <UART_Init>
//		Data=read_from_EEPROM(0);
unsigned char read_from_EEPROM(unsigned int Address)
{
	//Interrupts are globally disabled!
	
	while(EECR & (1<<EEPE));	//Wait for last Write to complete
    156c:	f9 99       	sbic	0x1f, 1	; 31
    156e:	fe cf       	rjmp	.-4      	; 0x156c <check_baud+0x7e>
	EEAR = Address;				//Assign the Address Register with "Address"
    1570:	85 e0       	ldi	r24, 0x05	; 5
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	92 bd       	out	0x22, r25	; 34
    1576:	81 bd       	out	0x21, r24	; 33
	EECR |= (1<<EERE); 			//Start Read by writing to EER
    1578:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR;				//EEPROM Data is returned
    157a:	80 b5       	in	r24, 0x20	; 32
		if(read_from_EEPROM(4) == 9)
		{
			baud = 9600; 
			UART_Init(103);
		}
		if(read_from_EEPROM(5) == 19)
    157c:	83 31       	cpi	r24, 0x13	; 19
    157e:	81 f4       	brne	.+32     	; 0x15a0 <check_baud+0xb2>
		{
			baud = 19200; 
    1580:	80 e0       	ldi	r24, 0x00	; 0
    1582:	9b e4       	ldi	r25, 0x4B	; 75
    1584:	a0 e0       	ldi	r26, 0x00	; 0
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	80 93 a4 05 	sts	0x05A4, r24
    158c:	90 93 a5 05 	sts	0x05A5, r25
    1590:	a0 93 a6 05 	sts	0x05A6, r26
    1594:	b0 93 a7 05 	sts	0x05A7, r27
			UART_Init(51);
    1598:	83 e3       	ldi	r24, 0x33	; 51
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	0e 94 5f 0a 	call	0x14be	; 0x14be <UART_Init>
//		Data=read_from_EEPROM(0);
unsigned char read_from_EEPROM(unsigned int Address)
{
	//Interrupts are globally disabled!
	
	while(EECR & (1<<EEPE));	//Wait for last Write to complete
    15a0:	f9 99       	sbic	0x1f, 1	; 31
    15a2:	fe cf       	rjmp	.-4      	; 0x15a0 <check_baud+0xb2>
	EEAR = Address;				//Assign the Address Register with "Address"
    15a4:	86 e0       	ldi	r24, 0x06	; 6
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	92 bd       	out	0x22, r25	; 34
    15aa:	81 bd       	out	0x21, r24	; 33
	EECR |= (1<<EERE); 			//Start Read by writing to EER
    15ac:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR;				//EEPROM Data is returned
    15ae:	80 b5       	in	r24, 0x20	; 32
		if(read_from_EEPROM(5) == 19)
		{
			baud = 19200; 
			UART_Init(51);
		}
		if(read_from_EEPROM(6) == 38)
    15b0:	86 32       	cpi	r24, 0x26	; 38
    15b2:	81 f4       	brne	.+32     	; 0x15d4 <check_baud+0xe6>
		{
			baud = 38400; 
    15b4:	80 e0       	ldi	r24, 0x00	; 0
    15b6:	96 e9       	ldi	r25, 0x96	; 150
    15b8:	a0 e0       	ldi	r26, 0x00	; 0
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	80 93 a4 05 	sts	0x05A4, r24
    15c0:	90 93 a5 05 	sts	0x05A5, r25
    15c4:	a0 93 a6 05 	sts	0x05A6, r26
    15c8:	b0 93 a7 05 	sts	0x05A7, r27
			UART_Init(25);
    15cc:	89 e1       	ldi	r24, 0x19	; 25
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	0e 94 5f 0a 	call	0x14be	; 0x14be <UART_Init>
//		Data=read_from_EEPROM(0);
unsigned char read_from_EEPROM(unsigned int Address)
{
	//Interrupts are globally disabled!
	
	while(EECR & (1<<EEPE));	//Wait for last Write to complete
    15d4:	f9 99       	sbic	0x1f, 1	; 31
    15d6:	fe cf       	rjmp	.-4      	; 0x15d4 <check_baud+0xe6>
	EEAR = Address;				//Assign the Address Register with "Address"
    15d8:	87 e0       	ldi	r24, 0x07	; 7
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	92 bd       	out	0x22, r25	; 34
    15de:	81 bd       	out	0x21, r24	; 33
	EECR |= (1<<EERE); 			//Start Read by writing to EER
    15e0:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR;				//EEPROM Data is returned
    15e2:	80 b5       	in	r24, 0x20	; 32
		if(read_from_EEPROM(6) == 38)
		{
			baud = 38400; 
			UART_Init(25);
		}
		if(read_from_EEPROM(7) == 57)
    15e4:	89 33       	cpi	r24, 0x39	; 57
    15e6:	09 f5       	brne	.+66     	; 0x162a <check_baud+0x13c>
		{
			baud = 57600; 
    15e8:	80 e0       	ldi	r24, 0x00	; 0
    15ea:	91 ee       	ldi	r25, 0xE1	; 225
    15ec:	a0 e0       	ldi	r26, 0x00	; 0
    15ee:	b0 e0       	ldi	r27, 0x00	; 0
    15f0:	80 93 a4 05 	sts	0x05A4, r24
    15f4:	90 93 a5 05 	sts	0x05A5, r25
    15f8:	a0 93 a6 05 	sts	0x05A6, r26
    15fc:	b0 93 a7 05 	sts	0x05A7, r27
			UART_Init(16);
    1600:	80 e1       	ldi	r24, 0x10	; 16
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	0e 94 5f 0a 	call	0x14be	; 0x14be <UART_Init>
    1608:	08 95       	ret
		}
	} 
	else
	{
		//57600bps Default UART
		UART_Init(16);
    160a:	80 e1       	ldi	r24, 0x10	; 16
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	0e 94 5f 0a 	call	0x14be	; 0x14be <UART_Init>
		baud = 57600;
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	91 ee       	ldi	r25, 0xE1	; 225
    1616:	a0 e0       	ldi	r26, 0x00	; 0
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	80 93 a4 05 	sts	0x05A4, r24
    161e:	90 93 a5 05 	sts	0x05A5, r25
    1622:	a0 93 a6 05 	sts	0x05A6, r26
    1626:	b0 93 a7 05 	sts	0x05A7, r27
    162a:	08 95       	ret

0000162c <init>:
 *********************/
 
void init (void)
{
    //1 = output, 0 = input
	DDRB = 0b01100000; //PORTB4, B5 output for stat LED
    162c:	80 e6       	ldi	r24, 0x60	; 96
    162e:	84 b9       	out	0x04, r24	; 4
    DDRC = 0b00010000; //PORTC4 (SDA), PORTC5 (SCL), PORTC all others are inputs
    1630:	80 e1       	ldi	r24, 0x10	; 16
    1632:	87 b9       	out	0x07, r24	; 7
    DDRD = 0b00000010; //PORTD (TX output on PD1)
    1634:	82 e0       	ldi	r24, 0x02	; 2
    1636:	8a b9       	out	0x0a, r24	; 10
	PORTC = 0b00110000; //pullups on the I2C bus
    1638:	80 e3       	ldi	r24, 0x30	; 48
    163a:	88 b9       	out	0x08, r24	; 8
	
	cbi(PORTB, 5);
    163c:	2d 98       	cbi	0x05, 5	; 5
	
	i2cInit();
    163e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <i2cInit>
	accelerometer_init();
    1642:	0e 94 28 01 	call	0x250	; 0x250 <accelerometer_init>
	magnetometer_init();
    1646:	0e 94 72 02 	call	0x4e4	; 0x4e4 <magnetometer_init>
	gyro_init();
    164a:	0e 94 a9 01 	call	0x352	; 0x352 <gyro_init>
	
	check_baud();
    164e:	0e 94 77 0a 	call	0x14ee	; 0x14ee <check_baud>
}
    1652:	08 95       	ret

00001654 <uart_getchar>:
	return(ubrr);
}

uint8_t uart_getchar(void)
{
    while( !(UCSR0A & (1<<RXC0)) );
    1654:	80 91 c0 00 	lds	r24, 0x00C0
    1658:	87 ff       	sbrs	r24, 7
    165a:	fc cf       	rjmp	.-8      	; 0x1654 <uart_getchar>
    return(UDR0);
    165c:	80 91 c6 00 	lds	r24, 0x00C6
}
    1660:	08 95       	ret

00001662 <uart_putchar>:

static int uart_putchar(char c, FILE *stream)
{
    1662:	1f 93       	push	r17
    1664:	18 2f       	mov	r17, r24
    if (c == '\n') uart_putchar('\r', stream);
    1666:	8a 30       	cpi	r24, 0x0A	; 10
    1668:	19 f4       	brne	.+6      	; 0x1670 <uart_putchar+0xe>
    166a:	8d e0       	ldi	r24, 0x0D	; 13
    166c:	0e 94 31 0b 	call	0x1662	; 0x1662 <uart_putchar>
  
    loop_until_bit_is_set(UCSR0A, UDRE0);
    1670:	80 91 c0 00 	lds	r24, 0x00C0
    1674:	85 ff       	sbrs	r24, 5
    1676:	fc cf       	rjmp	.-8      	; 0x1670 <uart_putchar+0xe>
    UDR0 = c;
    1678:	10 93 c6 00 	sts	0x00C6, r17
    
    return 0;
}
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	1f 91       	pop	r17
    1682:	08 95       	ret

00001684 <write_to_EEPROM>:
//Usage: write_to_EEPROM(0, 'A');
void write_to_EEPROM(unsigned int Address, unsigned char Data)
{
    //Interrupts are globally disabled!
	
	while(EECR & (1<<EEPE)); //Wait for last Write to complete
    1684:	f9 99       	sbic	0x1f, 1	; 31
    1686:	fe cf       	rjmp	.-4      	; 0x1684 <write_to_EEPROM>
	//May need to wait for Flash to complete also!
	EEAR = Address;			//Assign the Address Register with "Address"
    1688:	92 bd       	out	0x22, r25	; 34
    168a:	81 bd       	out	0x21, r24	; 33
	EEDR=Data;				//Put "Data" in the Data Register
    168c:	60 bd       	out	0x20, r22	; 32
	EECR |= (1<<EEMPE); 	//Write to Master Write Enable
    168e:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE);  	//Start Write by setting EE Write Enable
    1690:	f9 9a       	sbi	0x1f, 1	; 31
}
    1692:	08 95       	ret

00001694 <read_from_EEPROM>:
//		Data=read_from_EEPROM(0);
unsigned char read_from_EEPROM(unsigned int Address)
{
	//Interrupts are globally disabled!
	
	while(EECR & (1<<EEPE));	//Wait for last Write to complete
    1694:	f9 99       	sbic	0x1f, 1	; 31
    1696:	fe cf       	rjmp	.-4      	; 0x1694 <read_from_EEPROM>
	EEAR = Address;				//Assign the Address Register with "Address"
    1698:	92 bd       	out	0x22, r25	; 34
    169a:	81 bd       	out	0x21, r24	; 33
	EECR |= (1<<EERE); 			//Start Read by writing to EER
    169c:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR;				//EEPROM Data is returned
    169e:	80 b5       	in	r24, 0x20	; 32
}
    16a0:	08 95       	ret

000016a2 <print_itg3200>:
} 

void print_itg3200(void)
{
	
	printf("x= %4d, ", x_gyro());
    16a2:	0e 94 32 04 	call	0x864	; 0x864 <x_gyro>
    16a6:	00 d0       	rcall	.+0      	; 0x16a8 <print_itg3200+0x6>
    16a8:	00 d0       	rcall	.+0      	; 0x16aa <print_itg3200+0x8>
    16aa:	20 e0       	ldi	r18, 0x00	; 0
    16ac:	31 e0       	ldi	r19, 0x01	; 1
    16ae:	ed b7       	in	r30, 0x3d	; 61
    16b0:	fe b7       	in	r31, 0x3e	; 62
    16b2:	32 83       	std	Z+2, r19	; 0x02
    16b4:	21 83       	std	Z+1, r18	; 0x01
    16b6:	94 83       	std	Z+4, r25	; 0x04
    16b8:	83 83       	std	Z+3, r24	; 0x03
    16ba:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
	printf("y= %4d, ", y_gyro());
    16be:	0f 90       	pop	r0
    16c0:	0f 90       	pop	r0
    16c2:	0f 90       	pop	r0
    16c4:	0f 90       	pop	r0
    16c6:	0e 94 1b 05 	call	0xa36	; 0xa36 <y_gyro>
    16ca:	00 d0       	rcall	.+0      	; 0x16cc <print_itg3200+0x2a>
    16cc:	00 d0       	rcall	.+0      	; 0x16ce <print_itg3200+0x2c>
    16ce:	29 e0       	ldi	r18, 0x09	; 9
    16d0:	31 e0       	ldi	r19, 0x01	; 1
    16d2:	ed b7       	in	r30, 0x3d	; 61
    16d4:	fe b7       	in	r31, 0x3e	; 62
    16d6:	32 83       	std	Z+2, r19	; 0x02
    16d8:	21 83       	std	Z+1, r18	; 0x01
    16da:	94 83       	std	Z+4, r25	; 0x04
    16dc:	83 83       	std	Z+3, r24	; 0x03
    16de:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
	printf("z= %4d\n\r", z_gyro());
    16e2:	0f 90       	pop	r0
    16e4:	0f 90       	pop	r0
    16e6:	0f 90       	pop	r0
    16e8:	0f 90       	pop	r0
    16ea:	0e 94 04 06 	call	0xc08	; 0xc08 <z_gyro>
    16ee:	00 d0       	rcall	.+0      	; 0x16f0 <print_itg3200+0x4e>
    16f0:	00 d0       	rcall	.+0      	; 0x16f2 <print_itg3200+0x50>
    16f2:	22 e1       	ldi	r18, 0x12	; 18
    16f4:	31 e0       	ldi	r19, 0x01	; 1
    16f6:	ed b7       	in	r30, 0x3d	; 61
    16f8:	fe b7       	in	r31, 0x3e	; 62
    16fa:	32 83       	std	Z+2, r19	; 0x02
    16fc:	21 83       	std	Z+1, r18	; 0x01
    16fe:	94 83       	std	Z+4, r25	; 0x04
    1700:	83 83       	std	Z+3, r24	; 0x03
    1702:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>

	delay_ms(20);
    1706:	0f 90       	pop	r0
    1708:	0f 90       	pop	r0
    170a:	0f 90       	pop	r0
    170c:	0f 90       	pop	r0
    170e:	84 e1       	ldi	r24, 0x14	; 20
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	0e 94 0b 01 	call	0x216	; 0x216 <delay_ms>
}
    1716:	08 95       	ret

00001718 <print_hmc5883>:
	printf("[ctrl-z] ctrl+z at anytime will toggle between raw output and the menu\n\r");
}

void print_hmc5883(void)
{
	magnetometer();
    1718:	0e 94 33 03 	call	0x666	; 0x666 <magnetometer>
	printf("x=%4d, ", x_mag);
    171c:	00 d0       	rcall	.+0      	; 0x171e <print_hmc5883+0x6>
    171e:	00 d0       	rcall	.+0      	; 0x1720 <print_hmc5883+0x8>
    1720:	8b e1       	ldi	r24, 0x1B	; 27
    1722:	91 e0       	ldi	r25, 0x01	; 1
    1724:	ed b7       	in	r30, 0x3d	; 61
    1726:	fe b7       	in	r31, 0x3e	; 62
    1728:	92 83       	std	Z+2, r25	; 0x02
    172a:	81 83       	std	Z+1, r24	; 0x01
    172c:	80 91 ac 05 	lds	r24, 0x05AC
    1730:	90 91 ad 05 	lds	r25, 0x05AD
    1734:	94 83       	std	Z+4, r25	; 0x04
    1736:	83 83       	std	Z+3, r24	; 0x03
    1738:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
	printf("y=%4d, ", y_mag);
    173c:	83 e2       	ldi	r24, 0x23	; 35
    173e:	91 e0       	ldi	r25, 0x01	; 1
    1740:	ed b7       	in	r30, 0x3d	; 61
    1742:	fe b7       	in	r31, 0x3e	; 62
    1744:	92 83       	std	Z+2, r25	; 0x02
    1746:	81 83       	std	Z+1, r24	; 0x01
    1748:	80 91 aa 05 	lds	r24, 0x05AA
    174c:	90 91 ab 05 	lds	r25, 0x05AB
    1750:	94 83       	std	Z+4, r25	; 0x04
    1752:	83 83       	std	Z+3, r24	; 0x03
    1754:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
	printf("z=%d\n\r", z_mag);
    1758:	8b e2       	ldi	r24, 0x2B	; 43
    175a:	91 e0       	ldi	r25, 0x01	; 1
    175c:	ed b7       	in	r30, 0x3d	; 61
    175e:	fe b7       	in	r31, 0x3e	; 62
    1760:	92 83       	std	Z+2, r25	; 0x02
    1762:	81 83       	std	Z+1, r24	; 0x01
    1764:	80 91 a8 05 	lds	r24, 0x05A8
    1768:	90 91 a9 05 	lds	r25, 0x05A9
    176c:	94 83       	std	Z+4, r25	; 0x04
    176e:	83 83       	std	Z+3, r24	; 0x03
    1770:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
    1774:	0f 90       	pop	r0
    1776:	0f 90       	pop	r0
    1778:	0f 90       	pop	r0
    177a:	0f 90       	pop	r0
}
    177c:	08 95       	ret

0000177e <help>:
	i2cSendStop();
}

void help(void)
{
	printf("HELP MENU\n\r");
    177e:	00 d0       	rcall	.+0      	; 0x1780 <help+0x2>
    1780:	82 e3       	ldi	r24, 0x32	; 50
    1782:	91 e0       	ldi	r25, 0x01	; 1
    1784:	ed b7       	in	r30, 0x3d	; 61
    1786:	fe b7       	in	r31, 0x3e	; 62
    1788:	92 83       	std	Z+2, r25	; 0x02
    178a:	81 83       	std	Z+1, r24	; 0x01
    178c:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
	printf("[1] send ascii 1 to get output from the accelerometer(x,y,z). Hit any key to return to menu.\n\r");
    1790:	8e e3       	ldi	r24, 0x3E	; 62
    1792:	91 e0       	ldi	r25, 0x01	; 1
    1794:	ed b7       	in	r30, 0x3d	; 61
    1796:	fe b7       	in	r31, 0x3e	; 62
    1798:	92 83       	std	Z+2, r25	; 0x02
    179a:	81 83       	std	Z+1, r24	; 0x01
    179c:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
	printf("[2] send ascii 2 to get output from the magnetometer(x,y,z). Hit any key to return to menu.\n\r");
    17a0:	8d e9       	ldi	r24, 0x9D	; 157
    17a2:	91 e0       	ldi	r25, 0x01	; 1
    17a4:	ed b7       	in	r30, 0x3d	; 61
    17a6:	fe b7       	in	r31, 0x3e	; 62
    17a8:	92 83       	std	Z+2, r25	; 0x02
    17aa:	81 83       	std	Z+1, r24	; 0x01
    17ac:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
	printf("[3] send ascii 3 to get output from the gyroscope(x,y,z). Hit any key to return to menu.\n\r");
    17b0:	8b ef       	ldi	r24, 0xFB	; 251
    17b2:	91 e0       	ldi	r25, 0x01	; 1
    17b4:	ed b7       	in	r30, 0x3d	; 61
    17b6:	fe b7       	in	r31, 0x3e	; 62
    17b8:	92 83       	std	Z+2, r25	; 0x02
    17ba:	81 83       	std	Z+1, r24	; 0x01
    17bc:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
	printf("[4] send ascii 4 to get the raw output from all of the sensors. Hit any key to return to menu.\n\r");
    17c0:	86 e5       	ldi	r24, 0x56	; 86
    17c2:	92 e0       	ldi	r25, 0x02	; 2
    17c4:	ed b7       	in	r30, 0x3d	; 61
    17c6:	fe b7       	in	r31, 0x3e	; 62
    17c8:	92 83       	std	Z+2, r25	; 0x02
    17ca:	81 83       	std	Z+1, r24	; 0x01
    17cc:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
	printf("*** Raw format '$accelx,accely,accelz,gyrox,gyroy,gyroz,magx,magy,magz#\n\r");
    17d0:	87 eb       	ldi	r24, 0xB7	; 183
    17d2:	92 e0       	ldi	r25, 0x02	; 2
    17d4:	ed b7       	in	r30, 0x3d	; 61
    17d6:	fe b7       	in	r31, 0x3e	; 62
    17d8:	92 83       	std	Z+2, r25	; 0x02
    17da:	81 83       	std	Z+1, r24	; 0x01
    17dc:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
	printf("[5] send ascii 5 to get the 5 choices for baud rates. Reset terminal and board after change. Hit any key to return to menu.\n\r");
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	93 e0       	ldi	r25, 0x03	; 3
    17e4:	ed b7       	in	r30, 0x3d	; 61
    17e6:	fe b7       	in	r31, 0x3e	; 62
    17e8:	92 83       	std	Z+2, r25	; 0x02
    17ea:	81 83       	std	Z+1, r24	; 0x01
    17ec:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
	printf("[ctrl-p] ctrl-p tests the accelerometer and magnetometer.\n\r");
    17f0:	8f e7       	ldi	r24, 0x7F	; 127
    17f2:	93 e0       	ldi	r25, 0x03	; 3
    17f4:	ed b7       	in	r30, 0x3d	; 61
    17f6:	fe b7       	in	r31, 0x3e	; 62
    17f8:	92 83       	std	Z+2, r25	; 0x02
    17fa:	81 83       	std	Z+1, r24	; 0x01
    17fc:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
	printf("[ctrl-z] ctrl+z at anytime will toggle between raw output and the menu\n\r");
    1800:	8b eb       	ldi	r24, 0xBB	; 187
    1802:	93 e0       	ldi	r25, 0x03	; 3
    1804:	ed b7       	in	r30, 0x3d	; 61
    1806:	fe b7       	in	r31, 0x3e	; 62
    1808:	92 83       	std	Z+2, r25	; 0x02
    180a:	81 83       	std	Z+1, r24	; 0x01
    180c:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
    1810:	0f 90       	pop	r0
    1812:	0f 90       	pop	r0
}
    1814:	08 95       	ret

00001816 <print_adxl345>:

}

void print_adxl345(void)
{	
	printf("x=%4d, ", x_accel());
    1816:	0e 94 ed 06 	call	0xdda	; 0xdda <x_accel>
    181a:	00 d0       	rcall	.+0      	; 0x181c <print_adxl345+0x6>
    181c:	00 d0       	rcall	.+0      	; 0x181e <print_adxl345+0x8>
    181e:	2b e1       	ldi	r18, 0x1B	; 27
    1820:	31 e0       	ldi	r19, 0x01	; 1
    1822:	ed b7       	in	r30, 0x3d	; 61
    1824:	fe b7       	in	r31, 0x3e	; 62
    1826:	32 83       	std	Z+2, r19	; 0x02
    1828:	21 83       	std	Z+1, r18	; 0x01
    182a:	94 83       	std	Z+4, r25	; 0x04
    182c:	83 83       	std	Z+3, r24	; 0x03
    182e:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
	printf("y=%4d, ", y_accel());
    1832:	0f 90       	pop	r0
    1834:	0f 90       	pop	r0
    1836:	0f 90       	pop	r0
    1838:	0f 90       	pop	r0
    183a:	0e 94 13 08 	call	0x1026	; 0x1026 <y_accel>
    183e:	00 d0       	rcall	.+0      	; 0x1840 <print_adxl345+0x2a>
    1840:	00 d0       	rcall	.+0      	; 0x1842 <print_adxl345+0x2c>
    1842:	23 e2       	ldi	r18, 0x23	; 35
    1844:	31 e0       	ldi	r19, 0x01	; 1
    1846:	ed b7       	in	r30, 0x3d	; 61
    1848:	fe b7       	in	r31, 0x3e	; 62
    184a:	32 83       	std	Z+2, r19	; 0x02
    184c:	21 83       	std	Z+1, r18	; 0x01
    184e:	94 83       	std	Z+4, r25	; 0x04
    1850:	83 83       	std	Z+3, r24	; 0x03
    1852:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
	printf("z=%4d \n\r", z_accel());
    1856:	0f 90       	pop	r0
    1858:	0f 90       	pop	r0
    185a:	0f 90       	pop	r0
    185c:	0f 90       	pop	r0
    185e:	0e 94 39 09 	call	0x1272	; 0x1272 <z_accel>
    1862:	00 d0       	rcall	.+0      	; 0x1864 <print_adxl345+0x4e>
    1864:	00 d0       	rcall	.+0      	; 0x1866 <print_adxl345+0x50>
    1866:	24 e0       	ldi	r18, 0x04	; 4
    1868:	34 e0       	ldi	r19, 0x04	; 4
    186a:	ed b7       	in	r30, 0x3d	; 61
    186c:	fe b7       	in	r31, 0x3e	; 62
    186e:	32 83       	std	Z+2, r19	; 0x02
    1870:	21 83       	std	Z+1, r18	; 0x01
    1872:	94 83       	std	Z+4, r25	; 0x04
    1874:	83 83       	std	Z+3, r24	; 0x03
    1876:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
	delay_ms(20);
    187a:	0f 90       	pop	r0
    187c:	0f 90       	pop	r0
    187e:	0f 90       	pop	r0
    1880:	0f 90       	pop	r0
    1882:	84 e1       	ldi	r24, 0x14	; 20
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	0e 94 0b 01 	call	0x216	; 0x216 <delay_ms>
}
    188a:	08 95       	ret

0000188c <raw>:
	i2cWaitForComplete();
	i2cSendStop();
}

void raw(void)
{
    188c:	0f 93       	push	r16
    188e:	1f 93       	push	r17
	//prints the raw vaues with a '$' start and '#\n\r' end
	printf("$");
    1890:	84 e2       	ldi	r24, 0x24	; 36
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	0e 94 3d 13 	call	0x267a	; 0x267a <putchar>
	printf("%d,", x_accel());
    1898:	0e 94 ed 06 	call	0xdda	; 0xdda <x_accel>
    189c:	00 d0       	rcall	.+0      	; 0x189e <raw+0x12>
    189e:	00 d0       	rcall	.+0      	; 0x18a0 <raw+0x14>
    18a0:	0d e0       	ldi	r16, 0x0D	; 13
    18a2:	14 e0       	ldi	r17, 0x04	; 4
    18a4:	ed b7       	in	r30, 0x3d	; 61
    18a6:	fe b7       	in	r31, 0x3e	; 62
    18a8:	12 83       	std	Z+2, r17	; 0x02
    18aa:	01 83       	std	Z+1, r16	; 0x01
    18ac:	94 83       	std	Z+4, r25	; 0x04
    18ae:	83 83       	std	Z+3, r24	; 0x03
    18b0:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
	printf("%d,", y_accel());
    18b4:	0f 90       	pop	r0
    18b6:	0f 90       	pop	r0
    18b8:	0f 90       	pop	r0
    18ba:	0f 90       	pop	r0
    18bc:	0e 94 13 08 	call	0x1026	; 0x1026 <y_accel>
    18c0:	00 d0       	rcall	.+0      	; 0x18c2 <raw+0x36>
    18c2:	00 d0       	rcall	.+0      	; 0x18c4 <raw+0x38>
    18c4:	ed b7       	in	r30, 0x3d	; 61
    18c6:	fe b7       	in	r31, 0x3e	; 62
    18c8:	12 83       	std	Z+2, r17	; 0x02
    18ca:	01 83       	std	Z+1, r16	; 0x01
    18cc:	94 83       	std	Z+4, r25	; 0x04
    18ce:	83 83       	std	Z+3, r24	; 0x03
    18d0:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
	printf("%d,", z_accel());
    18d4:	0f 90       	pop	r0
    18d6:	0f 90       	pop	r0
    18d8:	0f 90       	pop	r0
    18da:	0f 90       	pop	r0
    18dc:	0e 94 39 09 	call	0x1272	; 0x1272 <z_accel>
    18e0:	00 d0       	rcall	.+0      	; 0x18e2 <raw+0x56>
    18e2:	00 d0       	rcall	.+0      	; 0x18e4 <raw+0x58>
    18e4:	ed b7       	in	r30, 0x3d	; 61
    18e6:	fe b7       	in	r31, 0x3e	; 62
    18e8:	12 83       	std	Z+2, r17	; 0x02
    18ea:	01 83       	std	Z+1, r16	; 0x01
    18ec:	94 83       	std	Z+4, r25	; 0x04
    18ee:	83 83       	std	Z+3, r24	; 0x03
    18f0:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
	printf("%d,", x_gyro());
    18f4:	0f 90       	pop	r0
    18f6:	0f 90       	pop	r0
    18f8:	0f 90       	pop	r0
    18fa:	0f 90       	pop	r0
    18fc:	0e 94 32 04 	call	0x864	; 0x864 <x_gyro>
    1900:	00 d0       	rcall	.+0      	; 0x1902 <raw+0x76>
    1902:	00 d0       	rcall	.+0      	; 0x1904 <raw+0x78>
    1904:	ed b7       	in	r30, 0x3d	; 61
    1906:	fe b7       	in	r31, 0x3e	; 62
    1908:	12 83       	std	Z+2, r17	; 0x02
    190a:	01 83       	std	Z+1, r16	; 0x01
    190c:	94 83       	std	Z+4, r25	; 0x04
    190e:	83 83       	std	Z+3, r24	; 0x03
    1910:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
	printf("%d,", y_gyro());
    1914:	0f 90       	pop	r0
    1916:	0f 90       	pop	r0
    1918:	0f 90       	pop	r0
    191a:	0f 90       	pop	r0
    191c:	0e 94 1b 05 	call	0xa36	; 0xa36 <y_gyro>
    1920:	00 d0       	rcall	.+0      	; 0x1922 <raw+0x96>
    1922:	00 d0       	rcall	.+0      	; 0x1924 <raw+0x98>
    1924:	ed b7       	in	r30, 0x3d	; 61
    1926:	fe b7       	in	r31, 0x3e	; 62
    1928:	12 83       	std	Z+2, r17	; 0x02
    192a:	01 83       	std	Z+1, r16	; 0x01
    192c:	94 83       	std	Z+4, r25	; 0x04
    192e:	83 83       	std	Z+3, r24	; 0x03
    1930:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
	printf("%d,", z_gyro());
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	0e 94 04 06 	call	0xc08	; 0xc08 <z_gyro>
    1940:	00 d0       	rcall	.+0      	; 0x1942 <raw+0xb6>
    1942:	00 d0       	rcall	.+0      	; 0x1944 <raw+0xb8>
    1944:	ed b7       	in	r30, 0x3d	; 61
    1946:	fe b7       	in	r31, 0x3e	; 62
    1948:	12 83       	std	Z+2, r17	; 0x02
    194a:	01 83       	std	Z+1, r16	; 0x01
    194c:	94 83       	std	Z+4, r25	; 0x04
    194e:	83 83       	std	Z+3, r24	; 0x03
    1950:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
	magnetometer();
    1954:	0f 90       	pop	r0
    1956:	0f 90       	pop	r0
    1958:	0f 90       	pop	r0
    195a:	0f 90       	pop	r0
    195c:	0e 94 33 03 	call	0x666	; 0x666 <magnetometer>
	printf("%d,", x_mag);
    1960:	00 d0       	rcall	.+0      	; 0x1962 <raw+0xd6>
    1962:	00 d0       	rcall	.+0      	; 0x1964 <raw+0xd8>
    1964:	ed b7       	in	r30, 0x3d	; 61
    1966:	fe b7       	in	r31, 0x3e	; 62
    1968:	12 83       	std	Z+2, r17	; 0x02
    196a:	01 83       	std	Z+1, r16	; 0x01
    196c:	80 91 ac 05 	lds	r24, 0x05AC
    1970:	90 91 ad 05 	lds	r25, 0x05AD
    1974:	94 83       	std	Z+4, r25	; 0x04
    1976:	83 83       	std	Z+3, r24	; 0x03
    1978:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
	printf("%d,", y_mag);
    197c:	ed b7       	in	r30, 0x3d	; 61
    197e:	fe b7       	in	r31, 0x3e	; 62
    1980:	12 83       	std	Z+2, r17	; 0x02
    1982:	01 83       	std	Z+1, r16	; 0x01
    1984:	80 91 aa 05 	lds	r24, 0x05AA
    1988:	90 91 ab 05 	lds	r25, 0x05AB
    198c:	94 83       	std	Z+4, r25	; 0x04
    198e:	83 83       	std	Z+3, r24	; 0x03
    1990:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
	printf("%d", z_mag);
    1994:	81 e1       	ldi	r24, 0x11	; 17
    1996:	94 e0       	ldi	r25, 0x04	; 4
    1998:	ed b7       	in	r30, 0x3d	; 61
    199a:	fe b7       	in	r31, 0x3e	; 62
    199c:	92 83       	std	Z+2, r25	; 0x02
    199e:	81 83       	std	Z+1, r24	; 0x01
    19a0:	80 91 a8 05 	lds	r24, 0x05A8
    19a4:	90 91 a9 05 	lds	r25, 0x05A9
    19a8:	94 83       	std	Z+4, r25	; 0x04
    19aa:	83 83       	std	Z+3, r24	; 0x03
    19ac:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
	printf("#\n\r");
    19b0:	0f 90       	pop	r0
    19b2:	0f 90       	pop	r0
    19b4:	84 e1       	ldi	r24, 0x14	; 20
    19b6:	94 e0       	ldi	r25, 0x04	; 4
    19b8:	ed b7       	in	r30, 0x3d	; 61
    19ba:	fe b7       	in	r31, 0x3e	; 62
    19bc:	92 83       	std	Z+2, r25	; 0x02
    19be:	81 83       	std	Z+1, r24	; 0x01
    19c0:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
	delay_ms(350);//at least 100ms interval between mag measurements
    19c4:	0f 90       	pop	r0
    19c6:	0f 90       	pop	r0
    19c8:	8e e5       	ldi	r24, 0x5E	; 94
    19ca:	91 e0       	ldi	r25, 0x01	; 1
    19cc:	0e 94 0b 01 	call	0x216	; 0x216 <delay_ms>
}
    19d0:	1f 91       	pop	r17
    19d2:	0f 91       	pop	r16
    19d4:	08 95       	ret

000019d6 <config_menu>:
	}
}

void config_menu(void)
{
	i2cInit();
    19d6:	0e 94 d7 00 	call	0x1ae	; 0x1ae <i2cInit>
	accelerometer_init();
    19da:	0e 94 28 01 	call	0x250	; 0x250 <accelerometer_init>
	magnetometer_init();
    19de:	0e 94 72 02 	call	0x4e4	; 0x4e4 <magnetometer_init>

	printf_P(wlcm_str);
    19e2:	00 d0       	rcall	.+0      	; 0x19e4 <config_menu+0xe>
    19e4:	88 e6       	ldi	r24, 0x68	; 104
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	ed b7       	in	r30, 0x3d	; 61
    19ea:	fe b7       	in	r31, 0x3e	; 62
    19ec:	92 83       	std	Z+2, r25	; 0x02
    19ee:	81 83       	std	Z+1, r24	; 0x01
    19f0:	0e 94 17 13 	call	0x262e	; 0x262e <printf_P>
	printf_P(accel);
    19f4:	8e e9       	ldi	r24, 0x9E	; 158
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	ed b7       	in	r30, 0x3d	; 61
    19fa:	fe b7       	in	r31, 0x3e	; 62
    19fc:	92 83       	std	Z+2, r25	; 0x02
    19fe:	81 83       	std	Z+1, r24	; 0x01
    1a00:	0e 94 17 13 	call	0x262e	; 0x262e <printf_P>
	printf_P(mag);
    1a04:	8d eb       	ldi	r24, 0xBD	; 189
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	ed b7       	in	r30, 0x3d	; 61
    1a0a:	fe b7       	in	r31, 0x3e	; 62
    1a0c:	92 83       	std	Z+2, r25	; 0x02
    1a0e:	81 83       	std	Z+1, r24	; 0x01
    1a10:	0e 94 17 13 	call	0x262e	; 0x262e <printf_P>
	printf_P(gyro);
    1a14:	89 ed       	ldi	r24, 0xD9	; 217
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	ed b7       	in	r30, 0x3d	; 61
    1a1a:	fe b7       	in	r31, 0x3e	; 62
    1a1c:	92 83       	std	Z+2, r25	; 0x02
    1a1e:	81 83       	std	Z+1, r24	; 0x01
    1a20:	0e 94 17 13 	call	0x262e	; 0x262e <printf_P>
	printf_P(raw_out);
    1a24:	83 ef       	ldi	r24, 0xF3	; 243
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	ed b7       	in	r30, 0x3d	; 61
    1a2a:	fe b7       	in	r31, 0x3e	; 62
    1a2c:	92 83       	std	Z+2, r25	; 0x02
    1a2e:	81 83       	std	Z+1, r24	; 0x01
    1a30:	0e 94 17 13 	call	0x262e	; 0x262e <printf_P>
	printf_P(baud_change);
    1a34:	83 e0       	ldi	r24, 0x03	; 3
    1a36:	91 e0       	ldi	r25, 0x01	; 1
    1a38:	ed b7       	in	r30, 0x3d	; 61
    1a3a:	fe b7       	in	r31, 0x3e	; 62
    1a3c:	92 83       	std	Z+2, r25	; 0x02
    1a3e:	81 83       	std	Z+1, r24	; 0x01
    1a40:	0e 94 17 13 	call	0x262e	; 0x262e <printf_P>
	printf("%ldbps\n\r", baud);
    1a44:	00 d0       	rcall	.+0      	; 0x1a46 <config_menu+0x70>
    1a46:	00 d0       	rcall	.+0      	; 0x1a48 <config_menu+0x72>
    1a48:	88 e1       	ldi	r24, 0x18	; 24
    1a4a:	94 e0       	ldi	r25, 0x04	; 4
    1a4c:	ed b7       	in	r30, 0x3d	; 61
    1a4e:	fe b7       	in	r31, 0x3e	; 62
    1a50:	92 83       	std	Z+2, r25	; 0x02
    1a52:	81 83       	std	Z+1, r24	; 0x01
    1a54:	80 91 a4 05 	lds	r24, 0x05A4
    1a58:	90 91 a5 05 	lds	r25, 0x05A5
    1a5c:	a0 91 a6 05 	lds	r26, 0x05A6
    1a60:	b0 91 a7 05 	lds	r27, 0x05A7
    1a64:	83 83       	std	Z+3, r24	; 0x03
    1a66:	94 83       	std	Z+4, r25	; 0x04
    1a68:	a5 83       	std	Z+5, r26	; 0x05
    1a6a:	b6 83       	std	Z+6, r27	; 0x06
    1a6c:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
	printf_P(autorun);
    1a70:	0f 90       	pop	r0
    1a72:	0f 90       	pop	r0
    1a74:	0f 90       	pop	r0
    1a76:	0f 90       	pop	r0
    1a78:	89 e1       	ldi	r24, 0x19	; 25
    1a7a:	91 e0       	ldi	r25, 0x01	; 1
    1a7c:	ed b7       	in	r30, 0x3d	; 61
    1a7e:	fe b7       	in	r31, 0x3e	; 62
    1a80:	92 83       	std	Z+2, r25	; 0x02
    1a82:	81 83       	std	Z+1, r24	; 0x01
    1a84:	0e 94 17 13 	call	0x262e	; 0x262e <printf_P>
	printf_P(help_);
    1a88:	82 e3       	ldi	r24, 0x32	; 50
    1a8a:	91 e0       	ldi	r25, 0x01	; 1
    1a8c:	ed b7       	in	r30, 0x3d	; 61
    1a8e:	fe b7       	in	r31, 0x3e	; 62
    1a90:	92 83       	std	Z+2, r25	; 0x02
    1a92:	81 83       	std	Z+1, r24	; 0x01
    1a94:	0e 94 17 13 	call	0x262e	; 0x262e <printf_P>
	
	config_read();
    1a98:	0f 90       	pop	r0
    1a9a:	0f 90       	pop	r0
    1a9c:	0e 94 2d 12 	call	0x245a	; 0x245a <config_read>
}
    1aa0:	08 95       	ret

00001aa2 <self_test>:
	printf("#\n\r");
	delay_ms(350);//at least 100ms interval between mag measurements
}

void self_test(void)
{
    1aa2:	ef 92       	push	r14
    1aa4:	ff 92       	push	r15
    1aa6:	0f 93       	push	r16
    1aa8:	1f 93       	push	r17
    1aaa:	cf 93       	push	r28
    1aac:	df 93       	push	r29
	//MAGNETOMETER
	
	uint8_t xh, xl, yh, yl, zh, zl, hmc_flag = 0;
	x_mag = 0;
    1aae:	10 92 ad 05 	sts	0x05AD, r1
    1ab2:	10 92 ac 05 	sts	0x05AC, r1
	y_mag = 0;
    1ab6:	10 92 ab 05 	sts	0x05AB, r1
    1aba:	10 92 aa 05 	sts	0x05AA, r1
	z_mag = 0;
    1abe:	10 92 a9 05 	sts	0x05A9, r1
    1ac2:	10 92 a8 05 	sts	0x05A8, r1
	
	magnetometer_init();
    1ac6:	0e 94 72 02 	call	0x4e4	; 0x4e4 <magnetometer_init>
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
    1aca:	3c 9a       	sbi	0x07, 4	; 7
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    1acc:	84 ea       	ldi	r24, 0xA4	; 164
    1ace:	80 93 bc 00 	sts	0x00BC, r24
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	02 c0       	rjmp	.+4      	; 0x1adc <self_test+0x3a>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
    1ad8:	2f 5f       	subi	r18, 0xFF	; 255
    1ada:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    1adc:	80 91 bc 00 	lds	r24, 0x00BC
    1ae0:	87 fd       	sbrc	r24, 7
    1ae2:	03 c0       	rjmp	.+6      	; 0x1aea <self_test+0x48>
    1ae4:	2a 35       	cpi	r18, 0x5A	; 90
    1ae6:	31 05       	cpc	r19, r1
    1ae8:	b9 f7       	brne	.-18     	; 0x1ad8 <self_test+0x36>
	
	//must read all six registers plus one to move the pointer back to 0x03
	
	i2cSendStart();
	i2cWaitForComplete();
	i2cSendByte(0x3D);    //write to HMC
    1aea:	8d e3       	ldi	r24, 0x3D	; 61
    1aec:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	02 c0       	rjmp	.+4      	; 0x1afa <self_test+0x58>
		i++;
    1af6:	2f 5f       	subi	r18, 0xFF	; 255
    1af8:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    1afa:	80 91 bc 00 	lds	r24, 0x00BC
    1afe:	87 fd       	sbrc	r24, 7
    1b00:	03 c0       	rjmp	.+6      	; 0x1b08 <self_test+0x66>
    1b02:	2a 35       	cpi	r18, 0x5A	; 90
    1b04:	31 05       	cpc	r19, r1
    1b06:	b9 f7       	brne	.-18     	; 0x1af6 <self_test+0x54>
	i2cWaitForComplete();
	i2cReceiveByte(TRUE);
    1b08:	8f ef       	ldi	r24, 0xFF	; 255
    1b0a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <i2cReceiveByte>
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	02 c0       	rjmp	.+4      	; 0x1b18 <self_test+0x76>
		i++;
    1b14:	2f 5f       	subi	r18, 0xFF	; 255
    1b16:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    1b18:	80 91 bc 00 	lds	r24, 0x00BC
    1b1c:	87 fd       	sbrc	r24, 7
    1b1e:	03 c0       	rjmp	.+6      	; 0x1b26 <self_test+0x84>
    1b20:	2a 35       	cpi	r18, 0x5A	; 90
    1b22:	31 05       	cpc	r19, r1
    1b24:	b9 f7       	brne	.-18     	; 0x1b14 <self_test+0x72>
}

unsigned char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
    1b26:	10 91 bb 00 	lds	r17, 0x00BB
    1b2a:	20 e0       	ldi	r18, 0x00	; 0
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	02 c0       	rjmp	.+4      	; 0x1b34 <self_test+0x92>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
    1b30:	2f 5f       	subi	r18, 0xFF	; 255
    1b32:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    1b34:	80 91 bc 00 	lds	r24, 0x00BC
    1b38:	87 fd       	sbrc	r24, 7
    1b3a:	03 c0       	rjmp	.+6      	; 0x1b42 <self_test+0xa0>
    1b3c:	2a 35       	cpi	r18, 0x5A	; 90
    1b3e:	31 05       	cpc	r19, r1
    1b40:	b9 f7       	brne	.-18     	; 0x1b30 <self_test+0x8e>
	i2cWaitForComplete();
	xh = i2cGetReceivedByte();	//x high byte
	i2cWaitForComplete();
	
	i2cReceiveByte(TRUE);
    1b42:	8f ef       	ldi	r24, 0xFF	; 255
    1b44:	0e 94 f7 00 	call	0x1ee	; 0x1ee <i2cReceiveByte>
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	02 c0       	rjmp	.+4      	; 0x1b52 <self_test+0xb0>
		i++;
    1b4e:	2f 5f       	subi	r18, 0xFF	; 255
    1b50:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    1b52:	80 91 bc 00 	lds	r24, 0x00BC
    1b56:	87 fd       	sbrc	r24, 7
    1b58:	03 c0       	rjmp	.+6      	; 0x1b60 <self_test+0xbe>
    1b5a:	2a 35       	cpi	r18, 0x5A	; 90
    1b5c:	31 05       	cpc	r19, r1
    1b5e:	b9 f7       	brne	.-18     	; 0x1b4e <self_test+0xac>
}

unsigned char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
    1b60:	20 91 bb 00 	lds	r18, 0x00BB
    1b64:	40 e0       	ldi	r20, 0x00	; 0
    1b66:	50 e0       	ldi	r21, 0x00	; 0
    1b68:	02 c0       	rjmp	.+4      	; 0x1b6e <self_test+0xcc>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
    1b6a:	4f 5f       	subi	r20, 0xFF	; 255
    1b6c:	5f 4f       	sbci	r21, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    1b6e:	80 91 bc 00 	lds	r24, 0x00BC
    1b72:	87 fd       	sbrc	r24, 7
    1b74:	03 c0       	rjmp	.+6      	; 0x1b7c <self_test+0xda>
    1b76:	4a 35       	cpi	r20, 0x5A	; 90
    1b78:	51 05       	cpc	r21, r1
    1b7a:	b9 f7       	brne	.-18     	; 0x1b6a <self_test+0xc8>
	i2cWaitForComplete();
	xl = i2cGetReceivedByte();	//x low byte
	i2cWaitForComplete();
	x_mag = xl|(xh << 8);
    1b7c:	91 2f       	mov	r25, r17
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	82 2b       	or	r24, r18
    1b84:	93 2b       	or	r25, r19
    1b86:	90 93 ad 05 	sts	0x05AD, r25
    1b8a:	80 93 ac 05 	sts	0x05AC, r24
	
	i2cReceiveByte(TRUE);
    1b8e:	8f ef       	ldi	r24, 0xFF	; 255
    1b90:	0e 94 f7 00 	call	0x1ee	; 0x1ee <i2cReceiveByte>
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	02 c0       	rjmp	.+4      	; 0x1b9e <self_test+0xfc>
		i++;
    1b9a:	2f 5f       	subi	r18, 0xFF	; 255
    1b9c:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    1b9e:	80 91 bc 00 	lds	r24, 0x00BC
    1ba2:	87 fd       	sbrc	r24, 7
    1ba4:	03 c0       	rjmp	.+6      	; 0x1bac <self_test+0x10a>
    1ba6:	2a 35       	cpi	r18, 0x5A	; 90
    1ba8:	31 05       	cpc	r19, r1
    1baa:	b9 f7       	brne	.-18     	; 0x1b9a <self_test+0xf8>
}

unsigned char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
    1bac:	10 91 bb 00 	lds	r17, 0x00BB
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	02 c0       	rjmp	.+4      	; 0x1bba <self_test+0x118>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
    1bb6:	2f 5f       	subi	r18, 0xFF	; 255
    1bb8:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    1bba:	80 91 bc 00 	lds	r24, 0x00BC
    1bbe:	87 fd       	sbrc	r24, 7
    1bc0:	03 c0       	rjmp	.+6      	; 0x1bc8 <self_test+0x126>
    1bc2:	2a 35       	cpi	r18, 0x5A	; 90
    1bc4:	31 05       	cpc	r19, r1
    1bc6:	b9 f7       	brne	.-18     	; 0x1bb6 <self_test+0x114>
	i2cWaitForComplete();
	zh = i2cGetReceivedByte();	
	i2cWaitForComplete();      //z high byte
	
	i2cReceiveByte(TRUE);
    1bc8:	8f ef       	ldi	r24, 0xFF	; 255
    1bca:	0e 94 f7 00 	call	0x1ee	; 0x1ee <i2cReceiveByte>
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	02 c0       	rjmp	.+4      	; 0x1bd8 <self_test+0x136>
		i++;
    1bd4:	2f 5f       	subi	r18, 0xFF	; 255
    1bd6:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    1bd8:	80 91 bc 00 	lds	r24, 0x00BC
    1bdc:	87 fd       	sbrc	r24, 7
    1bde:	03 c0       	rjmp	.+6      	; 0x1be6 <self_test+0x144>
    1be0:	2a 35       	cpi	r18, 0x5A	; 90
    1be2:	31 05       	cpc	r19, r1
    1be4:	b9 f7       	brne	.-18     	; 0x1bd4 <self_test+0x132>
}

unsigned char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
    1be6:	20 91 bb 00 	lds	r18, 0x00BB
    1bea:	40 e0       	ldi	r20, 0x00	; 0
    1bec:	50 e0       	ldi	r21, 0x00	; 0
    1bee:	02 c0       	rjmp	.+4      	; 0x1bf4 <self_test+0x152>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
    1bf0:	4f 5f       	subi	r20, 0xFF	; 255
    1bf2:	5f 4f       	sbci	r21, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    1bf4:	80 91 bc 00 	lds	r24, 0x00BC
    1bf8:	87 fd       	sbrc	r24, 7
    1bfa:	03 c0       	rjmp	.+6      	; 0x1c02 <self_test+0x160>
    1bfc:	4a 35       	cpi	r20, 0x5A	; 90
    1bfe:	51 05       	cpc	r21, r1
    1c00:	b9 f7       	brne	.-18     	; 0x1bf0 <self_test+0x14e>
	i2cWaitForComplete();
	zl = i2cGetReceivedByte();	//z low byte
	i2cWaitForComplete();
	z_mag = zl|(zh << 8);
    1c02:	91 2f       	mov	r25, r17
    1c04:	80 e0       	ldi	r24, 0x00	; 0
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	82 2b       	or	r24, r18
    1c0a:	93 2b       	or	r25, r19
    1c0c:	90 93 a9 05 	sts	0x05A9, r25
    1c10:	80 93 a8 05 	sts	0x05A8, r24
	
	i2cReceiveByte(TRUE);
    1c14:	8f ef       	ldi	r24, 0xFF	; 255
    1c16:	0e 94 f7 00 	call	0x1ee	; 0x1ee <i2cReceiveByte>
    1c1a:	20 e0       	ldi	r18, 0x00	; 0
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	02 c0       	rjmp	.+4      	; 0x1c24 <self_test+0x182>
		i++;
    1c20:	2f 5f       	subi	r18, 0xFF	; 255
    1c22:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    1c24:	80 91 bc 00 	lds	r24, 0x00BC
    1c28:	87 fd       	sbrc	r24, 7
    1c2a:	03 c0       	rjmp	.+6      	; 0x1c32 <self_test+0x190>
    1c2c:	2a 35       	cpi	r18, 0x5A	; 90
    1c2e:	31 05       	cpc	r19, r1
    1c30:	b9 f7       	brne	.-18     	; 0x1c20 <self_test+0x17e>
}

unsigned char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
    1c32:	10 91 bb 00 	lds	r17, 0x00BB
    1c36:	20 e0       	ldi	r18, 0x00	; 0
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	02 c0       	rjmp	.+4      	; 0x1c40 <self_test+0x19e>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
    1c3c:	2f 5f       	subi	r18, 0xFF	; 255
    1c3e:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    1c40:	80 91 bc 00 	lds	r24, 0x00BC
    1c44:	87 fd       	sbrc	r24, 7
    1c46:	03 c0       	rjmp	.+6      	; 0x1c4e <self_test+0x1ac>
    1c48:	2a 35       	cpi	r18, 0x5A	; 90
    1c4a:	31 05       	cpc	r19, r1
    1c4c:	b9 f7       	brne	.-18     	; 0x1c3c <self_test+0x19a>
	i2cWaitForComplete();
	yh = i2cGetReceivedByte();	//y high byte
	i2cWaitForComplete();
	
	i2cReceiveByte(TRUE);
    1c4e:	8f ef       	ldi	r24, 0xFF	; 255
    1c50:	0e 94 f7 00 	call	0x1ee	; 0x1ee <i2cReceiveByte>
    1c54:	20 e0       	ldi	r18, 0x00	; 0
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	02 c0       	rjmp	.+4      	; 0x1c5e <self_test+0x1bc>
		i++;
    1c5a:	2f 5f       	subi	r18, 0xFF	; 255
    1c5c:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    1c5e:	80 91 bc 00 	lds	r24, 0x00BC
    1c62:	87 fd       	sbrc	r24, 7
    1c64:	03 c0       	rjmp	.+6      	; 0x1c6c <self_test+0x1ca>
    1c66:	2a 35       	cpi	r18, 0x5A	; 90
    1c68:	31 05       	cpc	r19, r1
    1c6a:	b9 f7       	brne	.-18     	; 0x1c5a <self_test+0x1b8>
}

unsigned char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
    1c6c:	20 91 bb 00 	lds	r18, 0x00BB
    1c70:	40 e0       	ldi	r20, 0x00	; 0
    1c72:	50 e0       	ldi	r21, 0x00	; 0
    1c74:	02 c0       	rjmp	.+4      	; 0x1c7a <self_test+0x1d8>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
    1c76:	4f 5f       	subi	r20, 0xFF	; 255
    1c78:	5f 4f       	sbci	r21, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    1c7a:	80 91 bc 00 	lds	r24, 0x00BC
    1c7e:	87 fd       	sbrc	r24, 7
    1c80:	03 c0       	rjmp	.+6      	; 0x1c88 <self_test+0x1e6>
    1c82:	4a 35       	cpi	r20, 0x5A	; 90
    1c84:	51 05       	cpc	r21, r1
    1c86:	b9 f7       	brne	.-18     	; 0x1c76 <self_test+0x1d4>
	i2cWaitForComplete();
	yl = i2cGetReceivedByte();	//y low byte
	i2cWaitForComplete();
	y_mag = yl|(yh << 8);
    1c88:	91 2f       	mov	r25, r17
    1c8a:	80 e0       	ldi	r24, 0x00	; 0
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	82 2b       	or	r24, r18
    1c90:	93 2b       	or	r25, r19
    1c92:	90 93 ab 05 	sts	0x05AB, r25
    1c96:	80 93 aa 05 	sts	0x05AA, r24
	
	i2cSendByte(0x3D);         //must reach 0x09 to go back to 0x03
    1c9a:	8d e3       	ldi	r24, 0x3D	; 61
    1c9c:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	02 c0       	rjmp	.+4      	; 0x1caa <self_test+0x208>
		i++;
    1ca6:	2f 5f       	subi	r18, 0xFF	; 255
    1ca8:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    1caa:	80 91 bc 00 	lds	r24, 0x00BC
    1cae:	87 fd       	sbrc	r24, 7
    1cb0:	03 c0       	rjmp	.+6      	; 0x1cb8 <self_test+0x216>
    1cb2:	2a 35       	cpi	r18, 0x5A	; 90
    1cb4:	31 05       	cpc	r19, r1
    1cb6:	b9 f7       	brne	.-18     	; 0x1ca6 <self_test+0x204>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    1cb8:	84 e9       	ldi	r24, 0x94	; 148
    1cba:	80 93 bc 00 	sts	0x00BC, r24
	i2cWaitForComplete();
	
	i2cSendStop();	
	
	//if it gets to this point and there are values in x,y,z_mag, we can assume part is responding correctly
	if((x_mag == y_mag) && (y_mag == z_mag)) hmc_flag = 0xFF;
    1cbe:	20 91 ac 05 	lds	r18, 0x05AC
    1cc2:	30 91 ad 05 	lds	r19, 0x05AD
    1cc6:	80 91 aa 05 	lds	r24, 0x05AA
    1cca:	90 91 ab 05 	lds	r25, 0x05AB
    1cce:	28 17       	cp	r18, r24
    1cd0:	39 07       	cpc	r19, r25
    1cd2:	51 f4       	brne	.+20     	; 0x1ce8 <self_test+0x246>
    1cd4:	80 91 a8 05 	lds	r24, 0x05A8
    1cd8:	90 91 a9 05 	lds	r25, 0x05A9
    1cdc:	28 17       	cp	r18, r24
    1cde:	39 07       	cpc	r19, r25
    1ce0:	19 f4       	brne	.+6      	; 0x1ce8 <self_test+0x246>
    1ce2:	ff 24       	eor	r15, r15
    1ce4:	fa 94       	dec	r15
    1ce6:	01 c0       	rjmp	.+2      	; 0x1cea <self_test+0x248>
    1ce8:	ff 24       	eor	r15, r15
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
    1cea:	3c 9a       	sbi	0x07, 4	; 7
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    1cec:	84 ea       	ldi	r24, 0xA4	; 164
    1cee:	80 93 bc 00 	sts	0x00BC, r24
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	02 c0       	rjmp	.+4      	; 0x1cfc <self_test+0x25a>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
    1cf8:	2f 5f       	subi	r18, 0xFF	; 255
    1cfa:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    1cfc:	80 91 bc 00 	lds	r24, 0x00BC
    1d00:	87 fd       	sbrc	r24, 7
    1d02:	03 c0       	rjmp	.+6      	; 0x1d0a <self_test+0x268>
    1d04:	2a 35       	cpi	r18, 0x5A	; 90
    1d06:	31 05       	cpc	r19, r1
    1d08:	b9 f7       	brne	.-18     	; 0x1cf8 <self_test+0x256>
	uint8_t x, dummy;
	
	//0x32 data registers
	i2cSendStart();
	i2cWaitForComplete();
	i2cSendByte(0xA6);    //write to ADXL
    1d0a:	86 ea       	ldi	r24, 0xA6	; 166
    1d0c:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	02 c0       	rjmp	.+4      	; 0x1d1a <self_test+0x278>
		i++;
    1d16:	2f 5f       	subi	r18, 0xFF	; 255
    1d18:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    1d1a:	80 91 bc 00 	lds	r24, 0x00BC
    1d1e:	87 fd       	sbrc	r24, 7
    1d20:	03 c0       	rjmp	.+6      	; 0x1d28 <self_test+0x286>
    1d22:	2a 35       	cpi	r18, 0x5A	; 90
    1d24:	31 05       	cpc	r19, r1
    1d26:	b9 f7       	brne	.-18     	; 0x1d16 <self_test+0x274>
	i2cWaitForComplete();
	i2cSendByte(0x00);    //X0 data register
    1d28:	80 e0       	ldi	r24, 0x00	; 0
    1d2a:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
    1d2e:	20 e0       	ldi	r18, 0x00	; 0
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	02 c0       	rjmp	.+4      	; 0x1d38 <self_test+0x296>
		i++;
    1d34:	2f 5f       	subi	r18, 0xFF	; 255
    1d36:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    1d38:	80 91 bc 00 	lds	r24, 0x00BC
    1d3c:	87 fd       	sbrc	r24, 7
    1d3e:	03 c0       	rjmp	.+6      	; 0x1d46 <self_test+0x2a4>
    1d40:	2a 35       	cpi	r18, 0x5A	; 90
    1d42:	31 05       	cpc	r19, r1
    1d44:	b9 f7       	brne	.-18     	; 0x1d34 <self_test+0x292>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    1d46:	84 e9       	ldi	r24, 0x94	; 148
    1d48:	80 93 bc 00 	sts	0x00BC, r24
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
    1d4c:	3c 9a       	sbi	0x07, 4	; 7
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    1d4e:	84 ea       	ldi	r24, 0xA4	; 164
    1d50:	80 93 bc 00 	sts	0x00BC, r24
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	02 c0       	rjmp	.+4      	; 0x1d5e <self_test+0x2bc>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
    1d5a:	2f 5f       	subi	r18, 0xFF	; 255
    1d5c:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    1d5e:	80 91 bc 00 	lds	r24, 0x00BC
    1d62:	87 fd       	sbrc	r24, 7
    1d64:	03 c0       	rjmp	.+6      	; 0x1d6c <self_test+0x2ca>
    1d66:	2a 35       	cpi	r18, 0x5A	; 90
    1d68:	31 05       	cpc	r19, r1
    1d6a:	b9 f7       	brne	.-18     	; 0x1d5a <self_test+0x2b8>
	
	i2cSendStop();		 //repeat start
	i2cSendStart();

	i2cWaitForComplete();
	i2cSendByte(0xA7);    //read from ADXL
    1d6c:	87 ea       	ldi	r24, 0xA7	; 167
    1d6e:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	02 c0       	rjmp	.+4      	; 0x1d7c <self_test+0x2da>
		i++;
    1d78:	2f 5f       	subi	r18, 0xFF	; 255
    1d7a:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    1d7c:	80 91 bc 00 	lds	r24, 0x00BC
    1d80:	87 fd       	sbrc	r24, 7
    1d82:	03 c0       	rjmp	.+6      	; 0x1d8a <self_test+0x2e8>
    1d84:	2a 35       	cpi	r18, 0x5A	; 90
    1d86:	31 05       	cpc	r19, r1
    1d88:	b9 f7       	brne	.-18     	; 0x1d78 <self_test+0x2d6>
	i2cWaitForComplete();
	i2cReceiveByte(TRUE);
    1d8a:	8f ef       	ldi	r24, 0xFF	; 255
    1d8c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <i2cReceiveByte>
    1d90:	20 e0       	ldi	r18, 0x00	; 0
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	02 c0       	rjmp	.+4      	; 0x1d9a <self_test+0x2f8>
		i++;
    1d96:	2f 5f       	subi	r18, 0xFF	; 255
    1d98:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    1d9a:	80 91 bc 00 	lds	r24, 0x00BC
    1d9e:	87 fd       	sbrc	r24, 7
    1da0:	03 c0       	rjmp	.+6      	; 0x1da8 <self_test+0x306>
    1da2:	2a 35       	cpi	r18, 0x5A	; 90
    1da4:	31 05       	cpc	r19, r1
    1da6:	b9 f7       	brne	.-18     	; 0x1d96 <self_test+0x2f4>
}

unsigned char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
    1da8:	e0 90 bb 00 	lds	r14, 0x00BB
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	02 c0       	rjmp	.+4      	; 0x1db6 <self_test+0x314>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
    1db2:	2f 5f       	subi	r18, 0xFF	; 255
    1db4:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    1db6:	80 91 bc 00 	lds	r24, 0x00BC
    1dba:	87 fd       	sbrc	r24, 7
    1dbc:	03 c0       	rjmp	.+6      	; 0x1dc4 <self_test+0x322>
    1dbe:	2a 35       	cpi	r18, 0x5A	; 90
    1dc0:	31 05       	cpc	r19, r1
    1dc2:	b9 f7       	brne	.-18     	; 0x1db2 <self_test+0x310>
	i2cWaitForComplete();
	x = i2cGetReceivedByte();
	i2cWaitForComplete();
	i2cReceiveByte(FALSE);
    1dc4:	80 e0       	ldi	r24, 0x00	; 0
    1dc6:	0e 94 f7 00 	call	0x1ee	; 0x1ee <i2cReceiveByte>
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	02 c0       	rjmp	.+4      	; 0x1dd4 <self_test+0x332>
		i++;
    1dd0:	2f 5f       	subi	r18, 0xFF	; 255
    1dd2:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    1dd4:	80 91 bc 00 	lds	r24, 0x00BC
    1dd8:	87 fd       	sbrc	r24, 7
    1dda:	03 c0       	rjmp	.+6      	; 0x1de2 <self_test+0x340>
    1ddc:	2a 35       	cpi	r18, 0x5A	; 90
    1dde:	31 05       	cpc	r19, r1
    1de0:	b9 f7       	brne	.-18     	; 0x1dd0 <self_test+0x32e>
}

unsigned char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
    1de2:	80 91 bb 00 	lds	r24, 0x00BB
    1de6:	20 e0       	ldi	r18, 0x00	; 0
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	02 c0       	rjmp	.+4      	; 0x1df0 <self_test+0x34e>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
    1dec:	2f 5f       	subi	r18, 0xFF	; 255
    1dee:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    1df0:	80 91 bc 00 	lds	r24, 0x00BC
    1df4:	87 fd       	sbrc	r24, 7
    1df6:	03 c0       	rjmp	.+6      	; 0x1dfe <self_test+0x35c>
    1df8:	2a 35       	cpi	r18, 0x5A	; 90
    1dfa:	31 05       	cpc	r19, r1
    1dfc:	b9 f7       	brne	.-18     	; 0x1dec <self_test+0x34a>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    1dfe:	84 e9       	ldi	r24, 0x94	; 148
    1e00:	80 93 bc 00 	sts	0x00BC, r24
	// Gyro////////////////////////////
	///////////////////////////////////
	
	char data;
	
	cbi(TWCR, TWEN);	// Disable TWI
    1e04:	80 91 bc 00 	lds	r24, 0x00BC
    1e08:	8b 7f       	andi	r24, 0xFB	; 251
    1e0a:	80 93 bc 00 	sts	0x00BC, r24
	sbi(TWCR, TWEN);	// Enable TWI
    1e0e:	80 91 bc 00 	lds	r24, 0x00BC
    1e12:	84 60       	ori	r24, 0x04	; 4
    1e14:	80 93 bc 00 	sts	0x00BC, r24
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
    1e18:	3c 9a       	sbi	0x07, 4	; 7
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    1e1a:	84 ea       	ldi	r24, 0xA4	; 164
    1e1c:	80 93 bc 00 	sts	0x00BC, r24
    1e20:	20 e0       	ldi	r18, 0x00	; 0
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	02 c0       	rjmp	.+4      	; 0x1e2a <self_test+0x388>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
    1e26:	2f 5f       	subi	r18, 0xFF	; 255
    1e28:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    1e2a:	80 91 bc 00 	lds	r24, 0x00BC
    1e2e:	87 fd       	sbrc	r24, 7
    1e30:	03 c0       	rjmp	.+6      	; 0x1e38 <self_test+0x396>
    1e32:	2a 35       	cpi	r18, 0x5A	; 90
    1e34:	31 05       	cpc	r19, r1
    1e36:	b9 f7       	brne	.-18     	; 0x1e26 <self_test+0x384>
	
	i2cSendStart();
	i2cWaitForComplete();
	i2cSendByte(ITG3200_W);	// write 0xD2
    1e38:	80 ed       	ldi	r24, 0xD0	; 208
    1e3a:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	02 c0       	rjmp	.+4      	; 0x1e48 <self_test+0x3a6>
		i++;
    1e44:	2f 5f       	subi	r18, 0xFF	; 255
    1e46:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    1e48:	80 91 bc 00 	lds	r24, 0x00BC
    1e4c:	87 fd       	sbrc	r24, 7
    1e4e:	03 c0       	rjmp	.+6      	; 0x1e56 <self_test+0x3b4>
    1e50:	2a 35       	cpi	r18, 0x5A	; 90
    1e52:	31 05       	cpc	r19, r1
    1e54:	b9 f7       	brne	.-18     	; 0x1e44 <self_test+0x3a2>
	i2cWaitForComplete();
	i2cSendByte(0x00);	// who am i
    1e56:	80 e0       	ldi	r24, 0x00	; 0
    1e58:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
    1e5c:	20 e0       	ldi	r18, 0x00	; 0
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	02 c0       	rjmp	.+4      	; 0x1e66 <self_test+0x3c4>
		i++;
    1e62:	2f 5f       	subi	r18, 0xFF	; 255
    1e64:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    1e66:	80 91 bc 00 	lds	r24, 0x00BC
    1e6a:	87 fd       	sbrc	r24, 7
    1e6c:	03 c0       	rjmp	.+6      	; 0x1e74 <self_test+0x3d2>
    1e6e:	2a 35       	cpi	r18, 0x5A	; 90
    1e70:	31 05       	cpc	r19, r1
    1e72:	b9 f7       	brne	.-18     	; 0x1e62 <self_test+0x3c0>
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
    1e74:	3c 9a       	sbi	0x07, 4	; 7
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    1e76:	84 ea       	ldi	r24, 0xA4	; 164
    1e78:	80 93 bc 00 	sts	0x00BC, r24
	i2cWaitForComplete();
	
	i2cSendStart();
	
	i2cSendByte(ITG3200_R);	// write 0xD3
    1e7c:	81 ed       	ldi	r24, 0xD1	; 209
    1e7e:	0e 94 1a 01 	call	0x234	; 0x234 <i2cSendByte>
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	02 c0       	rjmp	.+4      	; 0x1e8c <self_test+0x3ea>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
    1e88:	2f 5f       	subi	r18, 0xFF	; 255
    1e8a:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    1e8c:	80 91 bc 00 	lds	r24, 0x00BC
    1e90:	87 fd       	sbrc	r24, 7
    1e92:	03 c0       	rjmp	.+6      	; 0x1e9a <self_test+0x3f8>
    1e94:	2a 35       	cpi	r18, 0x5A	; 90
    1e96:	31 05       	cpc	r19, r1
    1e98:	b9 f7       	brne	.-18     	; 0x1e88 <self_test+0x3e6>
	i2cWaitForComplete();
	i2cReceiveByte(FALSE);
    1e9a:	80 e0       	ldi	r24, 0x00	; 0
    1e9c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <i2cReceiveByte>
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	02 c0       	rjmp	.+4      	; 0x1eaa <self_test+0x408>
		i++;
    1ea6:	2f 5f       	subi	r18, 0xFF	; 255
    1ea8:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    1eaa:	80 91 bc 00 	lds	r24, 0x00BC
    1eae:	87 fd       	sbrc	r24, 7
    1eb0:	03 c0       	rjmp	.+6      	; 0x1eb8 <self_test+0x416>
    1eb2:	2a 35       	cpi	r18, 0x5A	; 90
    1eb4:	31 05       	cpc	r19, r1
    1eb6:	b9 f7       	brne	.-18     	; 0x1ea6 <self_test+0x404>
}

unsigned char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
    1eb8:	90 91 bb 00 	lds	r25, 0x00BB
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	02 c0       	rjmp	.+4      	; 0x1ec6 <self_test+0x424>
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
    1ec2:	2f 5f       	subi	r18, 0xFF	; 255
    1ec4:	3f 4f       	sbci	r19, 0xFF	; 255
void i2cWaitForComplete(void)
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
    1ec6:	80 91 bc 00 	lds	r24, 0x00BC
    1eca:	87 fd       	sbrc	r24, 7
    1ecc:	03 c0       	rjmp	.+6      	; 0x1ed4 <self_test+0x432>
    1ece:	2a 35       	cpi	r18, 0x5A	; 90
    1ed0:	31 05       	cpc	r19, r1
    1ed2:	b9 f7       	brne	.-18     	; 0x1ec2 <self_test+0x420>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    1ed4:	84 e9       	ldi	r24, 0x94	; 148
    1ed6:	80 93 bc 00 	sts	0x00BC, r24
	
	data = i2cGetReceivedByte();	// Get MSB result
	i2cWaitForComplete();
	i2cSendStop();
	
	cbi(TWCR, TWEN);	// Disable TWI
    1eda:	80 91 bc 00 	lds	r24, 0x00BC
    1ede:	8b 7f       	andi	r24, 0xFB	; 251
    1ee0:	80 93 bc 00 	sts	0x00BC, r24
	sbi(TWCR, TWEN);	// Enable TWI
    1ee4:	80 91 bc 00 	lds	r24, 0x00BC
    1ee8:	84 60       	ori	r24, 0x04	; 4
    1eea:	80 93 bc 00 	sts	0x00BC, r24
	
	int gyro_flag = 0;
	int mag_flag = 0;
	int accel_flag = 0;
	
	if((data == 0x69) || (data == 0x68))
    1eee:	98 56       	subi	r25, 0x68	; 104
    1ef0:	92 30       	cpi	r25, 0x02	; 2
    1ef2:	60 f4       	brcc	.+24     	; 0x1f0c <self_test+0x46a>
	{
		printf("ITG: GOOD\n\r");
    1ef4:	00 d0       	rcall	.+0      	; 0x1ef6 <self_test+0x454>
    1ef6:	81 e2       	ldi	r24, 0x21	; 33
    1ef8:	94 e0       	ldi	r25, 0x04	; 4
    1efa:	ed b7       	in	r30, 0x3d	; 61
    1efc:	fe b7       	in	r31, 0x3e	; 62
    1efe:	92 83       	std	Z+2, r25	; 0x02
    1f00:	81 83       	std	Z+1, r24	; 0x01
    1f02:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
    1f06:	01 e0       	ldi	r16, 0x01	; 1
    1f08:	10 e0       	ldi	r17, 0x00	; 0
    1f0a:	0b c0       	rjmp	.+22     	; 0x1f22 <self_test+0x480>
		gyro_flag = 1;
	}else printf("ITG: BAD\n\r");
    1f0c:	00 d0       	rcall	.+0      	; 0x1f0e <self_test+0x46c>
    1f0e:	8d e2       	ldi	r24, 0x2D	; 45
    1f10:	94 e0       	ldi	r25, 0x04	; 4
    1f12:	ed b7       	in	r30, 0x3d	; 61
    1f14:	fe b7       	in	r31, 0x3e	; 62
    1f16:	92 83       	std	Z+2, r25	; 0x02
    1f18:	81 83       	std	Z+1, r24	; 0x01
    1f1a:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
    1f1e:	00 e0       	ldi	r16, 0x00	; 0
    1f20:	10 e0       	ldi	r17, 0x00	; 0
    1f22:	0f 90       	pop	r0
    1f24:	0f 90       	pop	r0
	
	if(hmc_flag == 0)
    1f26:	ff 20       	and	r15, r15
    1f28:	61 f4       	brne	.+24     	; 0x1f42 <self_test+0x4a0>
	{
		printf("HMC: GOOD\n\r");
    1f2a:	00 d0       	rcall	.+0      	; 0x1f2c <self_test+0x48a>
    1f2c:	88 e3       	ldi	r24, 0x38	; 56
    1f2e:	94 e0       	ldi	r25, 0x04	; 4
    1f30:	ed b7       	in	r30, 0x3d	; 61
    1f32:	fe b7       	in	r31, 0x3e	; 62
    1f34:	92 83       	std	Z+2, r25	; 0x02
    1f36:	81 83       	std	Z+1, r24	; 0x01
    1f38:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
    1f3c:	c1 e0       	ldi	r28, 0x01	; 1
    1f3e:	d0 e0       	ldi	r29, 0x00	; 0
    1f40:	0b c0       	rjmp	.+22     	; 0x1f58 <self_test+0x4b6>
		mag_flag = 1;
	}else printf("HMC: BAD\n\r");
    1f42:	00 d0       	rcall	.+0      	; 0x1f44 <self_test+0x4a2>
    1f44:	84 e4       	ldi	r24, 0x44	; 68
    1f46:	94 e0       	ldi	r25, 0x04	; 4
    1f48:	ed b7       	in	r30, 0x3d	; 61
    1f4a:	fe b7       	in	r31, 0x3e	; 62
    1f4c:	92 83       	std	Z+2, r25	; 0x02
    1f4e:	81 83       	std	Z+1, r24	; 0x01
    1f50:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
    1f54:	c0 e0       	ldi	r28, 0x00	; 0
    1f56:	d0 e0       	ldi	r29, 0x00	; 0
    1f58:	0f 90       	pop	r0
    1f5a:	0f 90       	pop	r0
	
	if(x == 0xE5)
    1f5c:	f5 ee       	ldi	r31, 0xE5	; 229
    1f5e:	ef 16       	cp	r14, r31
    1f60:	61 f4       	brne	.+24     	; 0x1f7a <self_test+0x4d8>
	{
		printf("ADXL: GOOD\n\r");
    1f62:	00 d0       	rcall	.+0      	; 0x1f64 <self_test+0x4c2>
    1f64:	8f e4       	ldi	r24, 0x4F	; 79
    1f66:	94 e0       	ldi	r25, 0x04	; 4
    1f68:	ed b7       	in	r30, 0x3d	; 61
    1f6a:	fe b7       	in	r31, 0x3e	; 62
    1f6c:	92 83       	std	Z+2, r25	; 0x02
    1f6e:	81 83       	std	Z+1, r24	; 0x01
    1f70:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
    1f74:	81 e0       	ldi	r24, 0x01	; 1
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	0b c0       	rjmp	.+22     	; 0x1f90 <self_test+0x4ee>
		accel_flag = 1;
	}else printf("ADXL: BAD\n\r");
    1f7a:	00 d0       	rcall	.+0      	; 0x1f7c <self_test+0x4da>
    1f7c:	8c e5       	ldi	r24, 0x5C	; 92
    1f7e:	94 e0       	ldi	r25, 0x04	; 4
    1f80:	ed b7       	in	r30, 0x3d	; 61
    1f82:	fe b7       	in	r31, 0x3e	; 62
    1f84:	92 83       	std	Z+2, r25	; 0x02
    1f86:	81 83       	std	Z+1, r24	; 0x01
    1f88:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
    1f8c:	80 e0       	ldi	r24, 0x00	; 0
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	0f 90       	pop	r0
    1f92:	0f 90       	pop	r0
	
	if(gyro_flag == 1 && mag_flag == 1 && accel_flag == 1)
    1f94:	01 30       	cpi	r16, 0x01	; 1
    1f96:	11 05       	cpc	r17, r1
    1f98:	99 f5       	brne	.+102    	; 0x2000 <self_test+0x55e>
    1f9a:	21 97       	sbiw	r28, 0x01	; 1
    1f9c:	89 f5       	brne	.+98     	; 0x2000 <self_test+0x55e>
    1f9e:	01 97       	sbiw	r24, 0x01	; 1
    1fa0:	79 f5       	brne	.+94     	; 0x2000 <self_test+0x55e>
	{
		sbi(PORTB, 5);
    1fa2:	2d 9a       	sbi	0x05, 5	; 5
		delay_ms(1000);
    1fa4:	88 ee       	ldi	r24, 0xE8	; 232
    1fa6:	93 e0       	ldi	r25, 0x03	; 3
    1fa8:	0e 94 0b 01 	call	0x216	; 0x216 <delay_ms>
		cbi(PORTB, 5);
    1fac:	2d 98       	cbi	0x05, 5	; 5
		delay_ms(1000);
    1fae:	88 ee       	ldi	r24, 0xE8	; 232
    1fb0:	93 e0       	ldi	r25, 0x03	; 3
    1fb2:	0e 94 0b 01 	call	0x216	; 0x216 <delay_ms>
		sbi(PORTB, 5);
    1fb6:	2d 9a       	sbi	0x05, 5	; 5
		delay_ms(1000);
    1fb8:	88 ee       	ldi	r24, 0xE8	; 232
    1fba:	93 e0       	ldi	r25, 0x03	; 3
    1fbc:	0e 94 0b 01 	call	0x216	; 0x216 <delay_ms>
		cbi(PORTB, 5);
    1fc0:	2d 98       	cbi	0x05, 5	; 5
		delay_ms(1000);
    1fc2:	88 ee       	ldi	r24, 0xE8	; 232
    1fc4:	93 e0       	ldi	r25, 0x03	; 3
    1fc6:	0e 94 0b 01 	call	0x216	; 0x216 <delay_ms>
		sbi(PORTB, 5);
    1fca:	2d 9a       	sbi	0x05, 5	; 5
		delay_ms(1000);
    1fcc:	88 ee       	ldi	r24, 0xE8	; 232
    1fce:	93 e0       	ldi	r25, 0x03	; 3
    1fd0:	0e 94 0b 01 	call	0x216	; 0x216 <delay_ms>
		cbi(PORTB, 5);
    1fd4:	2d 98       	cbi	0x05, 5	; 5
		delay_ms(1000);
    1fd6:	88 ee       	ldi	r24, 0xE8	; 232
    1fd8:	93 e0       	ldi	r25, 0x03	; 3
    1fda:	0e 94 0b 01 	call	0x216	; 0x216 <delay_ms>
		sbi(PORTB, 5);
    1fde:	2d 9a       	sbi	0x05, 5	; 5
		delay_ms(1000);
    1fe0:	88 ee       	ldi	r24, 0xE8	; 232
    1fe2:	93 e0       	ldi	r25, 0x03	; 3
    1fe4:	0e 94 0b 01 	call	0x216	; 0x216 <delay_ms>
		cbi(PORTB, 5);
    1fe8:	2d 98       	cbi	0x05, 5	; 5
		delay_ms(1000);
    1fea:	88 ee       	ldi	r24, 0xE8	; 232
    1fec:	93 e0       	ldi	r25, 0x03	; 3
    1fee:	0e 94 0b 01 	call	0x216	; 0x216 <delay_ms>
		sbi(PORTB, 5);
    1ff2:	2d 9a       	sbi	0x05, 5	; 5
		delay_ms(1000);
    1ff4:	88 ee       	ldi	r24, 0xE8	; 232
    1ff6:	93 e0       	ldi	r25, 0x03	; 3
    1ff8:	0e 94 0b 01 	call	0x216	; 0x216 <delay_ms>
		cbi(PORTB, 5);
    1ffc:	2d 98       	cbi	0x05, 5	; 5
    1ffe:	01 c0       	rjmp	.+2      	; 0x2002 <self_test+0x560>
		
		gyro_flag = 0;
		mag_flag = 0;
		accel_flag = 0;
		
	}else sbi(PORTB, 5);
    2000:	2d 9a       	sbi	0x05, 5	; 5
	
	//while(!(UCSR0A & (1 << RXC0)));
	config_menu();
    2002:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <config_menu>
} 
    2006:	df 91       	pop	r29
    2008:	cf 91       	pop	r28
    200a:	1f 91       	pop	r17
    200c:	0f 91       	pop	r16
    200e:	ff 90       	pop	r15
    2010:	ef 90       	pop	r14
    2012:	08 95       	ret

00002014 <baud_menu>:
	
	auto_raw();
}

void baud_menu(void)
{
    2014:	1f 93       	push	r17
	printf("\n\rBaud Rate Select Menu\n\r");
    2016:	00 d0       	rcall	.+0      	; 0x2018 <baud_menu+0x4>
    2018:	88 e6       	ldi	r24, 0x68	; 104
    201a:	94 e0       	ldi	r25, 0x04	; 4
    201c:	ed b7       	in	r30, 0x3d	; 61
    201e:	fe b7       	in	r31, 0x3e	; 62
    2020:	92 83       	std	Z+2, r25	; 0x02
    2022:	81 83       	std	Z+1, r24	; 0x01
    2024:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
	printf("[1] 4800\n\r");
    2028:	82 e8       	ldi	r24, 0x82	; 130
    202a:	94 e0       	ldi	r25, 0x04	; 4
    202c:	ed b7       	in	r30, 0x3d	; 61
    202e:	fe b7       	in	r31, 0x3e	; 62
    2030:	92 83       	std	Z+2, r25	; 0x02
    2032:	81 83       	std	Z+1, r24	; 0x01
    2034:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
	printf("[2] 9600\n\r");
    2038:	8d e8       	ldi	r24, 0x8D	; 141
    203a:	94 e0       	ldi	r25, 0x04	; 4
    203c:	ed b7       	in	r30, 0x3d	; 61
    203e:	fe b7       	in	r31, 0x3e	; 62
    2040:	92 83       	std	Z+2, r25	; 0x02
    2042:	81 83       	std	Z+1, r24	; 0x01
    2044:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
	printf("[3] 19200\n\r");
    2048:	88 e9       	ldi	r24, 0x98	; 152
    204a:	94 e0       	ldi	r25, 0x04	; 4
    204c:	ed b7       	in	r30, 0x3d	; 61
    204e:	fe b7       	in	r31, 0x3e	; 62
    2050:	92 83       	std	Z+2, r25	; 0x02
    2052:	81 83       	std	Z+1, r24	; 0x01
    2054:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
	printf("[4] 38400\n\r");
    2058:	84 ea       	ldi	r24, 0xA4	; 164
    205a:	94 e0       	ldi	r25, 0x04	; 4
    205c:	ed b7       	in	r30, 0x3d	; 61
    205e:	fe b7       	in	r31, 0x3e	; 62
    2060:	92 83       	std	Z+2, r25	; 0x02
    2062:	81 83       	std	Z+1, r24	; 0x01
    2064:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
	printf("[5] 57600\n\r");
    2068:	80 eb       	ldi	r24, 0xB0	; 176
    206a:	94 e0       	ldi	r25, 0x04	; 4
    206c:	ed b7       	in	r30, 0x3d	; 61
    206e:	fe b7       	in	r31, 0x3e	; 62
    2070:	92 83       	std	Z+2, r25	; 0x02
    2072:	81 83       	std	Z+1, r24	; 0x01
    2074:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
    2078:	0f 90       	pop	r0
    207a:	0f 90       	pop	r0
	return(ubrr);
}

uint8_t uart_getchar(void)
{
    while( !(UCSR0A & (1<<RXC0)) );
    207c:	80 91 c0 00 	lds	r24, 0x00C0
    2080:	87 ff       	sbrs	r24, 7
    2082:	fc cf       	rjmp	.-8      	; 0x207c <baud_menu+0x68>
    return(UDR0);
    2084:	10 91 c6 00 	lds	r17, 0x00C6
	uint8_t choicer=0;
	
	while(1)
	{
		choicer = uart_getchar();
		putchar('\n');
    2088:	60 91 b0 05 	lds	r22, 0x05B0
    208c:	70 91 b1 05 	lds	r23, 0x05B1
    2090:	8a e0       	ldi	r24, 0x0A	; 10
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	0e 94 d6 12 	call	0x25ac	; 0x25ac <fputc>
		putchar('\r');
    2098:	60 91 b0 05 	lds	r22, 0x05B0
    209c:	70 91 b1 05 	lds	r23, 0x05B1
    20a0:	8d e0       	ldi	r24, 0x0D	; 13
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	0e 94 d6 12 	call	0x25ac	; 0x25ac <fputc>
		
		if(choicer=='1') //4800
    20a8:	11 33       	cpi	r17, 0x31	; 49
    20aa:	91 f5       	brne	.+100    	; 0x2110 <baud_menu+0xfc>
		{
			//outside of default flag: used to notify init not to run default baud value
			write_to_EEPROM(2, 99);
    20ac:	82 e0       	ldi	r24, 0x02	; 2
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	63 e6       	ldi	r22, 0x63	; 99
    20b2:	0e 94 42 0b 	call	0x1684	; 0x1684 <write_to_EEPROM>
			
			//clear other EEPROM values
			write_to_EEPROM(4, 0);
    20b6:	84 e0       	ldi	r24, 0x04	; 4
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	60 e0       	ldi	r22, 0x00	; 0
    20bc:	0e 94 42 0b 	call	0x1684	; 0x1684 <write_to_EEPROM>
			write_to_EEPROM(5, 0);
    20c0:	85 e0       	ldi	r24, 0x05	; 5
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	60 e0       	ldi	r22, 0x00	; 0
    20c6:	0e 94 42 0b 	call	0x1684	; 0x1684 <write_to_EEPROM>
			write_to_EEPROM(6, 0);
    20ca:	86 e0       	ldi	r24, 0x06	; 6
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	60 e0       	ldi	r22, 0x00	; 0
    20d0:	0e 94 42 0b 	call	0x1684	; 0x1684 <write_to_EEPROM>
			write_to_EEPROM(7, 0);
    20d4:	87 e0       	ldi	r24, 0x07	; 7
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	60 e0       	ldi	r22, 0x00	; 0
    20da:	0e 94 42 0b 	call	0x1684	; 0x1684 <write_to_EEPROM>
			
			write_to_EEPROM(3, 4); //baud change flag
    20de:	83 e0       	ldi	r24, 0x03	; 3
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	64 e0       	ldi	r22, 0x04	; 4
    20e4:	0e 94 42 0b 	call	0x1684	; 0x1684 <write_to_EEPROM>
			printf("!change baud rate to 4800bps, reset board!");
    20e8:	00 d0       	rcall	.+0      	; 0x20ea <baud_menu+0xd6>
    20ea:	8c eb       	ldi	r24, 0xBC	; 188
    20ec:	94 e0       	ldi	r25, 0x04	; 4
    20ee:	ed b7       	in	r30, 0x3d	; 61
    20f0:	fe b7       	in	r31, 0x3e	; 62
    20f2:	92 83       	std	Z+2, r25	; 0x02
    20f4:	81 83       	std	Z+1, r24	; 0x01
    20f6:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
			delay_ms(50);
    20fa:	0f 90       	pop	r0
    20fc:	0f 90       	pop	r0
    20fe:	82 e3       	ldi	r24, 0x32	; 50
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	0e 94 0b 01 	call	0x216	; 0x216 <delay_ms>
			UART_Init(207);
    2106:	8f ec       	ldi	r24, 0xCF	; 207
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	0e 94 5f 0a 	call	0x14be	; 0x14be <UART_Init>
    210e:	ff cf       	rjmp	.-2      	; 0x210e <baud_menu+0xfa>
			while(1);
		}
		if(choicer=='2') //9600
    2110:	12 33       	cpi	r17, 0x32	; 50
    2112:	91 f5       	brne	.+100    	; 0x2178 <baud_menu+0x164>
		{
			write_to_EEPROM(2, 99); //outside of default flag
    2114:	82 e0       	ldi	r24, 0x02	; 2
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	63 e6       	ldi	r22, 0x63	; 99
    211a:	0e 94 42 0b 	call	0x1684	; 0x1684 <write_to_EEPROM>
			
			//clear other EEPROM values
			write_to_EEPROM(3, 0);
    211e:	83 e0       	ldi	r24, 0x03	; 3
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	60 e0       	ldi	r22, 0x00	; 0
    2124:	0e 94 42 0b 	call	0x1684	; 0x1684 <write_to_EEPROM>
			write_to_EEPROM(5, 0);
    2128:	85 e0       	ldi	r24, 0x05	; 5
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	60 e0       	ldi	r22, 0x00	; 0
    212e:	0e 94 42 0b 	call	0x1684	; 0x1684 <write_to_EEPROM>
			write_to_EEPROM(6, 0);
    2132:	86 e0       	ldi	r24, 0x06	; 6
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	60 e0       	ldi	r22, 0x00	; 0
    2138:	0e 94 42 0b 	call	0x1684	; 0x1684 <write_to_EEPROM>
			write_to_EEPROM(7, 0);
    213c:	87 e0       	ldi	r24, 0x07	; 7
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	60 e0       	ldi	r22, 0x00	; 0
    2142:	0e 94 42 0b 	call	0x1684	; 0x1684 <write_to_EEPROM>
			
			write_to_EEPROM(4, 9); //baud change flag
    2146:	84 e0       	ldi	r24, 0x04	; 4
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	69 e0       	ldi	r22, 0x09	; 9
    214c:	0e 94 42 0b 	call	0x1684	; 0x1684 <write_to_EEPROM>
			printf("!change baud rate to 9600bps, reset board!");
    2150:	00 d0       	rcall	.+0      	; 0x2152 <baud_menu+0x13e>
    2152:	87 ee       	ldi	r24, 0xE7	; 231
    2154:	94 e0       	ldi	r25, 0x04	; 4
    2156:	ed b7       	in	r30, 0x3d	; 61
    2158:	fe b7       	in	r31, 0x3e	; 62
    215a:	92 83       	std	Z+2, r25	; 0x02
    215c:	81 83       	std	Z+1, r24	; 0x01
    215e:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
			delay_ms(50);
    2162:	0f 90       	pop	r0
    2164:	0f 90       	pop	r0
    2166:	82 e3       	ldi	r24, 0x32	; 50
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	0e 94 0b 01 	call	0x216	; 0x216 <delay_ms>
			UART_Init(103);
    216e:	87 e6       	ldi	r24, 0x67	; 103
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	0e 94 5f 0a 	call	0x14be	; 0x14be <UART_Init>
    2176:	ff cf       	rjmp	.-2      	; 0x2176 <baud_menu+0x162>
			while(1);
		}
		if(choicer=='3') //19200
    2178:	13 33       	cpi	r17, 0x33	; 51
    217a:	91 f5       	brne	.+100    	; 0x21e0 <baud_menu+0x1cc>
		{
			write_to_EEPROM(2, 99); //outside of default flag
    217c:	82 e0       	ldi	r24, 0x02	; 2
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	63 e6       	ldi	r22, 0x63	; 99
    2182:	0e 94 42 0b 	call	0x1684	; 0x1684 <write_to_EEPROM>
			
			//clear other EEPROM values
			write_to_EEPROM(3, 0);
    2186:	83 e0       	ldi	r24, 0x03	; 3
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	60 e0       	ldi	r22, 0x00	; 0
    218c:	0e 94 42 0b 	call	0x1684	; 0x1684 <write_to_EEPROM>
			write_to_EEPROM(4, 0);
    2190:	84 e0       	ldi	r24, 0x04	; 4
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	60 e0       	ldi	r22, 0x00	; 0
    2196:	0e 94 42 0b 	call	0x1684	; 0x1684 <write_to_EEPROM>
			write_to_EEPROM(6, 0);
    219a:	86 e0       	ldi	r24, 0x06	; 6
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	60 e0       	ldi	r22, 0x00	; 0
    21a0:	0e 94 42 0b 	call	0x1684	; 0x1684 <write_to_EEPROM>
			write_to_EEPROM(7, 0);
    21a4:	87 e0       	ldi	r24, 0x07	; 7
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	60 e0       	ldi	r22, 0x00	; 0
    21aa:	0e 94 42 0b 	call	0x1684	; 0x1684 <write_to_EEPROM>
			
			write_to_EEPROM(5, 19); //baud change flag
    21ae:	85 e0       	ldi	r24, 0x05	; 5
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	63 e1       	ldi	r22, 0x13	; 19
    21b4:	0e 94 42 0b 	call	0x1684	; 0x1684 <write_to_EEPROM>
			printf("!change baud rate to 19200bps, reset board!");
    21b8:	00 d0       	rcall	.+0      	; 0x21ba <baud_menu+0x1a6>
    21ba:	82 e1       	ldi	r24, 0x12	; 18
    21bc:	95 e0       	ldi	r25, 0x05	; 5
    21be:	ed b7       	in	r30, 0x3d	; 61
    21c0:	fe b7       	in	r31, 0x3e	; 62
    21c2:	92 83       	std	Z+2, r25	; 0x02
    21c4:	81 83       	std	Z+1, r24	; 0x01
    21c6:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
			delay_ms(50);
    21ca:	0f 90       	pop	r0
    21cc:	0f 90       	pop	r0
    21ce:	82 e3       	ldi	r24, 0x32	; 50
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	0e 94 0b 01 	call	0x216	; 0x216 <delay_ms>
			UART_Init(51);
    21d6:	83 e3       	ldi	r24, 0x33	; 51
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	0e 94 5f 0a 	call	0x14be	; 0x14be <UART_Init>
    21de:	ff cf       	rjmp	.-2      	; 0x21de <baud_menu+0x1ca>
			while(1);
		}
		if(choicer=='4') //38400
    21e0:	14 33       	cpi	r17, 0x34	; 52
    21e2:	91 f5       	brne	.+100    	; 0x2248 <baud_menu+0x234>
		{
			write_to_EEPROM(2, 99); //outside of default flag
    21e4:	82 e0       	ldi	r24, 0x02	; 2
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	63 e6       	ldi	r22, 0x63	; 99
    21ea:	0e 94 42 0b 	call	0x1684	; 0x1684 <write_to_EEPROM>
			
			//clear other EEPROM values
			write_to_EEPROM(3, 0);
    21ee:	83 e0       	ldi	r24, 0x03	; 3
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	60 e0       	ldi	r22, 0x00	; 0
    21f4:	0e 94 42 0b 	call	0x1684	; 0x1684 <write_to_EEPROM>
			write_to_EEPROM(4, 0);
    21f8:	84 e0       	ldi	r24, 0x04	; 4
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	60 e0       	ldi	r22, 0x00	; 0
    21fe:	0e 94 42 0b 	call	0x1684	; 0x1684 <write_to_EEPROM>
			write_to_EEPROM(5, 0);
    2202:	85 e0       	ldi	r24, 0x05	; 5
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	60 e0       	ldi	r22, 0x00	; 0
    2208:	0e 94 42 0b 	call	0x1684	; 0x1684 <write_to_EEPROM>
			write_to_EEPROM(7, 0);
    220c:	87 e0       	ldi	r24, 0x07	; 7
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	60 e0       	ldi	r22, 0x00	; 0
    2212:	0e 94 42 0b 	call	0x1684	; 0x1684 <write_to_EEPROM>
			
			write_to_EEPROM(6, 38); //baud change flag
    2216:	86 e0       	ldi	r24, 0x06	; 6
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	66 e2       	ldi	r22, 0x26	; 38
    221c:	0e 94 42 0b 	call	0x1684	; 0x1684 <write_to_EEPROM>
			printf("!change baud rate to 38400bps, reset board!");
    2220:	00 d0       	rcall	.+0      	; 0x2222 <baud_menu+0x20e>
    2222:	8e e3       	ldi	r24, 0x3E	; 62
    2224:	95 e0       	ldi	r25, 0x05	; 5
    2226:	ed b7       	in	r30, 0x3d	; 61
    2228:	fe b7       	in	r31, 0x3e	; 62
    222a:	92 83       	std	Z+2, r25	; 0x02
    222c:	81 83       	std	Z+1, r24	; 0x01
    222e:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
			delay_ms(50);
    2232:	0f 90       	pop	r0
    2234:	0f 90       	pop	r0
    2236:	82 e3       	ldi	r24, 0x32	; 50
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	0e 94 0b 01 	call	0x216	; 0x216 <delay_ms>
			UART_Init(25);
    223e:	89 e1       	ldi	r24, 0x19	; 25
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	0e 94 5f 0a 	call	0x14be	; 0x14be <UART_Init>
    2246:	ff cf       	rjmp	.-2      	; 0x2246 <baud_menu+0x232>
			while(1);
		}
		if(choicer=='5') //57600
    2248:	15 33       	cpi	r17, 0x35	; 53
    224a:	91 f5       	brne	.+100    	; 0x22b0 <baud_menu+0x29c>
		{
			write_to_EEPROM(2, 99); //outside of default flag
    224c:	82 e0       	ldi	r24, 0x02	; 2
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	63 e6       	ldi	r22, 0x63	; 99
    2252:	0e 94 42 0b 	call	0x1684	; 0x1684 <write_to_EEPROM>
			
			//clear other EEPROM values
			write_to_EEPROM(3, 0);
    2256:	83 e0       	ldi	r24, 0x03	; 3
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	60 e0       	ldi	r22, 0x00	; 0
    225c:	0e 94 42 0b 	call	0x1684	; 0x1684 <write_to_EEPROM>
			write_to_EEPROM(4, 0);
    2260:	84 e0       	ldi	r24, 0x04	; 4
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	60 e0       	ldi	r22, 0x00	; 0
    2266:	0e 94 42 0b 	call	0x1684	; 0x1684 <write_to_EEPROM>
			write_to_EEPROM(5, 0);
    226a:	85 e0       	ldi	r24, 0x05	; 5
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	60 e0       	ldi	r22, 0x00	; 0
    2270:	0e 94 42 0b 	call	0x1684	; 0x1684 <write_to_EEPROM>
			write_to_EEPROM(6, 0);
    2274:	86 e0       	ldi	r24, 0x06	; 6
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	60 e0       	ldi	r22, 0x00	; 0
    227a:	0e 94 42 0b 	call	0x1684	; 0x1684 <write_to_EEPROM>
			
			write_to_EEPROM(7, 57); //baud change flag
    227e:	87 e0       	ldi	r24, 0x07	; 7
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	69 e3       	ldi	r22, 0x39	; 57
    2284:	0e 94 42 0b 	call	0x1684	; 0x1684 <write_to_EEPROM>
			printf("!change baud rate to 57600bps, reset board!");
    2288:	00 d0       	rcall	.+0      	; 0x228a <baud_menu+0x276>
    228a:	8a e6       	ldi	r24, 0x6A	; 106
    228c:	95 e0       	ldi	r25, 0x05	; 5
    228e:	ed b7       	in	r30, 0x3d	; 61
    2290:	fe b7       	in	r31, 0x3e	; 62
    2292:	92 83       	std	Z+2, r25	; 0x02
    2294:	81 83       	std	Z+1, r24	; 0x01
    2296:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
			delay_ms(50);
    229a:	0f 90       	pop	r0
    229c:	0f 90       	pop	r0
    229e:	82 e3       	ldi	r24, 0x32	; 50
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	0e 94 0b 01 	call	0x216	; 0x216 <delay_ms>
			UART_Init(16);
    22a6:	80 e1       	ldi	r24, 0x10	; 16
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	0e 94 5f 0a 	call	0x14be	; 0x14be <UART_Init>
    22ae:	ff cf       	rjmp	.-2      	; 0x22ae <baud_menu+0x29a>
			while(1);
		}
		if((choicer < 0X31) || (choicer > 0x35))config_menu(); //if choice is not #s 1-5 goto conig menu
    22b0:	11 53       	subi	r17, 0x31	; 49
    22b2:	15 30       	cpi	r17, 0x05	; 5
    22b4:	08 f4       	brcc	.+2      	; 0x22b8 <baud_menu+0x2a4>
    22b6:	e2 ce       	rjmp	.-572    	; 0x207c <baud_menu+0x68>
    22b8:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <config_menu>
    22bc:	df ce       	rjmp	.-578    	; 0x207c <baud_menu+0x68>

000022be <auto_raw>:
	printf("z=%4d \n\r", z_accel());
	delay_ms(20);
}

void auto_raw(void)
{
    22be:	cf 92       	push	r12
    22c0:	df 92       	push	r13
    22c2:	ef 92       	push	r14
    22c4:	ff 92       	push	r15
    22c6:	0f 93       	push	r16
    22c8:	1f 93       	push	r17
    22ca:	cf 93       	push	r28
    22cc:	df 93       	push	r29
    22ce:	00 e0       	ldi	r16, 0x00	; 0
    22d0:	10 e0       	ldi	r17, 0x00	; 0
	//while there is not a button pressed
	while(!(UCSR0A & (1 << RXC0)))
	{
		//prints the raw vaues with a '$' start and '#\n\r' end	
		printf("$");
		printf("%d,", x_accel());
    22d2:	cd e0       	ldi	r28, 0x0D	; 13
    22d4:	d4 e0       	ldi	r29, 0x04	; 4
		printf("%d,", z_gyro());
		if (ticks++ % 20 == 0) // Only once each 20 ticks, i.e. 400ms
			magnetometer();
		printf("%d,", x_mag);
		printf("%d,", y_mag);
		printf("%d", z_mag);
    22d6:	61 e1       	ldi	r22, 0x11	; 17
    22d8:	c6 2e       	mov	r12, r22
    22da:	64 e0       	ldi	r22, 0x04	; 4
    22dc:	d6 2e       	mov	r13, r22
		printf("#\n\r");
    22de:	54 e1       	ldi	r21, 0x14	; 20
    22e0:	e5 2e       	mov	r14, r21
    22e2:	54 e0       	ldi	r21, 0x04	; 4
    22e4:	f5 2e       	mov	r15, r21
    22e6:	a3 c0       	rjmp	.+326    	; 0x242e <auto_raw+0x170>
	unsigned int ticks = 0;
	//while there is not a button pressed
	while(!(UCSR0A & (1 << RXC0)))
	{
		//prints the raw vaues with a '$' start and '#\n\r' end	
		printf("$");
    22e8:	84 e2       	ldi	r24, 0x24	; 36
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	0e 94 3d 13 	call	0x267a	; 0x267a <putchar>
		printf("%d,", x_accel());
    22f0:	0e 94 ed 06 	call	0xdda	; 0xdda <x_accel>
    22f4:	00 d0       	rcall	.+0      	; 0x22f6 <auto_raw+0x38>
    22f6:	00 d0       	rcall	.+0      	; 0x22f8 <auto_raw+0x3a>
    22f8:	ed b7       	in	r30, 0x3d	; 61
    22fa:	fe b7       	in	r31, 0x3e	; 62
    22fc:	d2 83       	std	Z+2, r29	; 0x02
    22fe:	c1 83       	std	Z+1, r28	; 0x01
    2300:	94 83       	std	Z+4, r25	; 0x04
    2302:	83 83       	std	Z+3, r24	; 0x03
    2304:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
		printf("%d,", y_accel());
    2308:	0f 90       	pop	r0
    230a:	0f 90       	pop	r0
    230c:	0f 90       	pop	r0
    230e:	0f 90       	pop	r0
    2310:	0e 94 13 08 	call	0x1026	; 0x1026 <y_accel>
    2314:	00 d0       	rcall	.+0      	; 0x2316 <auto_raw+0x58>
    2316:	00 d0       	rcall	.+0      	; 0x2318 <auto_raw+0x5a>
    2318:	ed b7       	in	r30, 0x3d	; 61
    231a:	fe b7       	in	r31, 0x3e	; 62
    231c:	d2 83       	std	Z+2, r29	; 0x02
    231e:	c1 83       	std	Z+1, r28	; 0x01
    2320:	94 83       	std	Z+4, r25	; 0x04
    2322:	83 83       	std	Z+3, r24	; 0x03
    2324:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
		printf("%d,", z_accel());
    2328:	0f 90       	pop	r0
    232a:	0f 90       	pop	r0
    232c:	0f 90       	pop	r0
    232e:	0f 90       	pop	r0
    2330:	0e 94 39 09 	call	0x1272	; 0x1272 <z_accel>
    2334:	00 d0       	rcall	.+0      	; 0x2336 <auto_raw+0x78>
    2336:	00 d0       	rcall	.+0      	; 0x2338 <auto_raw+0x7a>
    2338:	ed b7       	in	r30, 0x3d	; 61
    233a:	fe b7       	in	r31, 0x3e	; 62
    233c:	d2 83       	std	Z+2, r29	; 0x02
    233e:	c1 83       	std	Z+1, r28	; 0x01
    2340:	94 83       	std	Z+4, r25	; 0x04
    2342:	83 83       	std	Z+3, r24	; 0x03
    2344:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
		printf("%d,", x_gyro());
    2348:	0f 90       	pop	r0
    234a:	0f 90       	pop	r0
    234c:	0f 90       	pop	r0
    234e:	0f 90       	pop	r0
    2350:	0e 94 32 04 	call	0x864	; 0x864 <x_gyro>
    2354:	00 d0       	rcall	.+0      	; 0x2356 <auto_raw+0x98>
    2356:	00 d0       	rcall	.+0      	; 0x2358 <auto_raw+0x9a>
    2358:	ed b7       	in	r30, 0x3d	; 61
    235a:	fe b7       	in	r31, 0x3e	; 62
    235c:	d2 83       	std	Z+2, r29	; 0x02
    235e:	c1 83       	std	Z+1, r28	; 0x01
    2360:	94 83       	std	Z+4, r25	; 0x04
    2362:	83 83       	std	Z+3, r24	; 0x03
    2364:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
		printf("%d,", y_gyro());
    2368:	0f 90       	pop	r0
    236a:	0f 90       	pop	r0
    236c:	0f 90       	pop	r0
    236e:	0f 90       	pop	r0
    2370:	0e 94 1b 05 	call	0xa36	; 0xa36 <y_gyro>
    2374:	00 d0       	rcall	.+0      	; 0x2376 <auto_raw+0xb8>
    2376:	00 d0       	rcall	.+0      	; 0x2378 <auto_raw+0xba>
    2378:	ed b7       	in	r30, 0x3d	; 61
    237a:	fe b7       	in	r31, 0x3e	; 62
    237c:	d2 83       	std	Z+2, r29	; 0x02
    237e:	c1 83       	std	Z+1, r28	; 0x01
    2380:	94 83       	std	Z+4, r25	; 0x04
    2382:	83 83       	std	Z+3, r24	; 0x03
    2384:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
		printf("%d,", z_gyro());
    2388:	0f 90       	pop	r0
    238a:	0f 90       	pop	r0
    238c:	0f 90       	pop	r0
    238e:	0f 90       	pop	r0
    2390:	0e 94 04 06 	call	0xc08	; 0xc08 <z_gyro>
    2394:	00 d0       	rcall	.+0      	; 0x2396 <auto_raw+0xd8>
    2396:	00 d0       	rcall	.+0      	; 0x2398 <auto_raw+0xda>
    2398:	ed b7       	in	r30, 0x3d	; 61
    239a:	fe b7       	in	r31, 0x3e	; 62
    239c:	d2 83       	std	Z+2, r29	; 0x02
    239e:	c1 83       	std	Z+1, r28	; 0x01
    23a0:	94 83       	std	Z+4, r25	; 0x04
    23a2:	83 83       	std	Z+3, r24	; 0x03
    23a4:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
		if (ticks++ % 20 == 0) // Only once each 20 ticks, i.e. 400ms
    23a8:	c8 01       	movw	r24, r16
    23aa:	64 e1       	ldi	r22, 0x14	; 20
    23ac:	70 e0       	ldi	r23, 0x00	; 0
    23ae:	0e 94 c2 12 	call	0x2584	; 0x2584 <__udivmodhi4>
    23b2:	0f 90       	pop	r0
    23b4:	0f 90       	pop	r0
    23b6:	0f 90       	pop	r0
    23b8:	0f 90       	pop	r0
    23ba:	89 2b       	or	r24, r25
    23bc:	11 f4       	brne	.+4      	; 0x23c2 <auto_raw+0x104>
			magnetometer();
    23be:	0e 94 33 03 	call	0x666	; 0x666 <magnetometer>
		printf("%d,", y_accel());
		printf("%d,", z_accel());
		printf("%d,", x_gyro());
		printf("%d,", y_gyro());
		printf("%d,", z_gyro());
		if (ticks++ % 20 == 0) // Only once each 20 ticks, i.e. 400ms
    23c2:	0f 5f       	subi	r16, 0xFF	; 255
    23c4:	1f 4f       	sbci	r17, 0xFF	; 255
			magnetometer();
		printf("%d,", x_mag);
    23c6:	00 d0       	rcall	.+0      	; 0x23c8 <auto_raw+0x10a>
    23c8:	00 d0       	rcall	.+0      	; 0x23ca <auto_raw+0x10c>
    23ca:	ed b7       	in	r30, 0x3d	; 61
    23cc:	fe b7       	in	r31, 0x3e	; 62
    23ce:	d2 83       	std	Z+2, r29	; 0x02
    23d0:	c1 83       	std	Z+1, r28	; 0x01
    23d2:	80 91 ac 05 	lds	r24, 0x05AC
    23d6:	90 91 ad 05 	lds	r25, 0x05AD
    23da:	94 83       	std	Z+4, r25	; 0x04
    23dc:	83 83       	std	Z+3, r24	; 0x03
    23de:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
		printf("%d,", y_mag);
    23e2:	ed b7       	in	r30, 0x3d	; 61
    23e4:	fe b7       	in	r31, 0x3e	; 62
    23e6:	d2 83       	std	Z+2, r29	; 0x02
    23e8:	c1 83       	std	Z+1, r28	; 0x01
    23ea:	80 91 aa 05 	lds	r24, 0x05AA
    23ee:	90 91 ab 05 	lds	r25, 0x05AB
    23f2:	94 83       	std	Z+4, r25	; 0x04
    23f4:	83 83       	std	Z+3, r24	; 0x03
    23f6:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
		printf("%d", z_mag);
    23fa:	ed b7       	in	r30, 0x3d	; 61
    23fc:	fe b7       	in	r31, 0x3e	; 62
    23fe:	d2 82       	std	Z+2, r13	; 0x02
    2400:	c1 82       	std	Z+1, r12	; 0x01
    2402:	80 91 a8 05 	lds	r24, 0x05A8
    2406:	90 91 a9 05 	lds	r25, 0x05A9
    240a:	94 83       	std	Z+4, r25	; 0x04
    240c:	83 83       	std	Z+3, r24	; 0x03
    240e:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
		printf("#\n\r");
    2412:	0f 90       	pop	r0
    2414:	0f 90       	pop	r0
    2416:	ed b7       	in	r30, 0x3d	; 61
    2418:	fe b7       	in	r31, 0x3e	; 62
    241a:	f2 82       	std	Z+2, r15	; 0x02
    241c:	e1 82       	std	Z+1, r14	; 0x01
    241e:	0e 94 02 13 	call	0x2604	; 0x2604 <printf>
		delay_ms(20);
    2422:	0f 90       	pop	r0
    2424:	0f 90       	pop	r0
    2426:	84 e1       	ldi	r24, 0x14	; 20
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	0e 94 0b 01 	call	0x216	; 0x216 <delay_ms>

void auto_raw(void)
{
	unsigned int ticks = 0;
	//while there is not a button pressed
	while(!(UCSR0A & (1 << RXC0)))
    242e:	80 91 c0 00 	lds	r24, 0x00C0
    2432:	87 ff       	sbrs	r24, 7
    2434:	59 cf       	rjmp	.-334    	; 0x22e8 <auto_raw+0x2a>
	return(ubrr);
}

uint8_t uart_getchar(void)
{
    while( !(UCSR0A & (1<<RXC0)) );
    2436:	80 91 c0 00 	lds	r24, 0x00C0
    243a:	87 ff       	sbrs	r24, 7
    243c:	fc cf       	rjmp	.-8      	; 0x2436 <auto_raw+0x178>
    return(UDR0);
    243e:	80 91 c6 00 	lds	r24, 0x00C6
		printf("#\n\r");
		delay_ms(20);
	}

	//if a button is pressed and that button is ctrl-z, reset autorun, display menu
	if(uart_getchar() == 0x1A)
    2442:	8a 31       	cpi	r24, 0x1A	; 26
    2444:	39 f4       	brne	.+14     	; 0x2454 <auto_raw+0x196>
	{
		write_to_EEPROM(1,0);
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	60 e0       	ldi	r22, 0x00	; 0
    244c:	0e 94 42 0b 	call	0x1684	; 0x1684 <write_to_EEPROM>
		config_menu();
    2450:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <config_menu>
    2454:	00 e0       	ldi	r16, 0x00	; 0
    2456:	10 e0       	ldi	r17, 0x00	; 0
    2458:	ea cf       	rjmp	.-44     	; 0x242e <auto_raw+0x170>

0000245a <config_read>:
	
	config_read();
}

void config_read(void)
{
    245a:	1f 93       	push	r17
//		Data=read_from_EEPROM(0);
unsigned char read_from_EEPROM(unsigned int Address)
{
	//Interrupts are globally disabled!
	
	while(EECR & (1<<EEPE));	//Wait for last Write to complete
    245c:	f9 99       	sbic	0x1f, 1	; 31
    245e:	fe cf       	rjmp	.-4      	; 0x245c <config_read+0x2>
	EEAR = Address;				//Assign the Address Register with "Address"
    2460:	81 e0       	ldi	r24, 0x01	; 1
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	92 bd       	out	0x22, r25	; 34
    2466:	81 bd       	out	0x21, r24	; 33
	EECR |= (1<<EERE); 			//Start Read by writing to EER
    2468:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR;				//EEPROM Data is returned
    246a:	80 b5       	in	r24, 0x20	; 32

void config_read(void)
{
	uint8_t choice=0;
	
	if(read_from_EEPROM(1) != 48)
    246c:	80 33       	cpi	r24, 0x30	; 48
    246e:	09 f4       	brne	.+2      	; 0x2472 <config_read+0x18>
    2470:	6f c0       	rjmp	.+222    	; 0x2550 <config_read+0xf6>
	return(ubrr);
}

uint8_t uart_getchar(void)
{
    while( !(UCSR0A & (1<<RXC0)) );
    2472:	80 91 c0 00 	lds	r24, 0x00C0
    2476:	87 ff       	sbrs	r24, 7
    2478:	fc cf       	rjmp	.-8      	; 0x2472 <config_read+0x18>
    return(UDR0);
    247a:	10 91 c6 00 	lds	r17, 0x00C6
	if(read_from_EEPROM(1) != 48)
	{
		while(1)
		{
			choice = uart_getchar();
			putchar('\n');
    247e:	60 91 b0 05 	lds	r22, 0x05B0
    2482:	70 91 b1 05 	lds	r23, 0x05B1
    2486:	8a e0       	ldi	r24, 0x0A	; 10
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	0e 94 d6 12 	call	0x25ac	; 0x25ac <fputc>
			putchar('\r');
    248e:	60 91 b0 05 	lds	r22, 0x05B0
    2492:	70 91 b1 05 	lds	r23, 0x05B1
    2496:	8d e0       	ldi	r24, 0x0D	; 13
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	0e 94 d6 12 	call	0x25ac	; 0x25ac <fputc>
			
			if(choice=='1')
    249e:	11 33       	cpi	r17, 0x31	; 49
    24a0:	51 f4       	brne	.+20     	; 0x24b6 <config_read+0x5c>
    24a2:	02 c0       	rjmp	.+4      	; 0x24a8 <config_read+0x4e>
			{
				while(!(UCSR0A & (1 << RXC0)))print_adxl345();
    24a4:	0e 94 0b 0c 	call	0x1816	; 0x1816 <print_adxl345>
    24a8:	80 91 c0 00 	lds	r24, 0x00C0
    24ac:	87 ff       	sbrs	r24, 7
    24ae:	fa cf       	rjmp	.-12     	; 0x24a4 <config_read+0x4a>
				config_menu();
    24b0:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <config_menu>
    24b4:	1c c0       	rjmp	.+56     	; 0x24ee <config_read+0x94>
			}
			if(choice=='2')
    24b6:	12 33       	cpi	r17, 0x32	; 50
    24b8:	71 f4       	brne	.+28     	; 0x24d6 <config_read+0x7c>
    24ba:	06 c0       	rjmp	.+12     	; 0x24c8 <config_read+0x6e>
			{
				while(!(UCSR0A & (1 << RXC0)))
				{
					print_hmc5883();
    24bc:	0e 94 8c 0b 	call	0x1718	; 0x1718 <print_hmc5883>
					delay_ms(350);//at least 100ms interval between measurements
    24c0:	8e e5       	ldi	r24, 0x5E	; 94
    24c2:	91 e0       	ldi	r25, 0x01	; 1
    24c4:	0e 94 0b 01 	call	0x216	; 0x216 <delay_ms>
				while(!(UCSR0A & (1 << RXC0)))print_adxl345();
				config_menu();
			}
			if(choice=='2')
			{
				while(!(UCSR0A & (1 << RXC0)))
    24c8:	80 91 c0 00 	lds	r24, 0x00C0
    24cc:	87 ff       	sbrs	r24, 7
    24ce:	f6 cf       	rjmp	.-20     	; 0x24bc <config_read+0x62>
				{
					print_hmc5883();
					delay_ms(350);//at least 100ms interval between measurements
				}
				config_menu();
    24d0:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <config_menu>
    24d4:	18 c0       	rjmp	.+48     	; 0x2506 <config_read+0xac>
			}
			if(choice=='3')
    24d6:	13 33       	cpi	r17, 0x33	; 51
    24d8:	19 f0       	breq	.+6      	; 0x24e0 <config_read+0x86>
    24da:	09 c0       	rjmp	.+18     	; 0x24ee <config_read+0x94>
			{
				while(!(UCSR0A & (1 << RXC0)))print_itg3200();
    24dc:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <print_itg3200>
    24e0:	80 91 c0 00 	lds	r24, 0x00C0
    24e4:	87 ff       	sbrs	r24, 7
    24e6:	fa cf       	rjmp	.-12     	; 0x24dc <config_read+0x82>
				config_menu();
    24e8:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <config_menu>
    24ec:	11 c0       	rjmp	.+34     	; 0x2510 <config_read+0xb6>
			}
			if(choice=='4')
    24ee:	14 33       	cpi	r17, 0x34	; 52
    24f0:	19 f0       	breq	.+6      	; 0x24f8 <config_read+0x9e>
    24f2:	09 c0       	rjmp	.+18     	; 0x2506 <config_read+0xac>
			{
				while(!(UCSR0A & (1 << RXC0)))raw();
    24f4:	0e 94 46 0c 	call	0x188c	; 0x188c <raw>
    24f8:	80 91 c0 00 	lds	r24, 0x00C0
    24fc:	87 ff       	sbrs	r24, 7
    24fe:	fa cf       	rjmp	.-12     	; 0x24f4 <config_read+0x9a>
				config_menu();
    2500:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <config_menu>
    2504:	0a c0       	rjmp	.+20     	; 0x251a <config_read+0xc0>
			}
			if(choice=='5')
    2506:	15 33       	cpi	r17, 0x35	; 53
    2508:	19 f4       	brne	.+6      	; 0x2510 <config_read+0xb6>
			{
				baud_menu();
    250a:	0e 94 0a 10 	call	0x2014	; 0x2014 <baud_menu>
    250e:	17 c0       	rjmp	.+46     	; 0x253e <config_read+0xe4>
				config_menu();
			}
			if(choice==0x10) //if ctrl-p
    2510:	10 31       	cpi	r17, 0x10	; 16
    2512:	19 f4       	brne	.+6      	; 0x251a <config_read+0xc0>
			{
				self_test();
    2514:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <self_test>
    2518:	ac cf       	rjmp	.-168    	; 0x2472 <config_read+0x18>
			}
			if(choice==0x1A) //if ctrl-z
    251a:	1a 31       	cpi	r17, 0x1A	; 26
    251c:	41 f4       	brne	.+16     	; 0x252e <config_read+0xd4>
			{
				write_to_EEPROM(1,48);
    251e:	81 e0       	ldi	r24, 0x01	; 1
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	60 e3       	ldi	r22, 0x30	; 48
    2524:	0e 94 42 0b 	call	0x1684	; 0x1684 <write_to_EEPROM>
				auto_raw();
    2528:	0e 94 5f 11 	call	0x22be	; 0x22be <auto_raw>
    252c:	a2 cf       	rjmp	.-188    	; 0x2472 <config_read+0x18>
			}
			if(choice==0x3F) //if ?
    252e:	1f 33       	cpi	r17, 0x3F	; 63
    2530:	49 f4       	brne	.+18     	; 0x2544 <config_read+0xea>
			{
				help();
    2532:	0e 94 bf 0b 	call	0x177e	; 0x177e <help>
				while(!(UCSR0A & (1 << RXC0)));
    2536:	80 91 c0 00 	lds	r24, 0x00C0
    253a:	87 ff       	sbrs	r24, 7
    253c:	fc cf       	rjmp	.-8      	; 0x2536 <config_read+0xdc>
				config_menu();
    253e:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <config_menu>
    2542:	97 cf       	rjmp	.-210    	; 0x2472 <config_read+0x18>
			}
			if(choice==0xFF) config_read();
    2544:	1f 3f       	cpi	r17, 0xFF	; 255
    2546:	09 f0       	breq	.+2      	; 0x254a <config_read+0xf0>
    2548:	94 cf       	rjmp	.-216    	; 0x2472 <config_read+0x18>
    254a:	0e 94 2d 12 	call	0x245a	; 0x245a <config_read>
    254e:	91 cf       	rjmp	.-222    	; 0x2472 <config_read+0x18>
		}
	}else auto_raw();
    2550:	0e 94 5f 11 	call	0x22be	; 0x22be <auto_raw>

}
    2554:	1f 91       	pop	r17
    2556:	08 95       	ret

00002558 <main>:
uint16_t x_mag, y_mag, z_mag; //x, y, and z magnetometer values
long baud;

/////===========MAIN=====================/////////////////////
int main(void)
{
    2558:	cf 93       	push	r28
    255a:	df 93       	push	r29
	init();
    255c:	0e 94 16 0b 	call	0x162c	; 0x162c <init>
	self_test();
    2560:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <self_test>
unsigned char read_from_EEPROM(unsigned int Address)
{
	//Interrupts are globally disabled!
	
	while(EECR & (1<<EEPE));	//Wait for last Write to complete
	EEAR = Address;				//Assign the Address Register with "Address"
    2564:	c1 e0       	ldi	r28, 0x01	; 1
    2566:	d0 e0       	ldi	r29, 0x00	; 0
//		Data=read_from_EEPROM(0);
unsigned char read_from_EEPROM(unsigned int Address)
{
	//Interrupts are globally disabled!
	
	while(EECR & (1<<EEPE));	//Wait for last Write to complete
    2568:	f9 99       	sbic	0x1f, 1	; 31
    256a:	fe cf       	rjmp	.-4      	; 0x2568 <main+0x10>
	EEAR = Address;				//Assign the Address Register with "Address"
    256c:	d2 bd       	out	0x22, r29	; 34
    256e:	c1 bd       	out	0x21, r28	; 33
	EECR |= (1<<EERE); 			//Start Read by writing to EER
    2570:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR;				//EEPROM Data is returned
    2572:	80 b5       	in	r24, 0x20	; 32
	self_test();
	
	while(1)
	{	
		//check to see if autorun is set, if it is don't print the menu
		if(read_from_EEPROM(1) == 48) config_read();
    2574:	80 33       	cpi	r24, 0x30	; 48
    2576:	19 f4       	brne	.+6      	; 0x257e <main+0x26>
    2578:	0e 94 2d 12 	call	0x245a	; 0x245a <config_read>
    257c:	f5 cf       	rjmp	.-22     	; 0x2568 <main+0x10>
		else config_menu();
    257e:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <config_menu>
    2582:	f2 cf       	rjmp	.-28     	; 0x2568 <main+0x10>

00002584 <__udivmodhi4>:
    2584:	aa 1b       	sub	r26, r26
    2586:	bb 1b       	sub	r27, r27
    2588:	51 e1       	ldi	r21, 0x11	; 17
    258a:	07 c0       	rjmp	.+14     	; 0x259a <__udivmodhi4_ep>

0000258c <__udivmodhi4_loop>:
    258c:	aa 1f       	adc	r26, r26
    258e:	bb 1f       	adc	r27, r27
    2590:	a6 17       	cp	r26, r22
    2592:	b7 07       	cpc	r27, r23
    2594:	10 f0       	brcs	.+4      	; 0x259a <__udivmodhi4_ep>
    2596:	a6 1b       	sub	r26, r22
    2598:	b7 0b       	sbc	r27, r23

0000259a <__udivmodhi4_ep>:
    259a:	88 1f       	adc	r24, r24
    259c:	99 1f       	adc	r25, r25
    259e:	5a 95       	dec	r21
    25a0:	a9 f7       	brne	.-22     	; 0x258c <__udivmodhi4_loop>
    25a2:	80 95       	com	r24
    25a4:	90 95       	com	r25
    25a6:	bc 01       	movw	r22, r24
    25a8:	cd 01       	movw	r24, r26
    25aa:	08 95       	ret

000025ac <fputc>:
    25ac:	0f 93       	push	r16
    25ae:	1f 93       	push	r17
    25b0:	cf 93       	push	r28
    25b2:	df 93       	push	r29
    25b4:	8c 01       	movw	r16, r24
    25b6:	eb 01       	movw	r28, r22
    25b8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ba:	81 ff       	sbrs	r24, 1
    25bc:	1b c0       	rjmp	.+54     	; 0x25f4 <fputc+0x48>
    25be:	82 ff       	sbrs	r24, 2
    25c0:	0d c0       	rjmp	.+26     	; 0x25dc <fputc+0x30>
    25c2:	2e 81       	ldd	r18, Y+6	; 0x06
    25c4:	3f 81       	ldd	r19, Y+7	; 0x07
    25c6:	8c 81       	ldd	r24, Y+4	; 0x04
    25c8:	9d 81       	ldd	r25, Y+5	; 0x05
    25ca:	28 17       	cp	r18, r24
    25cc:	39 07       	cpc	r19, r25
    25ce:	64 f4       	brge	.+24     	; 0x25e8 <fputc+0x3c>
    25d0:	e8 81       	ld	r30, Y
    25d2:	f9 81       	ldd	r31, Y+1	; 0x01
    25d4:	01 93       	st	Z+, r16
    25d6:	f9 83       	std	Y+1, r31	; 0x01
    25d8:	e8 83       	st	Y, r30
    25da:	06 c0       	rjmp	.+12     	; 0x25e8 <fputc+0x3c>
    25dc:	e8 85       	ldd	r30, Y+8	; 0x08
    25de:	f9 85       	ldd	r31, Y+9	; 0x09
    25e0:	80 2f       	mov	r24, r16
    25e2:	09 95       	icall
    25e4:	89 2b       	or	r24, r25
    25e6:	31 f4       	brne	.+12     	; 0x25f4 <fputc+0x48>
    25e8:	8e 81       	ldd	r24, Y+6	; 0x06
    25ea:	9f 81       	ldd	r25, Y+7	; 0x07
    25ec:	01 96       	adiw	r24, 0x01	; 1
    25ee:	9f 83       	std	Y+7, r25	; 0x07
    25f0:	8e 83       	std	Y+6, r24	; 0x06
    25f2:	02 c0       	rjmp	.+4      	; 0x25f8 <fputc+0x4c>
    25f4:	0f ef       	ldi	r16, 0xFF	; 255
    25f6:	1f ef       	ldi	r17, 0xFF	; 255
    25f8:	c8 01       	movw	r24, r16
    25fa:	df 91       	pop	r29
    25fc:	cf 91       	pop	r28
    25fe:	1f 91       	pop	r17
    2600:	0f 91       	pop	r16
    2602:	08 95       	ret

00002604 <printf>:
    2604:	a0 e0       	ldi	r26, 0x00	; 0
    2606:	b0 e0       	ldi	r27, 0x00	; 0
    2608:	e8 e0       	ldi	r30, 0x08	; 8
    260a:	f3 e1       	ldi	r31, 0x13	; 19
    260c:	0c 94 a5 15 	jmp	0x2b4a	; 0x2b4a <__prologue_saves__+0x20>
    2610:	fe 01       	movw	r30, r28
    2612:	35 96       	adiw	r30, 0x05	; 5
    2614:	61 91       	ld	r22, Z+
    2616:	71 91       	ld	r23, Z+
    2618:	80 91 b0 05 	lds	r24, 0x05B0
    261c:	90 91 b1 05 	lds	r25, 0x05B1
    2620:	af 01       	movw	r20, r30
    2622:	0e 94 44 13 	call	0x2688	; 0x2688 <vfprintf>
    2626:	20 96       	adiw	r28, 0x00	; 0
    2628:	e2 e0       	ldi	r30, 0x02	; 2
    262a:	0c 94 c1 15 	jmp	0x2b82	; 0x2b82 <__epilogue_restores__+0x20>

0000262e <printf_P>:
    262e:	a0 e0       	ldi	r26, 0x00	; 0
    2630:	b0 e0       	ldi	r27, 0x00	; 0
    2632:	ed e1       	ldi	r30, 0x1D	; 29
    2634:	f3 e1       	ldi	r31, 0x13	; 19
    2636:	0c 94 a5 15 	jmp	0x2b4a	; 0x2b4a <__prologue_saves__+0x20>
    263a:	fe 01       	movw	r30, r28
    263c:	35 96       	adiw	r30, 0x05	; 5
    263e:	61 91       	ld	r22, Z+
    2640:	71 91       	ld	r23, Z+
    2642:	a0 91 b0 05 	lds	r26, 0x05B0
    2646:	b0 91 b1 05 	lds	r27, 0x05B1
    264a:	13 96       	adiw	r26, 0x03	; 3
    264c:	8c 91       	ld	r24, X
    264e:	13 97       	sbiw	r26, 0x03	; 3
    2650:	88 60       	ori	r24, 0x08	; 8
    2652:	13 96       	adiw	r26, 0x03	; 3
    2654:	8c 93       	st	X, r24
    2656:	80 91 b0 05 	lds	r24, 0x05B0
    265a:	90 91 b1 05 	lds	r25, 0x05B1
    265e:	af 01       	movw	r20, r30
    2660:	0e 94 44 13 	call	0x2688	; 0x2688 <vfprintf>
    2664:	e0 91 b0 05 	lds	r30, 0x05B0
    2668:	f0 91 b1 05 	lds	r31, 0x05B1
    266c:	23 81       	ldd	r18, Z+3	; 0x03
    266e:	27 7f       	andi	r18, 0xF7	; 247
    2670:	23 83       	std	Z+3, r18	; 0x03
    2672:	20 96       	adiw	r28, 0x00	; 0
    2674:	e2 e0       	ldi	r30, 0x02	; 2
    2676:	0c 94 c1 15 	jmp	0x2b82	; 0x2b82 <__epilogue_restores__+0x20>

0000267a <putchar>:
    267a:	60 91 b0 05 	lds	r22, 0x05B0
    267e:	70 91 b1 05 	lds	r23, 0x05B1
    2682:	0e 94 d6 12 	call	0x25ac	; 0x25ac <fputc>
    2686:	08 95       	ret

00002688 <vfprintf>:
    2688:	ab e0       	ldi	r26, 0x0B	; 11
    268a:	b0 e0       	ldi	r27, 0x00	; 0
    268c:	ea e4       	ldi	r30, 0x4A	; 74
    268e:	f3 e1       	ldi	r31, 0x13	; 19
    2690:	0c 94 95 15 	jmp	0x2b2a	; 0x2b2a <__prologue_saves__>
    2694:	3c 01       	movw	r6, r24
    2696:	2b 01       	movw	r4, r22
    2698:	5a 01       	movw	r10, r20
    269a:	fc 01       	movw	r30, r24
    269c:	17 82       	std	Z+7, r1	; 0x07
    269e:	16 82       	std	Z+6, r1	; 0x06
    26a0:	83 81       	ldd	r24, Z+3	; 0x03
    26a2:	81 fd       	sbrc	r24, 1
    26a4:	03 c0       	rjmp	.+6      	; 0x26ac <vfprintf+0x24>
    26a6:	6f ef       	ldi	r22, 0xFF	; 255
    26a8:	7f ef       	ldi	r23, 0xFF	; 255
    26aa:	c6 c1       	rjmp	.+908    	; 0x2a38 <vfprintf+0x3b0>
    26ac:	9a e0       	ldi	r25, 0x0A	; 10
    26ae:	89 2e       	mov	r8, r25
    26b0:	1e 01       	movw	r2, r28
    26b2:	08 94       	sec
    26b4:	21 1c       	adc	r2, r1
    26b6:	31 1c       	adc	r3, r1
    26b8:	f3 01       	movw	r30, r6
    26ba:	23 81       	ldd	r18, Z+3	; 0x03
    26bc:	f2 01       	movw	r30, r4
    26be:	23 fd       	sbrc	r18, 3
    26c0:	85 91       	lpm	r24, Z+
    26c2:	23 ff       	sbrs	r18, 3
    26c4:	81 91       	ld	r24, Z+
    26c6:	2f 01       	movw	r4, r30
    26c8:	88 23       	and	r24, r24
    26ca:	09 f4       	brne	.+2      	; 0x26ce <vfprintf+0x46>
    26cc:	b2 c1       	rjmp	.+868    	; 0x2a32 <vfprintf+0x3aa>
    26ce:	85 32       	cpi	r24, 0x25	; 37
    26d0:	39 f4       	brne	.+14     	; 0x26e0 <vfprintf+0x58>
    26d2:	23 fd       	sbrc	r18, 3
    26d4:	85 91       	lpm	r24, Z+
    26d6:	23 ff       	sbrs	r18, 3
    26d8:	81 91       	ld	r24, Z+
    26da:	2f 01       	movw	r4, r30
    26dc:	85 32       	cpi	r24, 0x25	; 37
    26de:	29 f4       	brne	.+10     	; 0x26ea <vfprintf+0x62>
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	b3 01       	movw	r22, r6
    26e4:	0e 94 d6 12 	call	0x25ac	; 0x25ac <fputc>
    26e8:	e7 cf       	rjmp	.-50     	; 0x26b8 <vfprintf+0x30>
    26ea:	98 2f       	mov	r25, r24
    26ec:	ff 24       	eor	r15, r15
    26ee:	ee 24       	eor	r14, r14
    26f0:	99 24       	eor	r9, r9
    26f2:	ff e1       	ldi	r31, 0x1F	; 31
    26f4:	ff 15       	cp	r31, r15
    26f6:	d0 f0       	brcs	.+52     	; 0x272c <vfprintf+0xa4>
    26f8:	9b 32       	cpi	r25, 0x2B	; 43
    26fa:	69 f0       	breq	.+26     	; 0x2716 <vfprintf+0x8e>
    26fc:	9c 32       	cpi	r25, 0x2C	; 44
    26fe:	28 f4       	brcc	.+10     	; 0x270a <vfprintf+0x82>
    2700:	90 32       	cpi	r25, 0x20	; 32
    2702:	59 f0       	breq	.+22     	; 0x271a <vfprintf+0x92>
    2704:	93 32       	cpi	r25, 0x23	; 35
    2706:	91 f4       	brne	.+36     	; 0x272c <vfprintf+0xa4>
    2708:	0e c0       	rjmp	.+28     	; 0x2726 <vfprintf+0x9e>
    270a:	9d 32       	cpi	r25, 0x2D	; 45
    270c:	49 f0       	breq	.+18     	; 0x2720 <vfprintf+0x98>
    270e:	90 33       	cpi	r25, 0x30	; 48
    2710:	69 f4       	brne	.+26     	; 0x272c <vfprintf+0xa4>
    2712:	41 e0       	ldi	r20, 0x01	; 1
    2714:	24 c0       	rjmp	.+72     	; 0x275e <vfprintf+0xd6>
    2716:	52 e0       	ldi	r21, 0x02	; 2
    2718:	f5 2a       	or	r15, r21
    271a:	84 e0       	ldi	r24, 0x04	; 4
    271c:	f8 2a       	or	r15, r24
    271e:	28 c0       	rjmp	.+80     	; 0x2770 <vfprintf+0xe8>
    2720:	98 e0       	ldi	r25, 0x08	; 8
    2722:	f9 2a       	or	r15, r25
    2724:	25 c0       	rjmp	.+74     	; 0x2770 <vfprintf+0xe8>
    2726:	e0 e1       	ldi	r30, 0x10	; 16
    2728:	fe 2a       	or	r15, r30
    272a:	22 c0       	rjmp	.+68     	; 0x2770 <vfprintf+0xe8>
    272c:	f7 fc       	sbrc	r15, 7
    272e:	29 c0       	rjmp	.+82     	; 0x2782 <vfprintf+0xfa>
    2730:	89 2f       	mov	r24, r25
    2732:	80 53       	subi	r24, 0x30	; 48
    2734:	8a 30       	cpi	r24, 0x0A	; 10
    2736:	70 f4       	brcc	.+28     	; 0x2754 <vfprintf+0xcc>
    2738:	f6 fe       	sbrs	r15, 6
    273a:	05 c0       	rjmp	.+10     	; 0x2746 <vfprintf+0xbe>
    273c:	98 9c       	mul	r9, r8
    273e:	90 2c       	mov	r9, r0
    2740:	11 24       	eor	r1, r1
    2742:	98 0e       	add	r9, r24
    2744:	15 c0       	rjmp	.+42     	; 0x2770 <vfprintf+0xe8>
    2746:	e8 9c       	mul	r14, r8
    2748:	e0 2c       	mov	r14, r0
    274a:	11 24       	eor	r1, r1
    274c:	e8 0e       	add	r14, r24
    274e:	f0 e2       	ldi	r31, 0x20	; 32
    2750:	ff 2a       	or	r15, r31
    2752:	0e c0       	rjmp	.+28     	; 0x2770 <vfprintf+0xe8>
    2754:	9e 32       	cpi	r25, 0x2E	; 46
    2756:	29 f4       	brne	.+10     	; 0x2762 <vfprintf+0xda>
    2758:	f6 fc       	sbrc	r15, 6
    275a:	6b c1       	rjmp	.+726    	; 0x2a32 <vfprintf+0x3aa>
    275c:	40 e4       	ldi	r20, 0x40	; 64
    275e:	f4 2a       	or	r15, r20
    2760:	07 c0       	rjmp	.+14     	; 0x2770 <vfprintf+0xe8>
    2762:	9c 36       	cpi	r25, 0x6C	; 108
    2764:	19 f4       	brne	.+6      	; 0x276c <vfprintf+0xe4>
    2766:	50 e8       	ldi	r21, 0x80	; 128
    2768:	f5 2a       	or	r15, r21
    276a:	02 c0       	rjmp	.+4      	; 0x2770 <vfprintf+0xe8>
    276c:	98 36       	cpi	r25, 0x68	; 104
    276e:	49 f4       	brne	.+18     	; 0x2782 <vfprintf+0xfa>
    2770:	f2 01       	movw	r30, r4
    2772:	23 fd       	sbrc	r18, 3
    2774:	95 91       	lpm	r25, Z+
    2776:	23 ff       	sbrs	r18, 3
    2778:	91 91       	ld	r25, Z+
    277a:	2f 01       	movw	r4, r30
    277c:	99 23       	and	r25, r25
    277e:	09 f0       	breq	.+2      	; 0x2782 <vfprintf+0xfa>
    2780:	b8 cf       	rjmp	.-144    	; 0x26f2 <vfprintf+0x6a>
    2782:	89 2f       	mov	r24, r25
    2784:	85 54       	subi	r24, 0x45	; 69
    2786:	83 30       	cpi	r24, 0x03	; 3
    2788:	18 f0       	brcs	.+6      	; 0x2790 <vfprintf+0x108>
    278a:	80 52       	subi	r24, 0x20	; 32
    278c:	83 30       	cpi	r24, 0x03	; 3
    278e:	38 f4       	brcc	.+14     	; 0x279e <vfprintf+0x116>
    2790:	44 e0       	ldi	r20, 0x04	; 4
    2792:	50 e0       	ldi	r21, 0x00	; 0
    2794:	a4 0e       	add	r10, r20
    2796:	b5 1e       	adc	r11, r21
    2798:	5f e3       	ldi	r21, 0x3F	; 63
    279a:	59 83       	std	Y+1, r21	; 0x01
    279c:	0f c0       	rjmp	.+30     	; 0x27bc <vfprintf+0x134>
    279e:	93 36       	cpi	r25, 0x63	; 99
    27a0:	31 f0       	breq	.+12     	; 0x27ae <vfprintf+0x126>
    27a2:	93 37       	cpi	r25, 0x73	; 115
    27a4:	79 f0       	breq	.+30     	; 0x27c4 <vfprintf+0x13c>
    27a6:	93 35       	cpi	r25, 0x53	; 83
    27a8:	09 f0       	breq	.+2      	; 0x27ac <vfprintf+0x124>
    27aa:	56 c0       	rjmp	.+172    	; 0x2858 <vfprintf+0x1d0>
    27ac:	20 c0       	rjmp	.+64     	; 0x27ee <vfprintf+0x166>
    27ae:	f5 01       	movw	r30, r10
    27b0:	80 81       	ld	r24, Z
    27b2:	89 83       	std	Y+1, r24	; 0x01
    27b4:	42 e0       	ldi	r20, 0x02	; 2
    27b6:	50 e0       	ldi	r21, 0x00	; 0
    27b8:	a4 0e       	add	r10, r20
    27ba:	b5 1e       	adc	r11, r21
    27bc:	61 01       	movw	r12, r2
    27be:	01 e0       	ldi	r16, 0x01	; 1
    27c0:	10 e0       	ldi	r17, 0x00	; 0
    27c2:	12 c0       	rjmp	.+36     	; 0x27e8 <vfprintf+0x160>
    27c4:	f5 01       	movw	r30, r10
    27c6:	c0 80       	ld	r12, Z
    27c8:	d1 80       	ldd	r13, Z+1	; 0x01
    27ca:	f6 fc       	sbrc	r15, 6
    27cc:	03 c0       	rjmp	.+6      	; 0x27d4 <vfprintf+0x14c>
    27ce:	6f ef       	ldi	r22, 0xFF	; 255
    27d0:	7f ef       	ldi	r23, 0xFF	; 255
    27d2:	02 c0       	rjmp	.+4      	; 0x27d8 <vfprintf+0x150>
    27d4:	69 2d       	mov	r22, r9
    27d6:	70 e0       	ldi	r23, 0x00	; 0
    27d8:	42 e0       	ldi	r20, 0x02	; 2
    27da:	50 e0       	ldi	r21, 0x00	; 0
    27dc:	a4 0e       	add	r10, r20
    27de:	b5 1e       	adc	r11, r21
    27e0:	c6 01       	movw	r24, r12
    27e2:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <strnlen>
    27e6:	8c 01       	movw	r16, r24
    27e8:	5f e7       	ldi	r21, 0x7F	; 127
    27ea:	f5 22       	and	r15, r21
    27ec:	14 c0       	rjmp	.+40     	; 0x2816 <vfprintf+0x18e>
    27ee:	f5 01       	movw	r30, r10
    27f0:	c0 80       	ld	r12, Z
    27f2:	d1 80       	ldd	r13, Z+1	; 0x01
    27f4:	f6 fc       	sbrc	r15, 6
    27f6:	03 c0       	rjmp	.+6      	; 0x27fe <vfprintf+0x176>
    27f8:	6f ef       	ldi	r22, 0xFF	; 255
    27fa:	7f ef       	ldi	r23, 0xFF	; 255
    27fc:	02 c0       	rjmp	.+4      	; 0x2802 <vfprintf+0x17a>
    27fe:	69 2d       	mov	r22, r9
    2800:	70 e0       	ldi	r23, 0x00	; 0
    2802:	42 e0       	ldi	r20, 0x02	; 2
    2804:	50 e0       	ldi	r21, 0x00	; 0
    2806:	a4 0e       	add	r10, r20
    2808:	b5 1e       	adc	r11, r21
    280a:	c6 01       	movw	r24, r12
    280c:	0e 94 21 15 	call	0x2a42	; 0x2a42 <strnlen_P>
    2810:	8c 01       	movw	r16, r24
    2812:	50 e8       	ldi	r21, 0x80	; 128
    2814:	f5 2a       	or	r15, r21
    2816:	f3 fe       	sbrs	r15, 3
    2818:	07 c0       	rjmp	.+14     	; 0x2828 <vfprintf+0x1a0>
    281a:	1a c0       	rjmp	.+52     	; 0x2850 <vfprintf+0x1c8>
    281c:	80 e2       	ldi	r24, 0x20	; 32
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	b3 01       	movw	r22, r6
    2822:	0e 94 d6 12 	call	0x25ac	; 0x25ac <fputc>
    2826:	ea 94       	dec	r14
    2828:	8e 2d       	mov	r24, r14
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	08 17       	cp	r16, r24
    282e:	19 07       	cpc	r17, r25
    2830:	a8 f3       	brcs	.-22     	; 0x281c <vfprintf+0x194>
    2832:	0e c0       	rjmp	.+28     	; 0x2850 <vfprintf+0x1c8>
    2834:	f6 01       	movw	r30, r12
    2836:	f7 fc       	sbrc	r15, 7
    2838:	85 91       	lpm	r24, Z+
    283a:	f7 fe       	sbrs	r15, 7
    283c:	81 91       	ld	r24, Z+
    283e:	6f 01       	movw	r12, r30
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	b3 01       	movw	r22, r6
    2844:	0e 94 d6 12 	call	0x25ac	; 0x25ac <fputc>
    2848:	e1 10       	cpse	r14, r1
    284a:	ea 94       	dec	r14
    284c:	01 50       	subi	r16, 0x01	; 1
    284e:	10 40       	sbci	r17, 0x00	; 0
    2850:	01 15       	cp	r16, r1
    2852:	11 05       	cpc	r17, r1
    2854:	79 f7       	brne	.-34     	; 0x2834 <vfprintf+0x1ac>
    2856:	ea c0       	rjmp	.+468    	; 0x2a2c <vfprintf+0x3a4>
    2858:	94 36       	cpi	r25, 0x64	; 100
    285a:	11 f0       	breq	.+4      	; 0x2860 <vfprintf+0x1d8>
    285c:	99 36       	cpi	r25, 0x69	; 105
    285e:	69 f5       	brne	.+90     	; 0x28ba <vfprintf+0x232>
    2860:	f7 fe       	sbrs	r15, 7
    2862:	08 c0       	rjmp	.+16     	; 0x2874 <vfprintf+0x1ec>
    2864:	f5 01       	movw	r30, r10
    2866:	20 81       	ld	r18, Z
    2868:	31 81       	ldd	r19, Z+1	; 0x01
    286a:	42 81       	ldd	r20, Z+2	; 0x02
    286c:	53 81       	ldd	r21, Z+3	; 0x03
    286e:	84 e0       	ldi	r24, 0x04	; 4
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	0a c0       	rjmp	.+20     	; 0x2888 <vfprintf+0x200>
    2874:	f5 01       	movw	r30, r10
    2876:	80 81       	ld	r24, Z
    2878:	91 81       	ldd	r25, Z+1	; 0x01
    287a:	9c 01       	movw	r18, r24
    287c:	44 27       	eor	r20, r20
    287e:	37 fd       	sbrc	r19, 7
    2880:	40 95       	com	r20
    2882:	54 2f       	mov	r21, r20
    2884:	82 e0       	ldi	r24, 0x02	; 2
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	a8 0e       	add	r10, r24
    288a:	b9 1e       	adc	r11, r25
    288c:	9f e6       	ldi	r25, 0x6F	; 111
    288e:	f9 22       	and	r15, r25
    2890:	57 ff       	sbrs	r21, 7
    2892:	09 c0       	rjmp	.+18     	; 0x28a6 <vfprintf+0x21e>
    2894:	50 95       	com	r21
    2896:	40 95       	com	r20
    2898:	30 95       	com	r19
    289a:	21 95       	neg	r18
    289c:	3f 4f       	sbci	r19, 0xFF	; 255
    289e:	4f 4f       	sbci	r20, 0xFF	; 255
    28a0:	5f 4f       	sbci	r21, 0xFF	; 255
    28a2:	e0 e8       	ldi	r30, 0x80	; 128
    28a4:	fe 2a       	or	r15, r30
    28a6:	ca 01       	movw	r24, r20
    28a8:	b9 01       	movw	r22, r18
    28aa:	a1 01       	movw	r20, r2
    28ac:	2a e0       	ldi	r18, 0x0A	; 10
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__ultoa_invert>
    28b4:	d8 2e       	mov	r13, r24
    28b6:	d2 18       	sub	r13, r2
    28b8:	40 c0       	rjmp	.+128    	; 0x293a <vfprintf+0x2b2>
    28ba:	95 37       	cpi	r25, 0x75	; 117
    28bc:	29 f4       	brne	.+10     	; 0x28c8 <vfprintf+0x240>
    28be:	1f 2d       	mov	r17, r15
    28c0:	1f 7e       	andi	r17, 0xEF	; 239
    28c2:	2a e0       	ldi	r18, 0x0A	; 10
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	1d c0       	rjmp	.+58     	; 0x2902 <vfprintf+0x27a>
    28c8:	1f 2d       	mov	r17, r15
    28ca:	19 7f       	andi	r17, 0xF9	; 249
    28cc:	9f 36       	cpi	r25, 0x6F	; 111
    28ce:	61 f0       	breq	.+24     	; 0x28e8 <vfprintf+0x260>
    28d0:	90 37       	cpi	r25, 0x70	; 112
    28d2:	20 f4       	brcc	.+8      	; 0x28dc <vfprintf+0x254>
    28d4:	98 35       	cpi	r25, 0x58	; 88
    28d6:	09 f0       	breq	.+2      	; 0x28da <vfprintf+0x252>
    28d8:	ac c0       	rjmp	.+344    	; 0x2a32 <vfprintf+0x3aa>
    28da:	0f c0       	rjmp	.+30     	; 0x28fa <vfprintf+0x272>
    28dc:	90 37       	cpi	r25, 0x70	; 112
    28de:	39 f0       	breq	.+14     	; 0x28ee <vfprintf+0x266>
    28e0:	98 37       	cpi	r25, 0x78	; 120
    28e2:	09 f0       	breq	.+2      	; 0x28e6 <vfprintf+0x25e>
    28e4:	a6 c0       	rjmp	.+332    	; 0x2a32 <vfprintf+0x3aa>
    28e6:	04 c0       	rjmp	.+8      	; 0x28f0 <vfprintf+0x268>
    28e8:	28 e0       	ldi	r18, 0x08	; 8
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	0a c0       	rjmp	.+20     	; 0x2902 <vfprintf+0x27a>
    28ee:	10 61       	ori	r17, 0x10	; 16
    28f0:	14 fd       	sbrc	r17, 4
    28f2:	14 60       	ori	r17, 0x04	; 4
    28f4:	20 e1       	ldi	r18, 0x10	; 16
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	04 c0       	rjmp	.+8      	; 0x2902 <vfprintf+0x27a>
    28fa:	14 fd       	sbrc	r17, 4
    28fc:	16 60       	ori	r17, 0x06	; 6
    28fe:	20 e1       	ldi	r18, 0x10	; 16
    2900:	32 e0       	ldi	r19, 0x02	; 2
    2902:	17 ff       	sbrs	r17, 7
    2904:	08 c0       	rjmp	.+16     	; 0x2916 <vfprintf+0x28e>
    2906:	f5 01       	movw	r30, r10
    2908:	60 81       	ld	r22, Z
    290a:	71 81       	ldd	r23, Z+1	; 0x01
    290c:	82 81       	ldd	r24, Z+2	; 0x02
    290e:	93 81       	ldd	r25, Z+3	; 0x03
    2910:	44 e0       	ldi	r20, 0x04	; 4
    2912:	50 e0       	ldi	r21, 0x00	; 0
    2914:	08 c0       	rjmp	.+16     	; 0x2926 <vfprintf+0x29e>
    2916:	f5 01       	movw	r30, r10
    2918:	80 81       	ld	r24, Z
    291a:	91 81       	ldd	r25, Z+1	; 0x01
    291c:	bc 01       	movw	r22, r24
    291e:	80 e0       	ldi	r24, 0x00	; 0
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	42 e0       	ldi	r20, 0x02	; 2
    2924:	50 e0       	ldi	r21, 0x00	; 0
    2926:	a4 0e       	add	r10, r20
    2928:	b5 1e       	adc	r11, r21
    292a:	a1 01       	movw	r20, r2
    292c:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__ultoa_invert>
    2930:	d8 2e       	mov	r13, r24
    2932:	d2 18       	sub	r13, r2
    2934:	8f e7       	ldi	r24, 0x7F	; 127
    2936:	f8 2e       	mov	r15, r24
    2938:	f1 22       	and	r15, r17
    293a:	f6 fe       	sbrs	r15, 6
    293c:	0b c0       	rjmp	.+22     	; 0x2954 <vfprintf+0x2cc>
    293e:	5e ef       	ldi	r21, 0xFE	; 254
    2940:	f5 22       	and	r15, r21
    2942:	d9 14       	cp	r13, r9
    2944:	38 f4       	brcc	.+14     	; 0x2954 <vfprintf+0x2cc>
    2946:	f4 fe       	sbrs	r15, 4
    2948:	07 c0       	rjmp	.+14     	; 0x2958 <vfprintf+0x2d0>
    294a:	f2 fc       	sbrc	r15, 2
    294c:	05 c0       	rjmp	.+10     	; 0x2958 <vfprintf+0x2d0>
    294e:	8f ee       	ldi	r24, 0xEF	; 239
    2950:	f8 22       	and	r15, r24
    2952:	02 c0       	rjmp	.+4      	; 0x2958 <vfprintf+0x2d0>
    2954:	1d 2d       	mov	r17, r13
    2956:	01 c0       	rjmp	.+2      	; 0x295a <vfprintf+0x2d2>
    2958:	19 2d       	mov	r17, r9
    295a:	f4 fe       	sbrs	r15, 4
    295c:	0d c0       	rjmp	.+26     	; 0x2978 <vfprintf+0x2f0>
    295e:	fe 01       	movw	r30, r28
    2960:	ed 0d       	add	r30, r13
    2962:	f1 1d       	adc	r31, r1
    2964:	80 81       	ld	r24, Z
    2966:	80 33       	cpi	r24, 0x30	; 48
    2968:	19 f4       	brne	.+6      	; 0x2970 <vfprintf+0x2e8>
    296a:	99 ee       	ldi	r25, 0xE9	; 233
    296c:	f9 22       	and	r15, r25
    296e:	08 c0       	rjmp	.+16     	; 0x2980 <vfprintf+0x2f8>
    2970:	1f 5f       	subi	r17, 0xFF	; 255
    2972:	f2 fe       	sbrs	r15, 2
    2974:	05 c0       	rjmp	.+10     	; 0x2980 <vfprintf+0x2f8>
    2976:	03 c0       	rjmp	.+6      	; 0x297e <vfprintf+0x2f6>
    2978:	8f 2d       	mov	r24, r15
    297a:	86 78       	andi	r24, 0x86	; 134
    297c:	09 f0       	breq	.+2      	; 0x2980 <vfprintf+0x2f8>
    297e:	1f 5f       	subi	r17, 0xFF	; 255
    2980:	0f 2d       	mov	r16, r15
    2982:	f3 fc       	sbrc	r15, 3
    2984:	14 c0       	rjmp	.+40     	; 0x29ae <vfprintf+0x326>
    2986:	f0 fe       	sbrs	r15, 0
    2988:	0f c0       	rjmp	.+30     	; 0x29a8 <vfprintf+0x320>
    298a:	1e 15       	cp	r17, r14
    298c:	10 f0       	brcs	.+4      	; 0x2992 <vfprintf+0x30a>
    298e:	9d 2c       	mov	r9, r13
    2990:	0b c0       	rjmp	.+22     	; 0x29a8 <vfprintf+0x320>
    2992:	9d 2c       	mov	r9, r13
    2994:	9e 0c       	add	r9, r14
    2996:	91 1a       	sub	r9, r17
    2998:	1e 2d       	mov	r17, r14
    299a:	06 c0       	rjmp	.+12     	; 0x29a8 <vfprintf+0x320>
    299c:	80 e2       	ldi	r24, 0x20	; 32
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	b3 01       	movw	r22, r6
    29a2:	0e 94 d6 12 	call	0x25ac	; 0x25ac <fputc>
    29a6:	1f 5f       	subi	r17, 0xFF	; 255
    29a8:	1e 15       	cp	r17, r14
    29aa:	c0 f3       	brcs	.-16     	; 0x299c <vfprintf+0x314>
    29ac:	04 c0       	rjmp	.+8      	; 0x29b6 <vfprintf+0x32e>
    29ae:	1e 15       	cp	r17, r14
    29b0:	10 f4       	brcc	.+4      	; 0x29b6 <vfprintf+0x32e>
    29b2:	e1 1a       	sub	r14, r17
    29b4:	01 c0       	rjmp	.+2      	; 0x29b8 <vfprintf+0x330>
    29b6:	ee 24       	eor	r14, r14
    29b8:	04 ff       	sbrs	r16, 4
    29ba:	0f c0       	rjmp	.+30     	; 0x29da <vfprintf+0x352>
    29bc:	80 e3       	ldi	r24, 0x30	; 48
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	b3 01       	movw	r22, r6
    29c2:	0e 94 d6 12 	call	0x25ac	; 0x25ac <fputc>
    29c6:	02 ff       	sbrs	r16, 2
    29c8:	1d c0       	rjmp	.+58     	; 0x2a04 <vfprintf+0x37c>
    29ca:	01 fd       	sbrc	r16, 1
    29cc:	03 c0       	rjmp	.+6      	; 0x29d4 <vfprintf+0x34c>
    29ce:	88 e7       	ldi	r24, 0x78	; 120
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	0e c0       	rjmp	.+28     	; 0x29f0 <vfprintf+0x368>
    29d4:	88 e5       	ldi	r24, 0x58	; 88
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	0b c0       	rjmp	.+22     	; 0x29f0 <vfprintf+0x368>
    29da:	80 2f       	mov	r24, r16
    29dc:	86 78       	andi	r24, 0x86	; 134
    29de:	91 f0       	breq	.+36     	; 0x2a04 <vfprintf+0x37c>
    29e0:	01 ff       	sbrs	r16, 1
    29e2:	02 c0       	rjmp	.+4      	; 0x29e8 <vfprintf+0x360>
    29e4:	8b e2       	ldi	r24, 0x2B	; 43
    29e6:	01 c0       	rjmp	.+2      	; 0x29ea <vfprintf+0x362>
    29e8:	80 e2       	ldi	r24, 0x20	; 32
    29ea:	f7 fc       	sbrc	r15, 7
    29ec:	8d e2       	ldi	r24, 0x2D	; 45
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	b3 01       	movw	r22, r6
    29f2:	0e 94 d6 12 	call	0x25ac	; 0x25ac <fputc>
    29f6:	06 c0       	rjmp	.+12     	; 0x2a04 <vfprintf+0x37c>
    29f8:	80 e3       	ldi	r24, 0x30	; 48
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	b3 01       	movw	r22, r6
    29fe:	0e 94 d6 12 	call	0x25ac	; 0x25ac <fputc>
    2a02:	9a 94       	dec	r9
    2a04:	d9 14       	cp	r13, r9
    2a06:	c0 f3       	brcs	.-16     	; 0x29f8 <vfprintf+0x370>
    2a08:	da 94       	dec	r13
    2a0a:	f1 01       	movw	r30, r2
    2a0c:	ed 0d       	add	r30, r13
    2a0e:	f1 1d       	adc	r31, r1
    2a10:	80 81       	ld	r24, Z
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	b3 01       	movw	r22, r6
    2a16:	0e 94 d6 12 	call	0x25ac	; 0x25ac <fputc>
    2a1a:	dd 20       	and	r13, r13
    2a1c:	a9 f7       	brne	.-22     	; 0x2a08 <vfprintf+0x380>
    2a1e:	06 c0       	rjmp	.+12     	; 0x2a2c <vfprintf+0x3a4>
    2a20:	80 e2       	ldi	r24, 0x20	; 32
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	b3 01       	movw	r22, r6
    2a26:	0e 94 d6 12 	call	0x25ac	; 0x25ac <fputc>
    2a2a:	ea 94       	dec	r14
    2a2c:	ee 20       	and	r14, r14
    2a2e:	c1 f7       	brne	.-16     	; 0x2a20 <vfprintf+0x398>
    2a30:	43 ce       	rjmp	.-890    	; 0x26b8 <vfprintf+0x30>
    2a32:	f3 01       	movw	r30, r6
    2a34:	66 81       	ldd	r22, Z+6	; 0x06
    2a36:	77 81       	ldd	r23, Z+7	; 0x07
    2a38:	cb 01       	movw	r24, r22
    2a3a:	2b 96       	adiw	r28, 0x0b	; 11
    2a3c:	e2 e1       	ldi	r30, 0x12	; 18
    2a3e:	0c 94 b1 15 	jmp	0x2b62	; 0x2b62 <__epilogue_restores__>

00002a42 <strnlen_P>:
    2a42:	fc 01       	movw	r30, r24
    2a44:	05 90       	lpm	r0, Z+
    2a46:	61 50       	subi	r22, 0x01	; 1
    2a48:	70 40       	sbci	r23, 0x00	; 0
    2a4a:	01 10       	cpse	r0, r1
    2a4c:	d8 f7       	brcc	.-10     	; 0x2a44 <strnlen_P+0x2>
    2a4e:	80 95       	com	r24
    2a50:	90 95       	com	r25
    2a52:	8e 0f       	add	r24, r30
    2a54:	9f 1f       	adc	r25, r31
    2a56:	08 95       	ret

00002a58 <strnlen>:
    2a58:	fc 01       	movw	r30, r24
    2a5a:	61 50       	subi	r22, 0x01	; 1
    2a5c:	70 40       	sbci	r23, 0x00	; 0
    2a5e:	01 90       	ld	r0, Z+
    2a60:	01 10       	cpse	r0, r1
    2a62:	d8 f7       	brcc	.-10     	; 0x2a5a <strnlen+0x2>
    2a64:	80 95       	com	r24
    2a66:	90 95       	com	r25
    2a68:	8e 0f       	add	r24, r30
    2a6a:	9f 1f       	adc	r25, r31
    2a6c:	08 95       	ret

00002a6e <__ultoa_invert>:
    2a6e:	fa 01       	movw	r30, r20
    2a70:	aa 27       	eor	r26, r26
    2a72:	28 30       	cpi	r18, 0x08	; 8
    2a74:	51 f1       	breq	.+84     	; 0x2aca <__ultoa_invert+0x5c>
    2a76:	20 31       	cpi	r18, 0x10	; 16
    2a78:	81 f1       	breq	.+96     	; 0x2ada <__ultoa_invert+0x6c>
    2a7a:	e8 94       	clt
    2a7c:	6f 93       	push	r22
    2a7e:	6e 7f       	andi	r22, 0xFE	; 254
    2a80:	6e 5f       	subi	r22, 0xFE	; 254
    2a82:	7f 4f       	sbci	r23, 0xFF	; 255
    2a84:	8f 4f       	sbci	r24, 0xFF	; 255
    2a86:	9f 4f       	sbci	r25, 0xFF	; 255
    2a88:	af 4f       	sbci	r26, 0xFF	; 255
    2a8a:	b1 e0       	ldi	r27, 0x01	; 1
    2a8c:	3e d0       	rcall	.+124    	; 0x2b0a <__ultoa_invert+0x9c>
    2a8e:	b4 e0       	ldi	r27, 0x04	; 4
    2a90:	3c d0       	rcall	.+120    	; 0x2b0a <__ultoa_invert+0x9c>
    2a92:	67 0f       	add	r22, r23
    2a94:	78 1f       	adc	r23, r24
    2a96:	89 1f       	adc	r24, r25
    2a98:	9a 1f       	adc	r25, r26
    2a9a:	a1 1d       	adc	r26, r1
    2a9c:	68 0f       	add	r22, r24
    2a9e:	79 1f       	adc	r23, r25
    2aa0:	8a 1f       	adc	r24, r26
    2aa2:	91 1d       	adc	r25, r1
    2aa4:	a1 1d       	adc	r26, r1
    2aa6:	6a 0f       	add	r22, r26
    2aa8:	71 1d       	adc	r23, r1
    2aaa:	81 1d       	adc	r24, r1
    2aac:	91 1d       	adc	r25, r1
    2aae:	a1 1d       	adc	r26, r1
    2ab0:	20 d0       	rcall	.+64     	; 0x2af2 <__ultoa_invert+0x84>
    2ab2:	09 f4       	brne	.+2      	; 0x2ab6 <__ultoa_invert+0x48>
    2ab4:	68 94       	set
    2ab6:	3f 91       	pop	r19
    2ab8:	2a e0       	ldi	r18, 0x0A	; 10
    2aba:	26 9f       	mul	r18, r22
    2abc:	11 24       	eor	r1, r1
    2abe:	30 19       	sub	r19, r0
    2ac0:	30 5d       	subi	r19, 0xD0	; 208
    2ac2:	31 93       	st	Z+, r19
    2ac4:	de f6       	brtc	.-74     	; 0x2a7c <__ultoa_invert+0xe>
    2ac6:	cf 01       	movw	r24, r30
    2ac8:	08 95       	ret
    2aca:	46 2f       	mov	r20, r22
    2acc:	47 70       	andi	r20, 0x07	; 7
    2ace:	40 5d       	subi	r20, 0xD0	; 208
    2ad0:	41 93       	st	Z+, r20
    2ad2:	b3 e0       	ldi	r27, 0x03	; 3
    2ad4:	0f d0       	rcall	.+30     	; 0x2af4 <__ultoa_invert+0x86>
    2ad6:	c9 f7       	brne	.-14     	; 0x2aca <__ultoa_invert+0x5c>
    2ad8:	f6 cf       	rjmp	.-20     	; 0x2ac6 <__ultoa_invert+0x58>
    2ada:	46 2f       	mov	r20, r22
    2adc:	4f 70       	andi	r20, 0x0F	; 15
    2ade:	40 5d       	subi	r20, 0xD0	; 208
    2ae0:	4a 33       	cpi	r20, 0x3A	; 58
    2ae2:	18 f0       	brcs	.+6      	; 0x2aea <__ultoa_invert+0x7c>
    2ae4:	49 5d       	subi	r20, 0xD9	; 217
    2ae6:	31 fd       	sbrc	r19, 1
    2ae8:	40 52       	subi	r20, 0x20	; 32
    2aea:	41 93       	st	Z+, r20
    2aec:	02 d0       	rcall	.+4      	; 0x2af2 <__ultoa_invert+0x84>
    2aee:	a9 f7       	brne	.-22     	; 0x2ada <__ultoa_invert+0x6c>
    2af0:	ea cf       	rjmp	.-44     	; 0x2ac6 <__ultoa_invert+0x58>
    2af2:	b4 e0       	ldi	r27, 0x04	; 4
    2af4:	a6 95       	lsr	r26
    2af6:	97 95       	ror	r25
    2af8:	87 95       	ror	r24
    2afa:	77 95       	ror	r23
    2afc:	67 95       	ror	r22
    2afe:	ba 95       	dec	r27
    2b00:	c9 f7       	brne	.-14     	; 0x2af4 <__ultoa_invert+0x86>
    2b02:	00 97       	sbiw	r24, 0x00	; 0
    2b04:	61 05       	cpc	r22, r1
    2b06:	71 05       	cpc	r23, r1
    2b08:	08 95       	ret
    2b0a:	9b 01       	movw	r18, r22
    2b0c:	ac 01       	movw	r20, r24
    2b0e:	0a 2e       	mov	r0, r26
    2b10:	06 94       	lsr	r0
    2b12:	57 95       	ror	r21
    2b14:	47 95       	ror	r20
    2b16:	37 95       	ror	r19
    2b18:	27 95       	ror	r18
    2b1a:	ba 95       	dec	r27
    2b1c:	c9 f7       	brne	.-14     	; 0x2b10 <__ultoa_invert+0xa2>
    2b1e:	62 0f       	add	r22, r18
    2b20:	73 1f       	adc	r23, r19
    2b22:	84 1f       	adc	r24, r20
    2b24:	95 1f       	adc	r25, r21
    2b26:	a0 1d       	adc	r26, r0
    2b28:	08 95       	ret

00002b2a <__prologue_saves__>:
    2b2a:	2f 92       	push	r2
    2b2c:	3f 92       	push	r3
    2b2e:	4f 92       	push	r4
    2b30:	5f 92       	push	r5
    2b32:	6f 92       	push	r6
    2b34:	7f 92       	push	r7
    2b36:	8f 92       	push	r8
    2b38:	9f 92       	push	r9
    2b3a:	af 92       	push	r10
    2b3c:	bf 92       	push	r11
    2b3e:	cf 92       	push	r12
    2b40:	df 92       	push	r13
    2b42:	ef 92       	push	r14
    2b44:	ff 92       	push	r15
    2b46:	0f 93       	push	r16
    2b48:	1f 93       	push	r17
    2b4a:	cf 93       	push	r28
    2b4c:	df 93       	push	r29
    2b4e:	cd b7       	in	r28, 0x3d	; 61
    2b50:	de b7       	in	r29, 0x3e	; 62
    2b52:	ca 1b       	sub	r28, r26
    2b54:	db 0b       	sbc	r29, r27
    2b56:	0f b6       	in	r0, 0x3f	; 63
    2b58:	f8 94       	cli
    2b5a:	de bf       	out	0x3e, r29	; 62
    2b5c:	0f be       	out	0x3f, r0	; 63
    2b5e:	cd bf       	out	0x3d, r28	; 61
    2b60:	09 94       	ijmp

00002b62 <__epilogue_restores__>:
    2b62:	2a 88       	ldd	r2, Y+18	; 0x12
    2b64:	39 88       	ldd	r3, Y+17	; 0x11
    2b66:	48 88       	ldd	r4, Y+16	; 0x10
    2b68:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b6a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b6c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b6e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b70:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b72:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b74:	b9 84       	ldd	r11, Y+9	; 0x09
    2b76:	c8 84       	ldd	r12, Y+8	; 0x08
    2b78:	df 80       	ldd	r13, Y+7	; 0x07
    2b7a:	ee 80       	ldd	r14, Y+6	; 0x06
    2b7c:	fd 80       	ldd	r15, Y+5	; 0x05
    2b7e:	0c 81       	ldd	r16, Y+4	; 0x04
    2b80:	1b 81       	ldd	r17, Y+3	; 0x03
    2b82:	aa 81       	ldd	r26, Y+2	; 0x02
    2b84:	b9 81       	ldd	r27, Y+1	; 0x01
    2b86:	ce 0f       	add	r28, r30
    2b88:	d1 1d       	adc	r29, r1
    2b8a:	0f b6       	in	r0, 0x3f	; 63
    2b8c:	f8 94       	cli
    2b8e:	de bf       	out	0x3e, r29	; 62
    2b90:	0f be       	out	0x3f, r0	; 63
    2b92:	cd bf       	out	0x3d, r28	; 61
    2b94:	ed 01       	movw	r28, r26
    2b96:	08 95       	ret

00002b98 <_exit>:
    2b98:	f8 94       	cli

00002b9a <__stop_program>:
    2b9a:	ff cf       	rjmp	.-2      	; 0x2b9a <__stop_program>
